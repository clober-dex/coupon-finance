{
  "address": "0x00644a534bDea310ee2FCCF1c2821Df769A0b12F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "minters",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EpochOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "coupons",
          "type": "tuple[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint8"
            }
          ],
          "internalType": "struct CouponKey[]",
          "name": "couponKeys",
          "type": "tuple[]"
        }
      ],
      "name": "burnExpiredCoupons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "Epoch",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "Epoch",
          "name": "epoch",
          "type": "uint8"
        }
      ],
      "name": "epochEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "coupons",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "coupons",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a3ef8781185943f6e02c83e2a547a76fc47e2147a360f2d7499d1a6032e5c8b",
  "receipt": {
    "to": null,
    "from": "0xa0E3174f4D222C5CBf705A138C6a9369935EeD81",
    "contractAddress": "0x00644a534bDea310ee2FCCF1c2821Df769A0b12F",
    "transactionIndex": 0,
    "gasUsed": "2936554",
    "logsBloom": "0x
    "blockHash": "0xc3284e61ce6979d72de314e25193030b2d2a62e9966114f0a1f5c4819ebe0f08",
    "transactionHash": "0x8a3ef8781185943f6e02c83e2a547a76fc47e2147a360f2d7499d1a6032e5c8b",
    "logs": [],
    "blockNumber": 120270526,
    "cumulativeGasUsed": "2936554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xe0dbcb42ccac63c949ce3ef879a647ddb662916d",
      "0xdbab42f029333bf720814732bb3e3d74c074b558"
    ],
    "COUPON_BASE_URI"
  ],
  "numDeployments": 1,
  "solcInputHash": "8341a0300ed40a8c4fa0bc45c0cf56b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"minters\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EpochOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey[]\",\"name\":\"couponKeys\",\"type\":\"tuple[]\"}],\"name\":\"burnExpiredCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"Epoch\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"name\":\"epochEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CouponManager.sol\":\"CouponManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(    _domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa5936b488143a6ec4f64481275681ef59cccc46bcaac2ebabd0766b7c62606b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {ERC1155Supply} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {CouponKey, CouponKeyLibrary} from \\\"./libraries/CouponKey.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./libraries/Coupon.sol\\\";\\nimport {Epoch, EpochLibrary} from \\\"./libraries/Epoch.sol\\\";\\nimport {ERC1155Permit} from \\\"./libraries/ERC1155Permit.sol\\\";\\nimport {ICouponManager} from \\\"./interfaces/ICouponManager.sol\\\";\\n\\ncontract CouponManager is ERC1155Permit, ERC1155Supply, ICouponManager {\\n    using Strings for uint256;\\n    using CouponKeyLibrary for CouponKey;\\n    using CouponLibrary for Coupon;\\n    using EpochLibrary for Epoch;\\n\\n    mapping(address => bool) public override isMinter;\\n    string public override baseURI;\\n\\n    constructor(address[] memory minters, string memory uri_) ERC1155Permit(uri_, \\\"Coupon\\\", \\\"1\\\") {\\n        for (uint256 i = 0; i < minters.length; ++i) {\\n            isMinter[minters[i]] = true;\\n        }\\n        baseURI = uri_;\\n    }\\n\\n    modifier onlyMinter() {\\n        if (!isMinter[msg.sender]) {\\n            revert InvalidAccess();\\n        }\\n        _;\\n    }\\n\\n    // View Functions //\\n    function uri(uint256 id) public view override(ERC1155, IERC1155MetadataURI) returns (string memory) {\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, id.toHexString(32))) : \\\"\\\";\\n    }\\n\\n    function currentEpoch() external view returns (Epoch) {\\n        return EpochLibrary.current();\\n    }\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256) {\\n        return epoch.endTime();\\n    }\\n\\n    function totalSupply(uint256 id) public view override(ERC1155Supply, ICouponManager) returns (uint256) {\\n        return super.totalSupply(id);\\n    }\\n\\n    function exists(uint256 id) public view override(ERC1155Supply, ICouponManager) returns (bool) {\\n        return super.exists(id);\\n    }\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external {\\n        (uint256[] memory ids, uint256[] memory amounts) = _splitCoupons(coupons);\\n        safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external {\\n        uint256[] memory ids = new uint256[](couponKeys.length);\\n        uint256[] memory amounts = new uint256[](couponKeys.length);\\n        Epoch current = EpochLibrary.current();\\n        uint256 count;\\n        for (uint256 i = 0; i < couponKeys.length; ++i) {\\n            if (couponKeys[i].epoch >= current) {\\n                continue;\\n            }\\n            uint256 id = couponKeys[i].toId();\\n            uint256 amount = balanceOf(msg.sender, id);\\n            if (amount == 0) {\\n                continue;\\n            }\\n            count++;\\n            ids[i] = id;\\n            amounts[i] = amount;\\n        }\\n        assembly {\\n            mstore(ids, count)\\n            mstore(amounts, count)\\n        }\\n        _burnBatch(msg.sender, ids, amounts);\\n    }\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external onlyMinter {\\n        (uint256[] memory ids, uint256[] memory amounts) = _splitCoupons(coupons);\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external onlyMinter {\\n        (uint256[] memory ids, uint256[] memory amounts) = _splitCoupons(coupons);\\n        _burnBatch(user, ids, amounts);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155, ERC1155Permit, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override(ERC1155, ERC1155Supply) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n\\n    function _splitCoupons(Coupon[] calldata coupons)\\n        internal\\n        pure\\n        returns (uint256[] memory ids, uint256[] memory amounts)\\n    {\\n        ids = new uint256[](coupons.length);\\n        amounts = new uint256[](coupons.length);\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                ids[i] = coupons[i].key.toId();\\n                amounts[i] = coupons[i].amount;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb92927fc94b9c910c7f307fe4da743fc4783c683032e7f5580087b8301c31d77\",\"license\":\"-\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0x4f1a615779112533d819659b1716dd32025146ed23e089b68fdfa4f49eb49227\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC1155Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ninterface IERC1155Permit is IERC1155 {\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    function nonces(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e1997be15edf487eba1972b16ca89c794315764e0d8f7dceccdd80cbb142344\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xec4704e8fb701f1d7f179e5eff740b921875a9f9214af33afd3733ff9ab92738\",\"license\":\"-\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint8 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72e7246a8334b730c3c4e6460b3323bcd26d4c177aaa6270318101bd44952f36\",\"license\":\"-\"},\"contracts/libraries/ERC1155Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {ERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\nimport {IERC1155Permit} from \\\"../interfaces/IERC1155Permit.sol\\\";\\n\\ncontract ERC1155Permit is ERC1155, IERC1155Permit, EIP712 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\");\\n\\n    constructor(string memory uri_, string memory name, string memory version) ERC1155(uri_) EIP712(name, version) {}\\n\\n    function permit(address owner, address operator, bool approved, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        override\\n    {\\n        if (block.timestamp > deadline) revert PermitExpired();\\n\\n        bytes32 structHash;\\n        unchecked {\\n            structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, operator, approved, nonces[owner]++, deadline));\\n        }\\n\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        if (Address.isContract(owner)) {\\n            if (IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) != 0x1626ba7e) {\\n                revert InvalidSignature();\\n            }\\n        } else {\\n            address signer = ECDSA.recover(digest, v, r, s);\\n            if (signer != owner) revert InvalidSignature();\\n        }\\n\\n        _setApprovalForAll(owner, operator, approved);\\n    }\\n\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Permit).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x1f3c4c44dae860d46f878b3fd4684025aaba1e300460d6c1c71144c6733c6f40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\ntype Epoch is uint8;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 6;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function wrap(uint8 epoch) internal pure returns (Epoch) {\\n        return Epoch.wrap(epoch);\\n    }\\n\\n    function unwrap(Epoch epoch) internal pure returns (uint8) {\\n        return Epoch.unwrap(epoch);\\n    }\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint8 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1);\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function isExpired(Epoch epoch) internal view returns (bool) {\\n        return endTime(epoch) <= block.timestamp;\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function long(Epoch epoch) internal pure returns (uint256) {\\n        unchecked {\\n            return endTime(epoch) - startTime(epoch);\\n        }\\n    }\\n\\n    function add(Epoch epoch, uint8 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint8 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint8) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint8) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint8).max) revert EpochOverflow();\\n            return uint8(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint8 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7b93057e19becf5fdb4d1646120f7609763fc7cd1fd4837eb3712be6dd8c45d\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x61016060405234801562000011575f80fd5b50604051620038743803806200387483398101604081905262000034916200032e565b806040518060400160405280600681526020016521b7bab837b760d11b815250604051806040016040528060018152602001603160f81b8152508181846200008281620001bd60201b60201c565b5062000090826003620001cf565b61012052620000a1816004620001cf565b61014052815160208084019190912060e052815190820120610100524660a0526200012e60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b60805250503060c052505f9150505b8251811015620001a557600160075f85848151811062000161576200016162000419565b6020908102919091018101516001600160a01b031682528101919091526040015f20805460ff19169115159190911790556200019d816200042d565b90506200013d565b506008620001b48282620004de565b505050620005fe565b6002620001cb8282620004de565b5050565b5f602083511015620001ee57620001e68362000207565b905062000201565b81620001fb8482620004de565b5060ff90505b92915050565b5f80829050601f815111156200023d578260405163305a27a960e01b8152600401620002349190620005a6565b60405180910390fd5b80516200024a82620005da565b179392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171562000291576200029162000252565b604052919050565b5f5b83811015620002b55781810151838201526020016200029b565b50505f910152565b5f82601f830112620002cd575f80fd5b81516001600160401b03811115620002e957620002e962000252565b620002fe601f8201601f191660200162000266565b81815284602083860101111562000313575f80fd5b6200032682602083016020870162000299565b949350505050565b5f806040838503121562000340575f80fd5b82516001600160401b038082111562000357575f80fd5b818501915085601f8301126200036b575f80fd5b815160208282111562000382576200038262000252565b8160051b6200039382820162000266565b928352848101820192828101908a851115620003ad575f80fd5b958301955b84871015620003e657865192506001600160a01b0383168314620003d5575f8081fd5b8282529583019590830190620003b2565b928901519297509194505050508082111562000400575f80fd5b506200040f85828601620002bd565b9150509250929050565b634e487b7160e01b5f52603260045260245ffd5b5f600182016200044b57634e487b7160e01b5f52601160045260245ffd5b5060010190565b600181811c908216806200046757607f821691505b6020821081036200048657634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620004d9575f81815260208120601f850160051c81016020861015620004b45750805b601f850160051c820191505b81811015620004d557828155600101620004c0565b5050505b505050565b81516001600160401b03811115620004fa57620004fa62000252565b62000512816200050b845462000452565b846200048c565b602080601f83116001811462000548575f8415620005305750858301515b5f19600386901b1c1916600185901b178555620004d5565b5f85815260208120601f198616915b82811015620005785788860151825594840194600190910190840162000557565b50858210156200059657878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b602081525f8251806020840152620005c681604085016020870162000299565b601f01601f19169190910160400192915050565b8051602080830151919081101562000486575f1960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051613224620006505f395f61086701525f61083c01525f61146201525f61143a01525f61139501525f6113bf01525f6113e901526132245ff3fe608060405234801561000f575f80fd5b5060043610610183575f3560e01c80636c0360eb116100dd578063bd85b03911610088578063f242432a11610063578063f242432a14610392578063f2c53601146103a5578063f51cc7dd146103b8575f80fd5b8063bd85b03914610331578063ca6ce7ea14610344578063e985e9c514610357575f80fd5b806384b0196e116100b857806384b0196e146102e1578063a22cb465146102fc578063aa271e1a1461030f575f80fd5b80636c0360eb146102a057806376671808146102a85780637ecebe00146102c2575f80fd5b80632eb2c2d61161013d5780633ee44b0f116101185780633ee44b0f1461025a5780634e1273f41461026d5780634f558e791461028d575f80fd5b80632eb2c2d61461021857806330adf81f1461022b5780633644e51514610252575f80fd5b80630c5ee49e1161016d5780630c5ee49e146101d05780630e89341c146101e3578063100886cc14610203575f80fd5b8062fdd58e1461018757806301ffc9a7146101ad575b5f80fd5b61019a61019536600461266b565b6103cb565b6040519081526020015b60405180910390f35b6101c06101bb3660046126a8565b610475565b60405190151581526020016101a4565b61019a6101de3660046126d1565b61047f565b6101f66101f13660046126ec565b61048c565b6040516101a49190612750565b6102166102113660046127aa565b6104ea565b005b6102166102263660046129a0565b610546565b61019a7f7bf72c3e57bc00556754c7454ead7d72d1c0e263909e7c643fbc0d1e0f3c3e7481565b61019a6105e8565b610216610268366004612a43565b6105f6565b61028061027b366004612ab8565b610649565b6040516101a49190612bb6565b6101c061029b3660046126ec565b610785565b6101f661079a565b6102b0610826565b60405160ff90911681526020016101a4565b61019a6102d0366004612bc8565b60056020525f908152604090205481565b6102e961082f565b6040516101a49796959493929190612be1565b61021661030a366004612c79565b6108d2565b6101c061031d366004612bc8565b60076020525f908152604090205460ff1681565b61019a61033f3660046126ec565b6108e1565b610216610352366004612caa565b6108f4565b6101c0610365366004612cf9565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b6102166103a0366004612d21565b61093e565b6102166103b3366004612d81565b6109d9565b6102166103c6366004612df0565b610b82565b5f6001600160a01b03831661044d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b505f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f61046f82610dd7565b5f61046f8260ff16610e14565b60605f6008805461049c90612e5f565b9050116104b75760405180602001604052805f81525061046f565b60086104c4836020610e1e565b6040516020016104d5929190612eb2565b60405160208183030381529060405292915050565b5f806104f68686611000565b9150915061053c8888848488888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061054692505050565b5050505050505050565b6001600160a01b03851633148061056257506105628533610365565b6105d45760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610444565b6105e1858585858561112a565b5050505050565b5f6105f1611389565b905090565b335f9081526007602052604090205460ff1661062557604051633006171960e21b815260040160405180910390fd5b5f806106318585611000565b91509150610641868383866114b5565b505050505050565b606081518351146106c25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610444565b5f835167ffffffffffffffff8111156106dd576106dd61285e565b604051908082528060200260200182016040528015610706578160200160208202803683370190505b5090505f5b845181101561077d5761075085828151811061072957610729612f59565b602002602001015185838151811061074357610743612f59565b60200260200101516103cb565b82828151811061076257610762612f59565b602090810291909101015261077681612f81565b905061070b565b509392505050565b5f81815260066020526040812054151561046f565b600880546107a790612e5f565b80601f01602080910402602001604051908101604052809291908181526020018280546107d390612e5f565b801561081e5780601f106107f55761010080835404028352916020019161081e565b820191905f5260205f20905b81548152906001019060200180831161080157829003601f168201915b505050505081565b5f6105f161169d565b5f606080828080836108627f000000000000000000000000000000000000000000000000000000000000000060036116a7565b61088d7f000000000000000000000000000000000000000000000000000000000000000060046116a7565b604080515f808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6108dd338383611750565b5050565b5f8181526006602052604081205461046f565b335f9081526007602052604090205460ff1661092357604051633006171960e21b815260040160405180910390fd5b5f8061092f8484611000565b915091506105e1858383611843565b6001600160a01b03851633148061095a575061095a8533610365565b6109cc5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610444565b6105e18585858585611ac2565b5f8167ffffffffffffffff8111156109f3576109f361285e565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b5090505f8267ffffffffffffffff811115610a3957610a3961285e565b604051908082528060200260200182016040528015610a62578160200160208202803683370190505b5090505f610a6e61169d565b90505f805b85811015610b7057610ab4878783818110610a9057610a90612f59565b9050604002016020016020810190610aa891906126d1565b60ff8086169116101590565b610b60575f610af5888884818110610ace57610ace612f59565b905060400201803603810190610ae49190612f99565b6020810151905160a09190911b0190565b90505f610b0233836103cb565b9050805f03610b12575050610b60565b83610b1c81612f81565b94505081878481518110610b3257610b32612f59565b60200260200101818152505080868481518110610b5157610b51612f59565b60200260200101818152505050505b610b6981612f81565b9050610a73565b50808452808352610641338585611843565b83421115610bbc576040517f1a15a3cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038781165f81815260056020908152604080832080546001810190915581517f7bf72c3e57bc00556754c7454ead7d72d1c0e263909e7c643fbc0d1e0f3c3e748185015280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e09093019093528151919092012090610c5182611c6c565b90506001600160a01b0389163b15610d7e57604080516020810186905280820185905260f887901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e000000000000000000000000000000000000000000000000000000009092526001600160a01b038b1691631626ba7e91610cf5918591606501612ff4565b602060405180830381865afa158015610d10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d349190613014565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610d7957604051638baa579f60e01b815260040160405180910390fd5b610dc1565b5f610d8b82878787611cb3565b9050896001600160a01b0316816001600160a01b031614610dbf57604051638baa579f60e01b815260040160405180910390fd5b505b610dcc898989611750565b505050505050505050565b5f6001600160e01b031982167f8d3b64d700000000000000000000000000000000000000000000000000000000148061046f575061046f82611cd9565b5f61046f82611d73565b60605f610e2c83600261302f565b610e37906002613046565b67ffffffffffffffff811115610e4f57610e4f61285e565b6040519080825280601f01601f191660200182016040528015610e79576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110610eaf57610eaf612f59565b60200101906001600160f81b03191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610ef957610ef9612f59565b60200101906001600160f81b03191690815f1a9053505f610f1b84600261302f565b610f26906001613046565b90505b6001811115610faa577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610f6757610f67612f59565b1a60f81b828281518110610f7d57610f7d612f59565b60200101906001600160f81b03191690815f1a90535060049490941c93610fa381613059565b9050610f29565b508315610ff95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610444565b9392505050565b6060808267ffffffffffffffff81111561101c5761101c61285e565b604051908082528060200260200182016040528015611045578160200160208202803683370190505b5091508267ffffffffffffffff8111156110615761106161285e565b60405190808252806020026020018201604052801561108a578160200160208202803683370190505b5090505f5b83811015611122576110c38585838181106110ac576110ac612f59565b610ae4926060909102013681900381019150612f99565b8382815181106110d5576110d5612f59565b6020026020010181815250508484828181106110f3576110f3612f59565b9050606002016040013582828151811061110f5761110f612f59565b602090810291909101015260010161108f565b509250929050565b815183511461118c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b6001600160a01b0384166111f05760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610444565b336111ff818787878787611e44565b5f5b8451811015611323575f85828151811061121d5761121d612f59565b602002602001015190505f85838151811061123a5761123a612f59565b6020908102919091018101515f84815280835260408082206001600160a01b038e1683529093529190912054909150818110156112cc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610444565b5f838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611308908490613046565b925050819055505050508061131c90612f81565b9050611201565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161137392919061306e565b60405180910390a4610641818787878787611e52565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156113e157507f000000000000000000000000000000000000000000000000000000000000000046145b1561140b57507f000000000000000000000000000000000000000000000000000000000000000090565b6105f1604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b90565b6001600160a01b0384166115315760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610444565b81518351146115935760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b336115a2815f87878787611e44565b5f5b8451811015611637578381815181106115bf576115bf612f59565b60200260200101515f808784815181106115db576115db612f59565b602002602001015181526020019081526020015f205f886001600160a01b03166001600160a01b031681526020019081526020015f205f82825461161f9190613046565b9091555081905061162f81612f81565b9150506115a4565b50846001600160a01b03165f6001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161168792919061306e565b60405180910390a46105e1815f87878787611e52565b5f6105f142611fff565b606060ff83146116c1576116ba836120e8565b905061046f565b8180546116cd90612e5f565b80601f01602080910402602001604051908101604052809291908181526020018280546116f990612e5f565b80156117445780601f1061171b57610100808354040283529160200191611744565b820191905f5260205f20905b81548152906001019060200180831161172757829003601f168201915b5050505050905061046f565b816001600160a01b0316836001600160a01b0316036117d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610444565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166118bf5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610444565b80518251146119215760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b5f33905061194181855f868660405180602001604052805f815250611e44565b5f5b8351811015611a56575f84828151811061195f5761195f612f59565b602002602001015190505f84838151811061197c5761197c612f59565b6020908102919091018101515f84815280835260408082206001600160a01b038c168352909352919091205490915081811015611a205760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610444565b5f928352602083815260408085206001600160a01b038b1686529091529092209103905580611a4e81612f81565b915050611943565b505f6001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611aa692919061306e565b60405180910390a460408051602081019091525f905250505050565b6001600160a01b038416611b265760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610444565b335f611b3185612125565b90505f611b3d85612125565b9050611b4d838989858589611e44565b5f868152602081815260408083206001600160a01b038c16845290915290205485811015611bd05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610444565b5f878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c0c908490613046565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dcc848a8a8a8a8a61216e565b5f61046f611c78611389565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b5f805f611cc287878787612269565b91509150611ccf81612326565b5095945050505050565b5f6001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480611d3b57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061046f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461046f565b5f600660ff831681020181600c82046107b20190506004600c8381611d9a57611d9a613092565b06901b915060048106158015611db257506064810615155b80611dbf57506101908106155b15611de85779016e014f0131011200f400d500b600980079005b003c001f000090911c90611e08565b79016d014e0130011100f300d400b500970078005a003b001f000090911c905b6201518061019061064019830104606461076c1984010460046107b0198501046107b2850361016d028661ffff16010103010292505050919050565b61064186868686868661248d565b6001600160a01b0384163b156106415760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e9690899089908890889088906004016130a6565b6020604051808303815f875af1925050508015611ed0575060408051601f3d908101601f19168201909252611ecd91810190613014565b60015b611f8557611edc6130f7565b806308c379a003611f155750611ef061310f565b80611efb5750611f17565b8060405162461bcd60e51b81526004016104449190612750565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610444565b6001600160e01b0319811663bc197c8160e01b14611ff65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610444565b50505050505050565b5f806201518083049050806226496581015f62023ab1600483020590506004600362023ab183020105909103905f62164b09610fa0600185010205905060046105b58202058303601f0192505f61098f846050028161206057612060613092565b059050600b8105935083600c0281600201039050838260318503606402010191505f60066001836107b28603600c0201038161209e5761209e613092565b04905060ff8111156120dc576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b60605f6120f483612610565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061215d5761215d612f59565b602090810291909101015292915050565b6001600160a01b0384163b156106415760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121b29089908990889088908890600401613198565b6020604051808303815f875af19250505080156121ec575060408051601f3d908101601f191682019092526121e991810190613014565b60015b6121f857611edc6130f7565b6001600160e01b0319811663f23a6e6160e01b14611ff65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610444565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561229e57505f9050600361231d565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122ef573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116612317575f6001925092505061231d565b91505f90505b94509492505050565b5f816004811115612339576123396131da565b036123415750565b6001816004811115612355576123556131da565b036123a25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610444565b60028160048111156123b6576123b66131da565b036124035760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610444565b6003816004811115612417576124176131da565b0361248a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610444565b50565b6001600160a01b038516612510575f5b835181101561250e578281815181106124b8576124b8612f59565b602002602001015160065f8684815181106124d5576124d5612f59565b602002602001015181526020019081526020015f205f8282546124f89190613046565b90915550612507905081612f81565b905061249d565b505b6001600160a01b038416610641575f5b8351811015611ff6575f84828151811061253c5761253c612f59565b602002602001015190505f84838151811061255957612559612f59565b602002602001015190505f60065f8481526020019081526020015f20549050818110156125ee5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610444565b5f928352600660205260409092209103905561260981612f81565b9050612520565b5f60ff8216601f81111561046f576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b0381168114612666575f80fd5b919050565b5f806040838503121561267c575f80fd5b61268583612650565b946020939093013593505050565b6001600160e01b03198116811461248a575f80fd5b5f602082840312156126b8575f80fd5b8135610ff981612693565b60ff8116811461248a575f80fd5b5f602082840312156126e1575f80fd5b8135610ff9816126c3565b5f602082840312156126fc575f80fd5b5035919050565b5f5b8381101561271d578181015183820152602001612705565b50505f910152565b5f815180845261273c816020860160208601612703565b601f01601f19169290920160200192915050565b602081525f610ff96020830184612725565b5f8083601f840112612772575f80fd5b50813567ffffffffffffffff811115612789575f80fd5b6020830191508360206060830285010111156127a3575f80fd5b9250929050565b5f805f805f80608087890312156127bf575f80fd5b6127c887612650565b95506127d660208801612650565b9450604087013567ffffffffffffffff808211156127f2575f80fd5b6127fe8a838b01612762565b90965094506060890135915080821115612816575f80fd5b818901915089601f830112612829575f80fd5b813581811115612837575f80fd5b8a6020828501011115612848575f80fd5b6020830194508093505050509295509295509295565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff811182821017156128985761289861285e565b6040525050565b5f67ffffffffffffffff8211156128b8576128b861285e565b5060051b60200190565b5f82601f8301126128d1575f80fd5b813560206128de8261289f565b6040516128eb8282612872565b83815260059390931b850182019282810191508684111561290a575f80fd5b8286015b84811015612925578035835291830191830161290e565b509695505050505050565b5f82601f83011261293f575f80fd5b813567ffffffffffffffff8111156129595761295961285e565b604051612970601f8301601f191660200182612872565b818152846020838601011115612984575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156129b4575f80fd5b6129bd86612650565b94506129cb60208701612650565b9350604086013567ffffffffffffffff808211156129e7575f80fd5b6129f389838a016128c2565b94506060880135915080821115612a08575f80fd5b612a1489838a016128c2565b93506080880135915080821115612a29575f80fd5b50612a3688828901612930565b9150509295509295909350565b5f805f8060608587031215612a56575f80fd5b612a5f85612650565b9350602085013567ffffffffffffffff80821115612a7b575f80fd5b612a8788838901612762565b90955093506040870135915080821115612a9f575f80fd5b50612aac87828801612930565b91505092959194509250565b5f8060408385031215612ac9575f80fd5b823567ffffffffffffffff80821115612ae0575f80fd5b818501915085601f830112612af3575f80fd5b81356020612b008261289f565b604051612b0d8282612872565b83815260059390931b8501820192828101915089841115612b2c575f80fd5b948201945b83861015612b5157612b4286612650565b82529482019490820190612b31565b96505086013592505080821115612b66575f80fd5b50612b73858286016128c2565b9150509250929050565b5f8151808452602080850194508084015f5b83811015612bab57815187529582019590820190600101612b8f565b509495945050505050565b602081525f610ff96020830184612b7d565b5f60208284031215612bd8575f80fd5b610ff982612650565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f612c1b60e0830189612725565b8281036040840152612c2d8189612725565b90508660608401526001600160a01b03861660808401528460a084015282810360c0840152612c5c8185612b7d565b9a9950505050505050505050565b80358015158114612666575f80fd5b5f8060408385031215612c8a575f80fd5b612c9383612650565b9150612ca160208401612c6a565b90509250929050565b5f805f60408486031215612cbc575f80fd5b612cc584612650565b9250602084013567ffffffffffffffff811115612ce0575f80fd5b612cec86828701612762565b9497909650939450505050565b5f8060408385031215612d0a575f80fd5b612d1383612650565b9150612ca160208401612650565b5f805f805f60a08688031215612d35575f80fd5b612d3e86612650565b9450612d4c60208701612650565b93506040860135925060608601359150608086013567ffffffffffffffff811115612d75575f80fd5b612a3688828901612930565b5f8060208385031215612d92575f80fd5b823567ffffffffffffffff80821115612da9575f80fd5b818501915085601f830112612dbc575f80fd5b813581811115612dca575f80fd5b8660208260061b8501011115612dde575f80fd5b60209290920196919550909350505050565b5f805f805f805f60e0888a031215612e06575f80fd5b612e0f88612650565b9650612e1d60208901612650565b9550612e2b60408901612c6a565b9450606088013593506080880135612e42816126c3565b9699959850939692959460a0840135945060c09093013592915050565b600181811c90821680612e7357607f821691505b602082108103612e9157634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8151612ea8818560208601612703565b9290920192915050565b5f80845481600182811c915080831680612ecd57607f831692505b60208084108203612eec57634e487b7160e01b86526022600452602486fd5b818015612f005760018114612f1557612f40565b60ff1986168952841515850289019650612f40565b5f8b8152602090205f5b86811015612f385781548b820152908501908301612f1f565b505084890196505b505050505050612f508185612e97565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f60018201612f9257612f92612f6d565b5060010190565b5f60408284031215612fa9575f80fd5b6040516040810181811067ffffffffffffffff82111715612fcc57612fcc61285e565b604052612fd883612650565b81526020830135612fe8816126c3565b60208201529392505050565b828152604060208201525f61300c6040830184612725565b949350505050565b5f60208284031215613024575f80fd5b8151610ff981612693565b808202811582820484141761046f5761046f612f6d565b8082018082111561046f5761046f612f6d565b5f8161306757613067612f6d565b505f190190565b604081525f6130806040830185612b7d565b8281036020840152612f508185612b7d565b634e487b7160e01b5f52601260045260245ffd5b5f6001600160a01b03808816835280871660208401525060a060408301526130d160a0830186612b7d565b82810360608401526130e38186612b7d565b905082810360808401526120dc8185612725565b5f60033d11156114b25760045f803e505f5160e01c90565b5f60443d101561311c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561314c57505050505090565b82850191508151818111156131645750505050505090565b843d870101602082850101111561317e5750505050505090565b61318d60208286010187612872565b509095945050505050565b5f6001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526131cf60a0830184612725565b979650505050505050565b634e487b7160e01b5f52602160045260245ffdfea26469706673582212208123b2c3f4e38302ce8dcfe71a10bc239215d6764aaa56f8c7f22a9a3a36d13a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610183575f3560e01c80636c0360eb116100dd578063bd85b03911610088578063f242432a11610063578063f242432a14610392578063f2c53601146103a5578063f51cc7dd146103b8575f80fd5b8063bd85b03914610331578063ca6ce7ea14610344578063e985e9c514610357575f80fd5b806384b0196e116100b857806384b0196e146102e1578063a22cb465146102fc578063aa271e1a1461030f575f80fd5b80636c0360eb146102a057806376671808146102a85780637ecebe00146102c2575f80fd5b80632eb2c2d61161013d5780633ee44b0f116101185780633ee44b0f1461025a5780634e1273f41461026d5780634f558e791461028d575f80fd5b80632eb2c2d61461021857806330adf81f1461022b5780633644e51514610252575f80fd5b80630c5ee49e1161016d5780630c5ee49e146101d05780630e89341c146101e3578063100886cc14610203575f80fd5b8062fdd58e1461018757806301ffc9a7146101ad575b5f80fd5b61019a61019536600461266b565b6103cb565b6040519081526020015b60405180910390f35b6101c06101bb3660046126a8565b610475565b60405190151581526020016101a4565b61019a6101de3660046126d1565b61047f565b6101f66101f13660046126ec565b61048c565b6040516101a49190612750565b6102166102113660046127aa565b6104ea565b005b6102166102263660046129a0565b610546565b61019a7f7bf72c3e57bc00556754c7454ead7d72d1c0e263909e7c643fbc0d1e0f3c3e7481565b61019a6105e8565b610216610268366004612a43565b6105f6565b61028061027b366004612ab8565b610649565b6040516101a49190612bb6565b6101c061029b3660046126ec565b610785565b6101f661079a565b6102b0610826565b60405160ff90911681526020016101a4565b61019a6102d0366004612bc8565b60056020525f908152604090205481565b6102e961082f565b6040516101a49796959493929190612be1565b61021661030a366004612c79565b6108d2565b6101c061031d366004612bc8565b60076020525f908152604090205460ff1681565b61019a61033f3660046126ec565b6108e1565b610216610352366004612caa565b6108f4565b6101c0610365366004612cf9565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b6102166103a0366004612d21565b61093e565b6102166103b3366004612d81565b6109d9565b6102166103c6366004612df0565b610b82565b5f6001600160a01b03831661044d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201527f616c6964206f776e65720000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b505f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f61046f82610dd7565b5f61046f8260ff16610e14565b60605f6008805461049c90612e5f565b9050116104b75760405180602001604052805f81525061046f565b60086104c4836020610e1e565b6040516020016104d5929190612eb2565b60405160208183030381529060405292915050565b5f806104f68686611000565b9150915061053c8888848488888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061054692505050565b5050505050505050565b6001600160a01b03851633148061056257506105628533610365565b6105d45760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610444565b6105e1858585858561112a565b5050505050565b5f6105f1611389565b905090565b335f9081526007602052604090205460ff1661062557604051633006171960e21b815260040160405180910390fd5b5f806106318585611000565b91509150610641868383866114b5565b505050505050565b606081518351146106c25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610444565b5f835167ffffffffffffffff8111156106dd576106dd61285e565b604051908082528060200260200182016040528015610706578160200160208202803683370190505b5090505f5b845181101561077d5761075085828151811061072957610729612f59565b602002602001015185838151811061074357610743612f59565b60200260200101516103cb565b82828151811061076257610762612f59565b602090810291909101015261077681612f81565b905061070b565b509392505050565b5f81815260066020526040812054151561046f565b600880546107a790612e5f565b80601f01602080910402602001604051908101604052809291908181526020018280546107d390612e5f565b801561081e5780601f106107f55761010080835404028352916020019161081e565b820191905f5260205f20905b81548152906001019060200180831161080157829003601f168201915b505050505081565b5f6105f161169d565b5f606080828080836108627f000000000000000000000000000000000000000000000000000000000000000060036116a7565b61088d7f000000000000000000000000000000000000000000000000000000000000000060046116a7565b604080515f808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b6108dd338383611750565b5050565b5f8181526006602052604081205461046f565b335f9081526007602052604090205460ff1661092357604051633006171960e21b815260040160405180910390fd5b5f8061092f8484611000565b915091506105e1858383611843565b6001600160a01b03851633148061095a575061095a8533610365565b6109cc5760405162461bcd60e51b815260206004820152602e60248201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60448201527f6572206f7220617070726f7665640000000000000000000000000000000000006064820152608401610444565b6105e18585858585611ac2565b5f8167ffffffffffffffff8111156109f3576109f361285e565b604051908082528060200260200182016040528015610a1c578160200160208202803683370190505b5090505f8267ffffffffffffffff811115610a3957610a3961285e565b604051908082528060200260200182016040528015610a62578160200160208202803683370190505b5090505f610a6e61169d565b90505f805b85811015610b7057610ab4878783818110610a9057610a90612f59565b9050604002016020016020810190610aa891906126d1565b60ff8086169116101590565b610b60575f610af5888884818110610ace57610ace612f59565b905060400201803603810190610ae49190612f99565b6020810151905160a09190911b0190565b90505f610b0233836103cb565b9050805f03610b12575050610b60565b83610b1c81612f81565b94505081878481518110610b3257610b32612f59565b60200260200101818152505080868481518110610b5157610b51612f59565b60200260200101818152505050505b610b6981612f81565b9050610a73565b50808452808352610641338585611843565b83421115610bbc576040517f1a15a3cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038781165f81815260056020908152604080832080546001810190915581517f7bf72c3e57bc00556754c7454ead7d72d1c0e263909e7c643fbc0d1e0f3c3e748185015280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e09093019093528151919092012090610c5182611c6c565b90506001600160a01b0389163b15610d7e57604080516020810186905280820185905260f887901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e000000000000000000000000000000000000000000000000000000009092526001600160a01b038b1691631626ba7e91610cf5918591606501612ff4565b602060405180830381865afa158015610d10573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d349190613014565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14610d7957604051638baa579f60e01b815260040160405180910390fd5b610dc1565b5f610d8b82878787611cb3565b9050896001600160a01b0316816001600160a01b031614610dbf57604051638baa579f60e01b815260040160405180910390fd5b505b610dcc898989611750565b505050505050505050565b5f6001600160e01b031982167f8d3b64d700000000000000000000000000000000000000000000000000000000148061046f575061046f82611cd9565b5f61046f82611d73565b60605f610e2c83600261302f565b610e37906002613046565b67ffffffffffffffff811115610e4f57610e4f61285e565b6040519080825280601f01601f191660200182016040528015610e79576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000815f81518110610eaf57610eaf612f59565b60200101906001600160f81b03191690815f1a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610ef957610ef9612f59565b60200101906001600160f81b03191690815f1a9053505f610f1b84600261302f565b610f26906001613046565b90505b6001811115610faa577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610f6757610f67612f59565b1a60f81b828281518110610f7d57610f7d612f59565b60200101906001600160f81b03191690815f1a90535060049490941c93610fa381613059565b9050610f29565b508315610ff95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610444565b9392505050565b6060808267ffffffffffffffff81111561101c5761101c61285e565b604051908082528060200260200182016040528015611045578160200160208202803683370190505b5091508267ffffffffffffffff8111156110615761106161285e565b60405190808252806020026020018201604052801561108a578160200160208202803683370190505b5090505f5b83811015611122576110c38585838181106110ac576110ac612f59565b610ae4926060909102013681900381019150612f99565b8382815181106110d5576110d5612f59565b6020026020010181815250508484828181106110f3576110f3612f59565b9050606002016040013582828151811061110f5761110f612f59565b602090810291909101015260010161108f565b509250929050565b815183511461118c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b6001600160a01b0384166111f05760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610444565b336111ff818787878787611e44565b5f5b8451811015611323575f85828151811061121d5761121d612f59565b602002602001015190505f85838151811061123a5761123a612f59565b6020908102919091018101515f84815280835260408082206001600160a01b038e1683529093529190912054909150818110156112cc5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610444565b5f838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611308908490613046565b925050819055505050508061131c90612f81565b9050611201565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161137392919061306e565b60405180910390a4610641818787878787611e52565b5f306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156113e157507f000000000000000000000000000000000000000000000000000000000000000046145b1561140b57507f000000000000000000000000000000000000000000000000000000000000000090565b6105f1604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b90565b6001600160a01b0384166115315760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610444565b81518351146115935760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b336115a2815f87878787611e44565b5f5b8451811015611637578381815181106115bf576115bf612f59565b60200260200101515f808784815181106115db576115db612f59565b602002602001015181526020019081526020015f205f886001600160a01b03166001600160a01b031681526020019081526020015f205f82825461161f9190613046565b9091555081905061162f81612f81565b9150506115a4565b50846001600160a01b03165f6001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161168792919061306e565b60405180910390a46105e1815f87878787611e52565b5f6105f142611fff565b606060ff83146116c1576116ba836120e8565b905061046f565b8180546116cd90612e5f565b80601f01602080910402602001604051908101604052809291908181526020018280546116f990612e5f565b80156117445780601f1061171b57610100808354040283529160200191611744565b820191905f5260205f20905b81548152906001019060200180831161172757829003601f168201915b5050505050905061046f565b816001600160a01b0316836001600160a01b0316036117d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610444565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383166118bf5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610444565b80518251146119215760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610444565b5f33905061194181855f868660405180602001604052805f815250611e44565b5f5b8351811015611a56575f84828151811061195f5761195f612f59565b602002602001015190505f84838151811061197c5761197c612f59565b6020908102919091018101515f84815280835260408082206001600160a01b038c168352909352919091205490915081811015611a205760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610444565b5f928352602083815260408085206001600160a01b038b1686529091529092209103905580611a4e81612f81565b915050611943565b505f6001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611aa692919061306e565b60405180910390a460408051602081019091525f905250505050565b6001600160a01b038416611b265760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610444565b335f611b3185612125565b90505f611b3d85612125565b9050611b4d838989858589611e44565b5f868152602081815260408083206001600160a01b038c16845290915290205485811015611bd05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610444565b5f878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290611c0c908490613046565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610dcc848a8a8a8a8a61216e565b5f61046f611c78611389565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b5f805f611cc287878787612269565b91509150611ccf81612326565b5095945050505050565b5f6001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480611d3b57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061046f57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461046f565b5f600660ff831681020181600c82046107b20190506004600c8381611d9a57611d9a613092565b06901b915060048106158015611db257506064810615155b80611dbf57506101908106155b15611de85779016e014f0131011200f400d500b600980079005b003c001f000090911c90611e08565b79016d014e0130011100f300d400b500970078005a003b001f000090911c905b6201518061019061064019830104606461076c1984010460046107b0198501046107b2850361016d028661ffff16010103010292505050919050565b61064186868686868661248d565b6001600160a01b0384163b156106415760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611e9690899089908890889088906004016130a6565b6020604051808303815f875af1925050508015611ed0575060408051601f3d908101601f19168201909252611ecd91810190613014565b60015b611f8557611edc6130f7565b806308c379a003611f155750611ef061310f565b80611efb5750611f17565b8060405162461bcd60e51b81526004016104449190612750565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d4552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610444565b6001600160e01b0319811663bc197c8160e01b14611ff65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610444565b50505050505050565b5f806201518083049050806226496581015f62023ab1600483020590506004600362023ab183020105909103905f62164b09610fa0600185010205905060046105b58202058303601f0192505f61098f846050028161206057612060613092565b059050600b8105935083600c0281600201039050838260318503606402010191505f60066001836107b28603600c0201038161209e5761209e613092565b04905060ff8111156120dc576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b60605f6120f483612610565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b6040805160018082528183019092526060915f91906020808301908036833701905050905082815f8151811061215d5761215d612f59565b602090810291909101015292915050565b6001600160a01b0384163b156106415760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121b29089908990889088908890600401613198565b6020604051808303815f875af19250505080156121ec575060408051601f3d908101601f191682019092526121e991810190613014565b60015b6121f857611edc6130f7565b6001600160e01b0319811663f23a6e6160e01b14611ff65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610444565b5f807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561229e57505f9050600361231d565b604080515f8082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156122ef573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116612317575f6001925092505061231d565b91505f90505b94509492505050565b5f816004811115612339576123396131da565b036123415750565b6001816004811115612355576123556131da565b036123a25760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610444565b60028160048111156123b6576123b66131da565b036124035760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610444565b6003816004811115612417576124176131da565b0361248a5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610444565b50565b6001600160a01b038516612510575f5b835181101561250e578281815181106124b8576124b8612f59565b602002602001015160065f8684815181106124d5576124d5612f59565b602002602001015181526020019081526020015f205f8282546124f89190613046565b90915550612507905081612f81565b905061249d565b505b6001600160a01b038416610641575f5b8351811015611ff6575f84828151811061253c5761253c612f59565b602002602001015190505f84838151811061255957612559612f59565b602002602001015190505f60065f8481526020019081526020015f20549050818110156125ee5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a206275726e20616d6f756e74206578636565647320746f7460448201527f616c537570706c790000000000000000000000000000000000000000000000006064820152608401610444565b5f928352600660205260409092209103905561260981612f81565b9050612520565b5f60ff8216601f81111561046f576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80356001600160a01b0381168114612666575f80fd5b919050565b5f806040838503121561267c575f80fd5b61268583612650565b946020939093013593505050565b6001600160e01b03198116811461248a575f80fd5b5f602082840312156126b8575f80fd5b8135610ff981612693565b60ff8116811461248a575f80fd5b5f602082840312156126e1575f80fd5b8135610ff9816126c3565b5f602082840312156126fc575f80fd5b5035919050565b5f5b8381101561271d578181015183820152602001612705565b50505f910152565b5f815180845261273c816020860160208601612703565b601f01601f19169290920160200192915050565b602081525f610ff96020830184612725565b5f8083601f840112612772575f80fd5b50813567ffffffffffffffff811115612789575f80fd5b6020830191508360206060830285010111156127a3575f80fd5b9250929050565b5f805f805f80608087890312156127bf575f80fd5b6127c887612650565b95506127d660208801612650565b9450604087013567ffffffffffffffff808211156127f2575f80fd5b6127fe8a838b01612762565b90965094506060890135915080821115612816575f80fd5b818901915089601f830112612829575f80fd5b813581811115612837575f80fd5b8a6020828501011115612848575f80fd5b6020830194508093505050509295509295509295565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff811182821017156128985761289861285e565b6040525050565b5f67ffffffffffffffff8211156128b8576128b861285e565b5060051b60200190565b5f82601f8301126128d1575f80fd5b813560206128de8261289f565b6040516128eb8282612872565b83815260059390931b850182019282810191508684111561290a575f80fd5b8286015b84811015612925578035835291830191830161290e565b509695505050505050565b5f82601f83011261293f575f80fd5b813567ffffffffffffffff8111156129595761295961285e565b604051612970601f8301601f191660200182612872565b818152846020838601011115612984575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a086880312156129b4575f80fd5b6129bd86612650565b94506129cb60208701612650565b9350604086013567ffffffffffffffff808211156129e7575f80fd5b6129f389838a016128c2565b94506060880135915080821115612a08575f80fd5b612a1489838a016128c2565b93506080880135915080821115612a29575f80fd5b50612a3688828901612930565b9150509295509295909350565b5f805f8060608587031215612a56575f80fd5b612a5f85612650565b9350602085013567ffffffffffffffff80821115612a7b575f80fd5b612a8788838901612762565b90955093506040870135915080821115612a9f575f80fd5b50612aac87828801612930565b91505092959194509250565b5f8060408385031215612ac9575f80fd5b823567ffffffffffffffff80821115612ae0575f80fd5b818501915085601f830112612af3575f80fd5b81356020612b008261289f565b604051612b0d8282612872565b83815260059390931b8501820192828101915089841115612b2c575f80fd5b948201945b83861015612b5157612b4286612650565b82529482019490820190612b31565b96505086013592505080821115612b66575f80fd5b50612b73858286016128c2565b9150509250929050565b5f8151808452602080850194508084015f5b83811015612bab57815187529582019590820190600101612b8f565b509495945050505050565b602081525f610ff96020830184612b7d565b5f60208284031215612bd8575f80fd5b610ff982612650565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f612c1b60e0830189612725565b8281036040840152612c2d8189612725565b90508660608401526001600160a01b03861660808401528460a084015282810360c0840152612c5c8185612b7d565b9a9950505050505050505050565b80358015158114612666575f80fd5b5f8060408385031215612c8a575f80fd5b612c9383612650565b9150612ca160208401612c6a565b90509250929050565b5f805f60408486031215612cbc575f80fd5b612cc584612650565b9250602084013567ffffffffffffffff811115612ce0575f80fd5b612cec86828701612762565b9497909650939450505050565b5f8060408385031215612d0a575f80fd5b612d1383612650565b9150612ca160208401612650565b5f805f805f60a08688031215612d35575f80fd5b612d3e86612650565b9450612d4c60208701612650565b93506040860135925060608601359150608086013567ffffffffffffffff811115612d75575f80fd5b612a3688828901612930565b5f8060208385031215612d92575f80fd5b823567ffffffffffffffff80821115612da9575f80fd5b818501915085601f830112612dbc575f80fd5b813581811115612dca575f80fd5b8660208260061b8501011115612dde575f80fd5b60209290920196919550909350505050565b5f805f805f805f60e0888a031215612e06575f80fd5b612e0f88612650565b9650612e1d60208901612650565b9550612e2b60408901612c6a565b9450606088013593506080880135612e42816126c3565b9699959850939692959460a0840135945060c09093013592915050565b600181811c90821680612e7357607f821691505b602082108103612e9157634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8151612ea8818560208601612703565b9290920192915050565b5f80845481600182811c915080831680612ecd57607f831692505b60208084108203612eec57634e487b7160e01b86526022600452602486fd5b818015612f005760018114612f1557612f40565b60ff1986168952841515850289019650612f40565b5f8b8152602090205f5b86811015612f385781548b820152908501908301612f1f565b505084890196505b505050505050612f508185612e97565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f60018201612f9257612f92612f6d565b5060010190565b5f60408284031215612fa9575f80fd5b6040516040810181811067ffffffffffffffff82111715612fcc57612fcc61285e565b604052612fd883612650565b81526020830135612fe8816126c3565b60208201529392505050565b828152604060208201525f61300c6040830184612725565b949350505050565b5f60208284031215613024575f80fd5b8151610ff981612693565b808202811582820484141761046f5761046f612f6d565b8082018082111561046f5761046f612f6d565b5f8161306757613067612f6d565b505f190190565b604081525f6130806040830185612b7d565b8281036020840152612f508185612b7d565b634e487b7160e01b5f52601260045260245ffd5b5f6001600160a01b03808816835280871660208401525060a060408301526130d160a0830186612b7d565b82810360608401526130e38186612b7d565b905082810360808401526120dc8185612725565b5f60033d11156114b25760045f803e505f5160e01c90565b5f60443d101561311c5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561314c57505050505090565b82850191508151818111156131645750505050505090565b843d870101602082850101111561317e5750505050505090565b61318d60208286010187612872565b509095945050505050565b5f6001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526131cf60a0830184612725565b979650505050505050565b634e487b7160e01b5f52602160045260245ffdfea26469706673582212208123b2c3f4e38302ce8dcfe71a10bc239215d6764aaa56f8c7f22a9a3a36d13a64736f6c63430008140033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 177,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 183,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 185,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5536,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5538,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 19372,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1547,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10477,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "isMinter",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10480,
        "contract": "contracts/CouponManager.sol:CouponManager",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}