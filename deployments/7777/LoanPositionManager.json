{
  "address": "0xE0dBCB42CCAc63C949cE3EF879A647DDb662916d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "couponManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetPool_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minDebtValueInEth_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPair",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPositionEpoch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidationThreshold",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        }
      ],
      "name": "LockedBy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermitExpired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnableToLiquidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnmatchedPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnpaidDebt",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "LiquidatePosition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "liquidationThreshold",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "liquidationFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "liquidationProtocolFee",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "liquidationTargetLtv",
          "type": "uint32"
        }
      ],
      "name": "SetLoanConfiguration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "Epoch",
          "name": "unlockedAt",
          "type": "uint8"
        }
      ],
      "name": "UpdatePosition",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "Epoch",
          "name": "expiredWith",
          "type": "uint8"
        }
      ],
      "name": "adjustPosition",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "couponsToBurn",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "couponsToMint",
          "type": "tuple[]"
        },
        {
          "internalType": "int256",
          "name": "collateralDelta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "debtDelta",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "locker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "assetDelta",
      "outputs": [
        {
          "internalType": "int256",
          "name": "delta",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "coupons",
          "type": "tuple[]"
        }
      ],
      "name": "burnCoupons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint8"
            }
          ],
          "internalType": "struct CouponKey[]",
          "name": "couponKeys",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "claimOwedCoupons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        }
      ],
      "name": "getLoanConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "collateralDecimal",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "debtDecimal",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "liquidationThreshold",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "liquidationFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "liquidationProtocolFee",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "liquidationTargetLtv",
              "type": "uint32"
            }
          ],
          "internalType": "struct ILoanPositionManagerTypes.LoanConfiguration",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "couponId",
          "type": "uint256"
        }
      ],
      "name": "getOwedCouponAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "Epoch",
              "name": "expiredWith",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSettled",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "debtToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LoanPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        }
      ],
      "name": "isPairRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRepayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFeeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockData",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDebtValueInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "asset",
                  "type": "address"
                },
                {
                  "internalType": "Epoch",
                  "name": "epoch",
                  "type": "uint8"
                }
              ],
              "internalType": "struct CouponKey",
              "name": "key",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Coupon[]",
          "name": "coupons",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mintCoupons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debt",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "liquidationThreshold",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "liquidationFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "liquidationProtocolFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "liquidationTargetLtv",
          "type": "uint32"
        }
      ],
      "name": "setLoanConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "settlePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b94c8efaee4b76e1c66f528da0b00156640e80bc485ade706d07605ece38e4d",
  "receipt": {
    "to": null,
    "from": "0xa0E3174f4D222C5CBf705A138C6a9369935EeD81",
    "contractAddress": "0xE0dBCB42CCAc63C949cE3EF879A647DDb662916d",
    "transactionIndex": 0,
    "gasUsed": "5484416",
    "logsBloom": "0x
    "blockHash": "0xe4646c819b8cba28dc42a3436c3bbe28ad109c698a8912658a39c049a712a311",
    "transactionHash": "0x8b94c8efaee4b76e1c66f528da0b00156640e80bc485ade706d07605ece38e4d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 121839744,
        "transactionHash": "0x8b94c8efaee4b76e1c66f528da0b00156640e80bc485ade706d07605ece38e4d",
        "address": "0xE0dBCB42CCAc63C949cE3EF879A647DDb662916d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a0e3174f4d222c5cbf705a138c6a9369935eed81"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe4646c819b8cba28dc42a3436c3bbe28ad109c698a8912658a39c049a712a311"
      }
    ],
    "blockNumber": 121839744,
    "cumulativeGasUsed": "5484416",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x929075bdc8cf2e43cA7FB4BF1a189130b6014Cc1",
    "0x92bb5C37868C5B34B163FeFAb4e20b1179853eB9",
    "0x8831c769874fF23ED5DF0daacfD84Cc147335506",
    "0x000000000000000000000000000000000000dEaD",
    "1000000000000000",
    "LOAN_BASE_URI"
  ],
  "numDeployments": 1,
  "solcInputHash": "7479731586e5356f66333c5929b137f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"couponManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDebtValueInEth_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPair\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPositionEpoch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidationThreshold\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockedBy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnableToLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnmatchedPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnpaidDebt\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"}],\"name\":\"LiquidatePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidationThreshold\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidationFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidationProtocolFee\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"liquidationTargetLtv\",\"type\":\"uint32\"}],\"name\":\"SetLoanConfiguration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Epoch\",\"name\":\"unlockedAt\",\"type\":\"uint8\"}],\"name\":\"UpdatePosition\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint8\"}],\"name\":\"adjustPosition\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"couponsToBurn\",\"type\":\"tuple[]\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"couponsToMint\",\"type\":\"tuple[]\"},{\"internalType\":\"int256\",\"name\":\"collateralDelta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"debtDelta\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"assetDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"delta\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"}],\"name\":\"burnCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey[]\",\"name\":\"couponKeys\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claimOwedCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRepayAmount\",\"type\":\"uint256\"}],\"name\":\"getLiquidationStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"}],\"name\":\"getLoanConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"collateralDecimal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"debtDecimal\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationProtocolFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationTargetLtv\",\"type\":\"uint32\"}],\"internalType\":\"struct ILoanPositionManagerTypes.LoanConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"couponId\",\"type\":\"uint256\"}],\"name\":\"getOwedCouponAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"Epoch\",\"name\":\"expiredWith\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"}],\"name\":\"isPairRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRepayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebtValueInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint8\"}],\"internalType\":\"struct CouponKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Coupon[]\",\"name\":\"coupons\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintCoupons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debt\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"liquidationThreshold\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationProtocolFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"liquidationTargetLtv\",\"type\":\"uint32\"}],\"name\":\"setLoanConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"settlePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoanPositionManager.sol\":\"LoanPositionManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(    _domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa5936b488143a6ec4f64481275681ef59cccc46bcaac2ebabd0766b7c62606b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LoanPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {IAssetPool} from \\\"./interfaces/IAssetPool.sol\\\";\\nimport {ICouponOracle} from \\\"./interfaces/ICouponOracle.sol\\\";\\nimport {ICouponManager} from \\\"./interfaces/ICouponManager.sol\\\";\\nimport {IPositionManager} from \\\"./interfaces/IPositionManager.sol\\\";\\nimport {ILoanPositionManager} from \\\"./interfaces/ILoanPositionManager.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./libraries/CouponKey.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./libraries/Coupon.sol\\\";\\nimport {Epoch, EpochLibrary} from \\\"./libraries/Epoch.sol\\\";\\nimport {LoanPosition, LoanPositionLibrary} from \\\"./libraries/LoanPosition.sol\\\";\\nimport {PositionManager} from \\\"./libraries/PositionManager.sol\\\";\\n\\ncontract LoanPositionManager is ILoanPositionManager, PositionManager, Ownable {\\n    using LoanPositionLibrary for LoanPosition;\\n    using CouponKeyLibrary for CouponKey;\\n    using CouponLibrary for Coupon;\\n    using EpochLibrary for Epoch;\\n\\n    uint256 private constant _RATE_PRECISION = 10 ** 6;\\n\\n    address public immutable override oracle;\\n    address public immutable override treasury;\\n    uint256 public immutable override minDebtValueInEth;\\n\\n    mapping(address user => mapping(uint256 couponId => uint256)) private _couponOwed;\\n    mapping(bytes32 => LoanConfiguration) private _loanConfiguration;\\n    mapping(uint256 id => LoanPosition) private _positionMap;\\n\\n    constructor(\\n        address couponManager_,\\n        address assetPool_,\\n        address oracle_,\\n        address treasury_,\\n        uint256 minDebtValueInEth_,\\n        string memory baseURI_\\n    ) PositionManager(couponManager_, assetPool_, baseURI_, \\\"Loan Position\\\", \\\"LP\\\") {\\n        oracle = oracle_;\\n        treasury = treasury_;\\n        minDebtValueInEth = minDebtValueInEth_;\\n    }\\n\\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory) {\\n        return _positionMap[positionId];\\n    }\\n\\n    function isPairRegistered(address collateral, address debt) external view returns (bool) {\\n        return !_isPairUnregistered(collateral, debt);\\n    }\\n\\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256) {\\n        return _couponOwed[user][couponId];\\n    }\\n\\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory) {\\n        return _loanConfiguration[_buildLoanPairId(collateral, debt)];\\n    }\\n\\n    function mint(address collateralToken, address debtToken) external onlyByLocker returns (uint256 positionId) {\\n        if (_isPairUnregistered(collateralToken, debtToken)) revert InvalidPair();\\n\\n        unchecked {\\n            positionId = nextId++;\\n        }\\n        _positionMap[positionId].collateralToken = collateralToken;\\n        _positionMap[positionId].debtToken = debtToken;\\n\\n        _mint(msg.sender, positionId);\\n    }\\n\\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\\n        external\\n        onlyByLocker\\n        modifyPosition(positionId)\\n        returns (Coupon[] memory couponsToBurn, Coupon[] memory couponsToMint, int256 collateralDelta, int256 debtDelta)\\n    {\\n        if (!_isApprovedOrOwner(msg.sender, positionId)) revert InvalidAccess();\\n\\n        Epoch lastExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        LoanPosition memory oldPosition = _positionMap[positionId];\\n        _positionMap[positionId].collateralAmount = collateralAmount;\\n\\n        if (Epoch.wrap(0) < oldPosition.expiredWith && oldPosition.expiredWith <= lastExpiredEpoch) {\\n            // Only unexpired position can adjust debtAmount\\n            if (oldPosition.debtAmount != debtAmount) revert AlreadyExpired();\\n        } else {\\n            if (oldPosition.expiredWith == Epoch.wrap(0)) oldPosition.expiredWith = lastExpiredEpoch;\\n            _positionMap[positionId].debtAmount = debtAmount;\\n            _positionMap[positionId].expiredWith = debtAmount == 0 ? lastExpiredEpoch : expiredWith;\\n\\n            (couponsToBurn, couponsToMint) = oldPosition.calculateCouponRequirement(_positionMap[positionId]);\\n        }\\n\\n        unchecked {\\n            for (uint256 i = 0; i < couponsToMint.length; ++i) {\\n                _accountDelta(couponsToMint[i].id(), 0, couponsToMint[i].amount);\\n            }\\n            for (uint256 i = 0; i < couponsToBurn.length; ++i) {\\n                _accountDelta(couponsToBurn[i].id(), couponsToBurn[i].amount, 0);\\n            }\\n            collateralDelta = _accountDelta(\\n                uint256(uint160(oldPosition.collateralToken)), collateralAmount, oldPosition.collateralAmount\\n            );\\n            debtDelta = -_accountDelta(uint256(uint160(oldPosition.debtToken)), oldPosition.debtAmount, debtAmount);\\n        }\\n    }\\n\\n    function settlePosition(uint256 positionId) public override(IPositionManager, PositionManager) onlyByLocker {\\n        super.settlePosition(positionId);\\n        LoanPosition memory position = _positionMap[positionId];\\n\\n        if (position.debtAmount > 0 && position.expiredWith <= EpochLibrary.lastExpiredEpoch()) revert UnpaidDebt();\\n\\n        LoanConfiguration memory loanConfig =\\n            _loanConfiguration[_buildLoanPairId(position.collateralToken, position.debtToken)];\\n        (\\n            uint256 collateralPriceWithPrecisionComplement,\\n            uint256 debtPriceWithPrecisionComplement,\\n            uint256 minDebtAmount\\n        ) = _calculatePricesAndMinDebtAmount(position.collateralToken, position.debtToken, loanConfig);\\n\\n        if (position.debtAmount > 0 && minDebtAmount > position.debtAmount) revert TooSmallDebt();\\n        if (\\n            (position.collateralAmount * collateralPriceWithPrecisionComplement) * loanConfig.liquidationThreshold\\n                < position.debtAmount * debtPriceWithPrecisionComplement * _RATE_PRECISION\\n        ) revert LiquidationThreshold();\\n\\n        if (position.debtAmount == 0 && position.collateralAmount == 0) _burn(positionId);\\n\\n        emit UpdatePosition(positionId, position.collateralAmount, position.debtAmount, position.expiredWith);\\n    }\\n\\n    function _buildLoanPairId(address collateral, address debt) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(collateral, debt));\\n    }\\n\\n    function _calculatePricesAndMinDebtAmount(address collateral, address debt, LoanConfiguration memory loanConfig)\\n        private\\n        view\\n        returns (\\n            uint256 collateralPriceWithPrecisionComplement,\\n            uint256 debtPriceWithPrecisionComplement,\\n            uint256 minDebtAmount\\n        )\\n    {\\n        unchecked {\\n            uint256 collateralDecimal = loanConfig.collateralDecimal;\\n            uint256 debtDecimal = loanConfig.debtDecimal;\\n\\n            address[] memory assets = new address[](3);\\n            assets[0] = collateral;\\n            assets[1] = debt;\\n            assets[2] = address(0);\\n\\n            uint256[] memory prices = ICouponOracle(oracle).getAssetsPrices(assets);\\n            // @dev `decimal` is always less than or equal to 18\\n            minDebtAmount = (minDebtValueInEth * prices[2]) / 10 ** (18 - debtDecimal) / prices[1];\\n            if (debtDecimal > collateralDecimal) {\\n                collateralPriceWithPrecisionComplement = prices[0] * 10 ** (debtDecimal - collateralDecimal);\\n                debtPriceWithPrecisionComplement = prices[1];\\n            } else {\\n                collateralPriceWithPrecisionComplement = prices[0];\\n                debtPriceWithPrecisionComplement = prices[1] * 10 ** (collateralDecimal - debtDecimal);\\n            }\\n        }\\n    }\\n\\n    function _getLiquidationAmount(LoanPosition memory position, uint256 maxRepayAmount)\\n        private\\n        view\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount)\\n    {\\n        unchecked {\\n            LoanConfiguration memory loanConfig =\\n                _loanConfiguration[_buildLoanPairId(position.collateralToken, position.debtToken)];\\n            (\\n                uint256 collateralPriceWithPrecisionComplement,\\n                uint256 debtPriceWithPrecisionComplement,\\n                uint256 minDebtAmount\\n            ) = _calculatePricesAndMinDebtAmount(position.collateralToken, position.debtToken, loanConfig);\\n\\n            if (position.expiredWith.endTime() <= block.timestamp) {\\n                if (maxRepayAmount >= position.debtAmount) {\\n                    repayAmount = position.debtAmount;\\n                } else if (maxRepayAmount + minDebtAmount > position.debtAmount) {\\n                    if (position.debtAmount < minDebtAmount) revert TooSmallDebt();\\n                    repayAmount = position.debtAmount - minDebtAmount;\\n                } else {\\n                    repayAmount = maxRepayAmount;\\n                }\\n\\n                liquidationAmount = Math.ceilDiv(\\n                    repayAmount * debtPriceWithPrecisionComplement * _RATE_PRECISION,\\n                    collateralPriceWithPrecisionComplement * (_RATE_PRECISION - loanConfig.liquidationFee)\\n                );\\n            } else {\\n                // Every 10^26 of collateralValue >= 1 USD, so it can't overflow.\\n                uint256 collateralValue = position.collateralAmount * collateralPriceWithPrecisionComplement;\\n                // Every 10^32 of debtValueMulRatePrecision >= 1 USD, so it can't overflow.\\n                uint256 debtValueMulRatePrecision =\\n                    position.debtAmount * debtPriceWithPrecisionComplement * _RATE_PRECISION;\\n\\n                if (collateralValue * loanConfig.liquidationThreshold >= debtValueMulRatePrecision) return (0, 0, 0);\\n\\n                liquidationAmount = Math.ceilDiv(\\n                    debtValueMulRatePrecision - collateralValue * loanConfig.liquidationTargetLtv,\\n                    collateralPriceWithPrecisionComplement\\n                        * (_RATE_PRECISION - loanConfig.liquidationFee - loanConfig.liquidationTargetLtv)\\n                );\\n                repayAmount = (\\n                    liquidationAmount * collateralPriceWithPrecisionComplement\\n                        * (_RATE_PRECISION - loanConfig.liquidationFee)\\n                ) / debtPriceWithPrecisionComplement / _RATE_PRECISION;\\n\\n                // reuse newRepayAmount\\n                uint256 newRepayAmount = position.debtAmount;\\n\\n                if (newRepayAmount <= minDebtAmount) {\\n                    if (maxRepayAmount < newRepayAmount) revert TooSmallDebt();\\n                } else if (repayAmount > newRepayAmount || newRepayAmount < minDebtAmount + repayAmount) {\\n                    if (maxRepayAmount < newRepayAmount) {\\n                        newRepayAmount = Math.min(maxRepayAmount, newRepayAmount - minDebtAmount);\\n                    }\\n                } else {\\n                    newRepayAmount = Math.min(maxRepayAmount, repayAmount);\\n                }\\n\\n                if (newRepayAmount != repayAmount) {\\n                    liquidationAmount = Math.ceilDiv(\\n                        newRepayAmount * debtPriceWithPrecisionComplement * _RATE_PRECISION,\\n                        collateralPriceWithPrecisionComplement * (_RATE_PRECISION - loanConfig.liquidationFee)\\n                    );\\n                    repayAmount = newRepayAmount;\\n                }\\n\\n                if (liquidationAmount > position.collateralAmount) liquidationAmount = position.collateralAmount;\\n            }\\n            protocolFeeAmount = (liquidationAmount * loanConfig.liquidationProtocolFee) / _RATE_PRECISION;\\n        }\\n    }\\n\\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return _getLiquidationAmount(_positionMap[positionId], maxRepayAmount > 0 ? maxRepayAmount : type(uint256).max);\\n    }\\n\\n    // @dev We don't have to check the settlement of the position\\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        onlyByLocker\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount)\\n    {\\n        if (!_isSettled(positionId)) revert NotSettled();\\n        unchecked {\\n            LoanPosition memory position = _positionMap[positionId];\\n            (liquidationAmount, repayAmount, protocolFeeAmount) =\\n                _getLiquidationAmount(position, maxRepayAmount > 0 ? maxRepayAmount : type(uint256).max);\\n\\n            if (liquidationAmount == 0 && repayAmount == 0) revert UnableToLiquidate();\\n\\n            Epoch currentEpoch = EpochLibrary.current();\\n            uint256 epochLength = position.expiredWith >= currentEpoch ? position.expiredWith.sub(currentEpoch) + 1 : 0;\\n\\n            position.collateralAmount -= liquidationAmount;\\n            position.debtAmount -= repayAmount;\\n            if (position.debtAmount == 0) {\\n                position.expiredWith = currentEpoch.sub(1);\\n                _positionMap[positionId].expiredWith = position.expiredWith;\\n            }\\n            _positionMap[positionId].collateralAmount = position.collateralAmount;\\n            _positionMap[positionId].debtAmount = position.debtAmount;\\n\\n            _accountDelta(uint256(uint160(position.collateralToken)), protocolFeeAmount, liquidationAmount);\\n            IAssetPool(assetPool).withdraw(position.collateralToken, protocolFeeAmount, treasury);\\n            _accountDelta(uint256(uint160(position.debtToken)), repayAmount, 0);\\n\\n            if (epochLength > 0) {\\n                address couponOwner = ownerOf(positionId);\\n                Coupon[] memory coupons = new Coupon[](epochLength);\\n                for (uint256 i = 0; i < epochLength; ++i) {\\n                    coupons[i] = CouponLibrary.from(position.debtToken, currentEpoch.add(uint8(i)), repayAmount);\\n                }\\n                try ICouponManager(_couponManager).mintBatch(couponOwner, coupons, \\\"\\\") {}\\n                catch {\\n                    for (uint256 i = 0; i < epochLength; ++i) {\\n                        _couponOwed[couponOwner][coupons[i].id()] += coupons[i].amount;\\n                    }\\n                }\\n            }\\n\\n            emit LiquidatePosition(positionId, msg.sender, liquidationAmount, repayAmount, protocolFeeAmount);\\n            emit UpdatePosition(positionId, position.collateralAmount, position.debtAmount, position.expiredWith);\\n        }\\n    }\\n\\n    function claimOwedCoupons(CouponKey[] calldata couponKeys, bytes calldata data) external {\\n        unchecked {\\n            Coupon[] memory coupons = new Coupon[](couponKeys.length);\\n            for (uint256 i = 0; i < couponKeys.length; ++i) {\\n                uint256 id = couponKeys[i].toId();\\n                coupons[i] = Coupon(couponKeys[i], _couponOwed[msg.sender][id]);\\n                _couponOwed[msg.sender][id] = 0;\\n            }\\n            ICouponManager(_couponManager).mintBatch(msg.sender, coupons, data);\\n        }\\n    }\\n\\n    function setLoanConfiguration(\\n        address collateral,\\n        address debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv\\n    ) external onlyOwner {\\n        bytes32 pairId = _buildLoanPairId(collateral, debt);\\n        if (_loanConfiguration[pairId].liquidationThreshold > 0) revert InvalidPair();\\n        _loanConfiguration[pairId] = LoanConfiguration({\\n            collateralDecimal: IERC20Metadata(collateral).decimals(),\\n            debtDecimal: IERC20Metadata(debt).decimals(),\\n            liquidationThreshold: liquidationThreshold,\\n            liquidationFee: liquidationFee,\\n            liquidationProtocolFee: liquidationProtocolFee,\\n            liquidationTargetLtv: liquidationTargetLtv\\n        });\\n        emit SetLoanConfiguration(\\n            collateral, debt, liquidationThreshold, liquidationFee, liquidationProtocolFee, liquidationTargetLtv\\n        );\\n    }\\n\\n    function nonces(uint256 positionId) external view returns (uint256) {\\n        return _positionMap[positionId].nonce;\\n    }\\n\\n    function _getAndIncrementNonce(uint256 positionId) internal override returns (uint256) {\\n        return _positionMap[positionId].getAndIncrementNonce();\\n    }\\n\\n    function _isPairUnregistered(address collateral, address debt) internal view returns (bool) {\\n        return _loanConfiguration[_buildLoanPairId(collateral, debt)].liquidationThreshold == 0;\\n    }\\n\\n    function _isSettled(uint256 positionId) internal view override returns (bool) {\\n        return _positionMap[positionId].isSettled;\\n    }\\n\\n    function _setPositionSettlement(uint256 positionId, bool settled) internal override {\\n        _positionMap[positionId].isSettled = settled;\\n    }\\n}\\n\",\"keccak256\":\"0x96f6bd22d305579f45f77fe835f4b1937102e39eb484de53c518d0d61dde85f1\",\"license\":\"-\"},\"contracts/interfaces/IAssetPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAssetPool {\\n    error InvalidAccess();\\n\\n    function isOperator(address operator) external view returns (bool);\\n\\n    function withdraw(address asset, uint256 amount, address recipient) external;\\n}\\n\",\"keccak256\":\"0xbc1db5280935b3901b16eb14aa9a705e2e19cd9abbe1892f4beba1118bbada8d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0x4f1a615779112533d819659b1716dd32025146ed23e089b68fdfa4f49eb49227\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICouponOracle {\\n    error LengthMismatch();\\n    error InvalidDecimals();\\n    error AssetFeedAlreadySet();\\n\\n    function decimals() external view returns (uint8);\\n\\n    function fallbackOracle() external view returns (address);\\n\\n    function getFeed(address asset) external view returns (address);\\n\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n    function setFallbackOracle(address newFallbackOracle) external;\\n\\n    function setFeeds(address[] memory assets, address[] memory feeds) external;\\n}\\n\",\"keccak256\":\"0x84581bf999fb333b99ccbdf2715955c0f36d9fc203acbc0bba95ede62ea850e7\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        payable;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x063c6f88fc770fe7b3bbf9a3031110be4572e6428a048dda76065c8ea6213f6e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILoanPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {LoanPosition} from \\\"../libraries/LoanPosition.sol\\\";\\n\\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\\n    // liquidationFee = liquidator fee + protocol fee\\n    // debt = collateral * (1 - liquidationFee)\\n    struct LoanConfiguration {\\n        uint32 collateralDecimal;\\n        uint32 debtDecimal;\\n        uint32 liquidationThreshold;\\n        uint32 liquidationFee;\\n        uint32 liquidationProtocolFee;\\n        uint32 liquidationTargetLtv;\\n    }\\n\\n    event SetLoanConfiguration(\\n        address indexed collateral,\\n        address indexed debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv\\n    );\\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\\n    event LiquidatePosition(\\n        uint256 indexed positionId,\\n        address indexed liquidator,\\n        uint256 liquidationAmount,\\n        uint256 repayAmount,\\n        uint256 protocolFeeAmount\\n    );\\n\\n    error AlreadyExpired();\\n    error TooSmallDebt();\\n    error InvalidAccess();\\n    error UnpaidDebt();\\n    error LiquidationThreshold();\\n    error InvalidPair();\\n    error UnableToLiquidate();\\n}\\n\\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\\n    function treasury() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function minDebtValueInEth() external view returns (uint256);\\n\\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\\n\\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\\n\\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\\n\\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\\n\\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        view\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\\n        external\\n        returns (\\n            Coupon[] memory couponsToPay,\\n            Coupon[] memory couponsToRefund,\\n            int256 collateralDelta,\\n            int256 debtDelta\\n        );\\n\\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\\n\\n    function setLoanConfiguration(\\n        address collateral,\\n        address debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa0f827506b8d897b473373f856abf286ba307d2603d3fe40d2fddb643ced0b3e\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xfbf448734f8ee6ba1c90c1ecd8502e43c8bd2a2e86b44cca3f3a6036ea88ecdf\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xec4704e8fb701f1d7f179e5eff740b921875a9f9214af33afd3733ff9ab92738\",\"license\":\"-\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint8 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72e7246a8334b730c3c4e6460b3323bcd26d4c177aaa6270318101bd44952f36\",\"license\":\"-\"},\"contracts/libraries/ERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712} from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\n\\nabstract contract ERC721Permit is ERC721, IERC721Permit, EIP712 {\\n    // keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH =\\n        0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n\\n    constructor(string memory name_, string memory symbol_, string memory version_)\\n        ERC721(name_, symbol_)\\n        EIP712(name_, version_)\\n    {}\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external\\n        payable\\n        override\\n    {\\n        if (block.timestamp > deadline) revert PermitExpired();\\n\\n        bytes32 digest = _hashTypedDataV4(\\n            keccak256(abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline))\\n        );\\n\\n        address owner = ownerOf(tokenId);\\n        if (spender == owner) revert InvalidSignature();\\n\\n        if (Address.isContract(owner)) {\\n            if (IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) != 0x1626ba7e) {\\n                revert InvalidSignature();\\n            }\\n        } else {\\n            if (ECDSA.recover(digest, v, r, s) != owner) revert InvalidSignature();\\n        }\\n\\n        _approve(spender, tokenId);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721Permit).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _getAndIncrementNonce(uint256 tokenId) internal virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x326fd9d161d3ab428554cdf85f2877bb937c674531eee7872ca85b86db97fa1b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\ntype Epoch is uint8;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 6;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint8 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1);\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint8 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint8 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint8) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint8) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint8).max) revert EpochOverflow();\\n            return uint8(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint8 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ef36b688fba61b9c50ea3b03d39e86a7fac107cea03e16b824f59d1717690f8\",\"license\":\"-\"},\"contracts/libraries/LoanPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct LoanPosition {\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    address collateralToken;\\n    address debtToken;\\n    uint256 collateralAmount;\\n    uint256 debtAmount;\\n}\\n\\nlibrary LoanPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory, Coupon[] memory)\\n    {\\n        if (\\n            !(\\n                oldPosition.collateralToken == newPosition.collateralToken\\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\\n            )\\n        ) revert UnmatchedPosition();\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n\\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(burnCouponsLength, mintCouponsLength);\\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\\n                mintCouponsLength -= minCount;\\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\\n                burnCouponsLength -= minCount;\\n            } else {\\n                burnCouponsLength -= minCount;\\n                mintCouponsLength -= minCount;\\n            }\\n        }\\n\\n        Coupon[] memory burnCoupons = new Coupon[](burnCouponsLength);\\n        Coupon[] memory mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCouponsLength = 0;\\n        mintCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\\n                if (newAmount > oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n        return (burnCoupons, mintCoupons);\\n    }\\n}\\n\",\"keccak256\":\"0xebdb1cf746a6bbad1e6af6ad516c8e8213d6483a8f9e1fcc2b1eadaded6affc9\",\"license\":\"-\"},\"contracts/libraries/LockData.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.19;\\n\\n/// @author Coupon Finance\\n/// @author Modified from Uniswap V4 (https://github.com/Uniswap/v4-core/tree/98680ebc1a654120e995d53a5b10ec6fe153066f)\\n/// @notice Contains data about pool lockers.\\nstruct LockData {\\n    /// @notice The current number of active lockers\\n    uint128 length;\\n    /// @notice The total number of nonzero deltas over all active + completed lockers\\n    uint128 nonzeroDeltaCount;\\n}\\n\\n/// @dev This library manages a custom storage implementation for a queue\\n///      that tracks current lockers. The \\\"sentinel\\\" storage slot for this data structure,\\n///      always passed in as IPoolManager.LockData storage self, stores not just the current\\n///      length of the queue but also the global count of non-zero deltas across all lockers.\\n///      The values of the data structure start at OFFSET, and each value is a locker address.\\nlibrary LockDataLibrary {\\n    uint256 private constant OFFSET = uint256(keccak256(\\\"LockData\\\"));\\n\\n    /// @dev Pushes a locker onto the end of the queue, and updates the sentinel storage slot.\\n    function push(LockData storage self, address locker) internal {\\n        // read current value from the sentinel storage slot\\n        uint128 length = self.length;\\n        unchecked {\\n            uint256 indexToWrite = OFFSET + length; // not in assembly because OFFSET is in the library scope\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // in the next storage slot, write the locker\\n                sstore(indexToWrite, locker)\\n            }\\n            // update the sentinel storage slot\\n            self.length = length + 1;\\n        }\\n    }\\n\\n    /// @dev Pops a locker off the end of the queue. Note that no storage gets cleared.\\n    function pop(LockData storage self) internal {\\n        unchecked {\\n            self.length--;\\n        }\\n    }\\n\\n    function getLock(uint256 i) internal view returns (address locker) {\\n        unchecked {\\n            uint256 position = OFFSET + i; // not in assembly because OFFSET is in the library scope\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                locker := sload(position)\\n            }\\n        }\\n    }\\n\\n    function getActiveLock(LockData storage self) internal view returns (address locker) {\\n        return getLock(self.length - 1);\\n    }\\n}\\n\",\"keccak256\":\"0x6e466532d5cf141145e467f01dfdeb2e7dbaa0304f330e6e7971be06a8da49ca\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport {IAssetPool} from \\\"../interfaces/IAssetPool.sol\\\";\\nimport {ICouponManager} from \\\"../interfaces/ICouponManager.sol\\\";\\nimport {IPositionLocker} from \\\"../interfaces/IPositionLocker.sol\\\";\\nimport {ERC721Permit} from \\\"./ERC721Permit.sol\\\";\\nimport {LockData, LockDataLibrary} from \\\"./LockData.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\nimport {IPositionManager} from \\\"../interfaces/IPositionManager.sol\\\";\\n\\nabstract contract PositionManager is ERC721Permit, IPositionManager {\\n    using SafeERC20 for IERC20;\\n    using CouponLibrary for Coupon;\\n    using LockDataLibrary for LockData;\\n\\n    address internal immutable _couponManager;\\n    address public immutable override assetPool;\\n\\n    string public override baseURI;\\n    uint256 public override nextId = 1;\\n\\n    LockData private _lockData;\\n\\n    // @dev Since the epoch is greater than 0, the coupon ID and address can never be the same.\\n    mapping(address locker => mapping(uint256 assetId => int256 delta)) public override assetDelta;\\n\\n    constructor(\\n        address couponManager_,\\n        address assetPool_,\\n        string memory baseURI_,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC721Permit(name_, symbol_, \\\"1\\\") {\\n        _couponManager = couponManager_;\\n        assetPool = assetPool_;\\n        baseURI = baseURI_;\\n    }\\n\\n    modifier modifyPosition(uint256 positionId) {\\n        _;\\n        _unsettlePosition(positionId);\\n    }\\n\\n    modifier onlyByLocker() {\\n        address locker = _lockData.getActiveLock();\\n        if (msg.sender != locker) revert LockedBy(locker);\\n        _;\\n    }\\n\\n    function lock(bytes calldata data) external returns (bytes memory result) {\\n        _lockData.push(msg.sender);\\n\\n        result = IPositionLocker(msg.sender).positionLockAcquired(data);\\n\\n        if (_lockData.length == 1) {\\n            if (_lockData.nonzeroDeltaCount != 0) revert NotSettled();\\n            delete _lockData;\\n        } else {\\n            _lockData.pop();\\n        }\\n    }\\n\\n    function _isSettled(uint256 positionId) internal view virtual returns (bool);\\n\\n    function _setPositionSettlement(uint256 positionId, bool settled) internal virtual;\\n\\n    function _unsettlePosition(uint256 positionId) internal {\\n        if (!_isSettled(positionId)) return;\\n        _setPositionSettlement(positionId, false);\\n        unchecked {\\n            _lockData.nonzeroDeltaCount++;\\n        }\\n    }\\n\\n    function _accountDelta(uint256 assetId, uint256 amount0, uint256 amount1) internal returns (int256 delta) {\\n        if (amount0 == amount1) return 0;\\n\\n        address locker = _lockData.getActiveLock();\\n        int256 current = assetDelta[locker][assetId];\\n        unchecked {\\n            if (amount0 > amount1) {\\n                delta = SafeCast.toInt256(amount0 - amount1);\\n            } else {\\n                delta = -SafeCast.toInt256(amount1 - amount0);\\n            }\\n        }\\n        int256 next = current + delta;\\n\\n        unchecked {\\n            if (next == 0) {\\n                _lockData.nonzeroDeltaCount--;\\n            } else if (current == 0) {\\n                _lockData.nonzeroDeltaCount++;\\n            }\\n        }\\n\\n        assetDelta[locker][assetId] = next;\\n    }\\n\\n    function withdrawToken(address token, address to, uint256 amount) external onlyByLocker {\\n        _accountDelta(uint256(uint160(token)), amount, 0);\\n        IAssetPool(assetPool).withdraw(token, amount, to);\\n    }\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external onlyByLocker {\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                _accountDelta(coupons[i].id(), coupons[i].amount, 0);\\n            }\\n            ICouponManager(_couponManager).mintBatch(to, coupons, data);\\n        }\\n    }\\n\\n    function depositToken(address token, uint256 amount) external onlyByLocker {\\n        if (amount == 0) return;\\n        IERC20(token).safeTransferFrom(msg.sender, assetPool, amount);\\n        _accountDelta(uint256(uint160(token)), 0, amount);\\n    }\\n\\n    function burnCoupons(Coupon[] calldata coupons) external onlyByLocker {\\n        unchecked {\\n            ICouponManager(_couponManager).burnBatch(msg.sender, coupons);\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                _accountDelta(coupons[i].id(), 0, coupons[i].amount);\\n            }\\n        }\\n    }\\n\\n    function settlePosition(uint256 positionId) public virtual {\\n        if (_isSettled(positionId)) return;\\n        _setPositionSettlement(positionId, true);\\n        unchecked {\\n            _lockData.nonzeroDeltaCount--;\\n        }\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    function lockData() external view override returns (uint128, uint128) {\\n        return (_lockData.length, _lockData.nonzeroDeltaCount);\\n    }\\n\\n    function _mint(address to, uint256 positionId) internal virtual override {\\n        super._mint(to, positionId);\\n        _setPositionSettlement(positionId, false);\\n        unchecked {\\n            _lockData.nonzeroDeltaCount++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d1402c5ba9f56f0aa63309dadd603e8b6683c852501d05a14f884d4ea8f7d07\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x61020060405260016009553480156200001757600080fd5b50604051620066a4380380620066a48339810160408190526200003a9162000315565b8585826040518060400160405280600d81526020016c2637b0b7102837b9b4ba34b7b760991b8152506040518060400160405280600281526020016104c560f41b8152508181604051806040016040528060018152602001603160f81b815250828184848160009081620000af9190620004b2565b506001620000be8282620004b2565b50620000d091508390506006620001e1565b61012052620000e1816007620001e1565b61014052815160208084019190912060e052815190820120610100524660a0526200016f60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0525050506001600160a01b038581166101605284166101805260086200019e8482620004b2565b505050505050620001be620001b86200021a60201b60201c565b6200021e565b506001600160a01b039283166101a05291166101c0526101e05250620005d89050565b60006020835110156200020157620001f98362000270565b905062000214565b816200020e8482620004b2565b5060ff90505b92915050565b3390565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f81511115620002a7578260405163305a27a960e01b81526004016200029e91906200057e565b60405180910390fd5b8051620002b482620005b3565b179392505050565b80516001600160a01b0381168114620002d457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200030c578181015183820152602001620002f2565b50506000910152565b60008060008060008060c087890312156200032f57600080fd5b6200033a87620002bc565b95506200034a60208801620002bc565b94506200035a60408801620002bc565b93506200036a60608801620002bc565b608088015160a089015191945092506001600160401b03808211156200038f57600080fd5b818901915089601f830112620003a457600080fd5b815181811115620003b957620003b9620002d9565b604051601f8201601f19908116603f01168101908382118183101715620003e457620003e4620002d9565b816040528281528c6020848701011115620003fe57600080fd5b62000411836020830160208801620002ef565b80955050505050509295509295509295565b600181811c908216806200043857607f821691505b6020821081036200045957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004ad57600081815260208120601f850160051c81016020861015620004885750805b601f850160051c820191505b81811015620004a95782815560010162000494565b5050505b505050565b81516001600160401b03811115620004ce57620004ce620002d9565b620004e681620004df845462000423565b846200045f565b602080601f8311600181146200051e5760008415620005055750858301515b600019600386901b1c1916600185901b178555620004a9565b600085815260208120601f198616915b828110156200054f578886015182559484019460019091019084016200052e565b50858210156200056e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200059f816040850160208701620002ef565b601f01601f19169190910160400192915050565b80516020808301519190811015620004595760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051615ffb620006a9600039600081816109160152613acc01526000818161061001526129d60152600081816106f90152613a1101526000818161049f01528181610bd40152818161157401526129fe01526000818161124d01528181611431015281816117500152612bb001526000611db501526000611d8a015260006135db015260006135b30152600061350e01526000613538015260006135620152615ffb6000f3fe6080604052600436106102f25760003560e01c806370a082311161018f578063b88d4fde116100e1578063de0bb9331161008a578063ee1fe2ad11610064578063ee1fe2ad14610ad2578063f2fde38b14610af2578063f8fcd15614610b1257600080fd5b8063de0bb93314610904578063e985e9c514610938578063eb02c3011461098157600080fd5b8063c1f48676116100bb578063c1f48676146108a4578063c87b56dd146108c4578063d296d1f1146108e457600080fd5b8063b88d4fde14610819578063bb4c831e14610839578063c18927c51461087457600080fd5b806384b0196e11610143578063a22cb4651161011d578063a22cb46514610796578063aba5b4b3146107b6578063af2b68c5146107d657600080fd5b806384b0196e1461073b5780638da5cb5b1461076357806395d89b411461078157600080fd5b80637ac2ff7b116101745780637ac2ff7b146106d45780637dc0d1d0146106e7578063815483191461071b57600080fd5b806370a082311461069f578063715018a6146106bf57600080fd5b806330adf81f11610248578063430c114b116101fc5780636352211e116101d65780636352211e146106325780636af6dbf4146106525780636c0360eb1461068a57600080fd5b8063430c114b146105c857806361b8ce8c146105e857806361d027b3146105fe57600080fd5b8063350a951a1161022d578063350a951a146105155780633644e5151461059357806342842e0e146105a857600080fd5b806330adf81f146104c1578063338b5dea146104f557600080fd5b80630a5a9a5a116102aa5780631ad4fbb8116102845780631ad4fbb81461044d57806323b872dd1461046d5780632ec939f91461048d57600080fd5b80630a5a9a5a146103c85780630f0b0765146103e8578063141a468c1461040857600080fd5b806306fdde03116102db57806306fdde031461034e578063081812fc14610370578063095ea7b3146103a857600080fd5b806301e33667146102f757806301ffc9a714610319575b600080fd5b34801561030357600080fd5b50610317610312366004615244565b610b49565b005b34801561032557600080fd5b50610339610334366004615296565b610c36565b60405190151581526020015b60405180910390f35b34801561035a57600080fd5b50610363610c7a565b6040516103459190615303565b34801561037c57600080fd5b5061039061038b366004615316565b610d0c565b6040516001600160a01b039091168152602001610345565b3480156103b457600080fd5b506103176103c336600461532f565b610d33565b3480156103d457600080fd5b506103176103e336600461536d565b610e64565b3480156103f457600080fd5b50610317610403366004615468565b611189565b34801561041457600080fd5b5061043f610423366004615316565b6000908152600f602052604090205467ffffffffffffffff1690565b604051908152602001610345565b34801561045957600080fd5b506103176104683660046154ec565b6112c4565b34801561047957600080fd5b50610317610488366004615244565b6114a5565b34801561049957600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b3480156104cd57600080fd5b5061043f7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b34801561050157600080fd5b5061031761051036600461532f565b61151c565b34801561052157600080fd5b50610535610530366004615586565b6115b4565b6040516103459190600060c08201905063ffffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b34801561059f57600080fd5b5061043f6116b4565b3480156105b457600080fd5b506103176105c3366004615244565b6116c3565b3480156105d457600080fd5b506103176105e33660046155b9565b6116de565b3480156105f457600080fd5b5061043f60095481565b34801561060a57600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b34801561063e57600080fd5b5061039061064d366004615316565b61180a565b34801561065e57600080fd5b5061043f61066d36600461532f565b600b60209081526000928352604080842090915290825290205481565b34801561069657600080fd5b5061036361186f565b3480156106ab57600080fd5b5061043f6106ba3660046155fb565b6118fd565b3480156106cb57600080fd5b50610317611997565b6103176106e2366004615625565b6119ab565b3480156106f357600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b34801561072757600080fd5b5061036361073636600461567f565b611c18565b34801561074757600080fd5b50610750611d7c565b60405161034597969594939291906156b5565b34801561076f57600080fd5b50600c546001600160a01b0316610390565b34801561078d57600080fd5b50610363611e21565b3480156107a257600080fd5b506103176107b1366004615775565b611e30565b3480156107c257600080fd5b506103176107d1366004615316565b611e3f565b3480156107e257600080fd5b5061043f6107f136600461532f565b6001600160a01b03919091166000908152600d60209081526040808320938352929052205490565b34801561082557600080fd5b50610317610834366004615844565b6121a0565b34801561084557600080fd5b506108596108543660046158ef565b612218565b60408051938452602084019290925290820152606001610345565b34801561088057600080fd5b5061089461088f366004615911565b6122c7565b60405161034594939291906159ae565b3480156108b057600080fd5b506103396108bf366004615586565b6126df565b3480156108d057600080fd5b506103636108df366004615316565b6126f3565b3480156108f057600080fd5b506108596108ff3660046158ef565b61275a565b34801561091057600080fd5b5061043f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561094457600080fd5b50610339610953366004615586565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561098d57600080fd5b50610a5e61099c366004615316565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506000908152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c082015290565b6040516103459190600060e08201905067ffffffffffffffff835116825260ff602084015116602083015260408301511515604083015260608301516001600160a01b038082166060850152806080860151166080850152505060a083015160a083015260c083015160c083015292915050565b348015610ade57600080fd5b5061043f610aed366004615586565b612d4b565b348015610afe57600080fd5b50610317610b0d3660046155fb565b612e39565b348015610b1e57600080fd5b50600a54604080516001600160801b038084168252600160801b909304909216602083015201610345565b6000610b55600a612ec9565b9050336001600160a01b03821614610b90576040516313d2c13360e21b81526001600160a01b03821660048201526024015b60405180910390fd5b610ba5846001600160a01b0316836000612f16565b50604051631a4ca37b60e21b81526001600160a01b0385811660048301526024820184905284811660448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec90606401600060405180830381600087803b158015610c1857600080fd5b505af1158015610c2c573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b031982167f6831a4fd000000000000000000000000000000000000000000000000000000001480610c745750610c7482613025565b92915050565b606060008054610c89906159e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb5906159e7565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b5050505050905090565b6000610d17826130c0565b506000908152600460205260409020546001600160a01b031690565b6000610d3e8261180a565b9050806001600160a01b0316836001600160a01b031603610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b87565b336001600160a01b0382161480610de35750610de38133610953565b610e555760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b87565b610e5f8383613124565b505050565b610e6c613192565b60408051606088811b6bffffffffffffffffffffffff199081166020808501919091529189901b16603483015282516028818403018152604890920190925280519101206000906000818152600e6020526040902054909150600160401b900463ffffffff1615610ef057604051630793df6360e21b815260040160405180910390fd5b6040518060c00160405280886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190615a21565b60ff1663ffffffff168152602001876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190615a21565b60ff16815263ffffffff8781166020808401919091528782166040808501919091528783166060808601919091528784166080958601526000878152600e8452829020865181549488015188850151938901519789015160a0909901518716600160a01b027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff998816600160801b02999099167fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff988816600160601b027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff958916600160401b02959095167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9289166401000000000267ffffffffffffffff19909816939098169290921795909517949094169490941717939093161792909217909155516001600160a01b0380881691908916907ff603a35b218903704c6a49441ff6b83ae5faeba8f4377ed380cb006c34824d649061117890899089908990899063ffffffff948516815292841660208401529083166040830152909116606082015260800190565b60405180910390a350505050505050565b6000611195600a612ec9565b9050336001600160a01b038216146111cb576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b60005b858110156112355761122c6112098888848181106111ee576111ee615a3e565b9050606002018036038101906112049190615a94565b6131ec565b88888481811061121b5761121b615a3e565b905060600201604001356000612f16565b506001016111ce565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f9061128a9087908a908a9089908990600401615b51565b600060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b50505050505050505050565b60008367ffffffffffffffff8111156112df576112df6157ac565b60405190808252806020026020018201604052801561133357816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816112fd5790505b50905060005b8481101561141957600061137f87878481811061135857611358615a3e565b90506040020180360381019061136e9190615b87565b6020810151905160a09190911b0190565b9050604051806040016040528088888581811061139e5761139e615a3e565b9050604002018036038101906113b49190615b87565b8152336000908152600d6020908152604080832086845282529091205491015283518490849081106113e8576113e8615a3e565b602090810291909101810191909152336000908152600d825260408082209382529290915290812055600101611339565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f9061146c903390859088908890600401615ba3565b600060405180830381600087803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050505050505050565b6114af3382613201565b6115115760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b87565b610e5f838383613280565b6000611528600a612ec9565b9050336001600160a01b0382161461155e576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b8115610e5f576115996001600160a01b038416337f000000000000000000000000000000000000000000000000000000000000000085613479565b6115ae836001600160a01b0316600084612f16565b50505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600e600061163985856040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b81526020808201929092526040908101600020815160c081018352905463ffffffff80821683526401000000008204811694830194909452600160401b8104841692820192909252600160601b820483166060820152600160801b820483166080820152600160a01b90910490911660a08201529392505050565b60006116be613501565b905090565b610e5f838383604051806020016040528060008152506121a0565b60006116ea600a612ec9565b9050336001600160a01b03821614611720576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b6040517fca6ce7ea0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ca6ce7ea9061178990339087908790600401615bd8565b600060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b5050505060005b828110156115ae576118016117de8585848181106111ee576111ee615a3e565b60008686858181106117f2576117f2615a3e565b90506060020160400135612f16565b506001016117be565b6000818152600260205260408120546001600160a01b031680610c745760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b87565b6008805461187c906159e7565b80601f01602080910402602001604051908101604052809291908181526020018280546118a8906159e7565b80156118f55780601f106118ca576101008083540402835291602001916118f5565b820191906000526020600020905b8154815290600101906020018083116118d857829003601f168201915b505050505081565b60006001600160a01b03821661197b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b87565b506001600160a01b031660009081526003602052604090205490565b61199f613192565b6119a9600061362c565b565b834211156119e5576040517f1a15a3cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a637f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad8888611a168161367e565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0810187905260c001604051602081830303815290604052805190602001206136a5565b90506000611a708761180a565b9050806001600160a01b0316886001600160a01b031603611aa457604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381163b15611bd157604080516020810186905280820185905260f887901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e000000000000000000000000000000000000000000000000000000009092526001600160a01b03831691631626ba7e91611b46918691606501615c04565b602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190615c1d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14611bcc57604051638baa579f60e01b815260040160405180910390fd5b611c0e565b806001600160a01b0316611be7838787876136ed565b6001600160a01b031614611c0e57604051638baa579f60e01b815260040160405180910390fd5b610c2c8888613124565b6060611c74600a3381546001600160801b039081167f760a9a962ae3d184e99c0483cf5684fb3170f47116ca4f445c50209da4f4f90681019290925582546fffffffffffffffffffffffffffffffff1916600190920116179055565b6040517f46a114e200000000000000000000000000000000000000000000000000000000815233906346a114e290611cb29086908690600401615c3a565b6000604051808303816000875af1158015611cd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cf99190810190615c4e565b600a549091506001600160801b0316600103611d4a57600a54600160801b90046001600160801b031615611d405760405163ba329a9b60e01b815260040160405180910390fd5b6000600a55610c74565b600a80546fffffffffffffffffffffffffffffffff1981166001600160801b0391821660001901909116179055610c74565b600060608082808083611db07f00000000000000000000000000000000000000000000000000000000000000006006613715565b611ddb7f00000000000000000000000000000000000000000000000000000000000000006007613715565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b606060018054610c89906159e7565b611e3b3383836137c0565b5050565b6000611e4b600a612ec9565b9050336001600160a01b03821614611e81576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b611e8a8261388e565b6000828152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c0820181905215801590611f365750611f368160200151611f2a6138fe565b60ff9081169116111590565b15611f6d576040517f04aec73b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e6000611fca846060015185608001516040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b815260208082019290925260409081016000908120825160c081018452905463ffffffff80821683526401000000008204811695830195909552600160401b8104851693820193909352600160601b83048416606080830191909152600160801b84048516608080840191909152600160a01b90940490941660a082015292850151918501519293509182918291612063919086613916565b92509250925060008560c0015111801561208057508460c0015181115b1561209e5760405163c985f1b360e01b815260040160405180910390fd5b620f4240828660c001516120b29190615cd2565b6120bc9190615cd2565b846040015163ffffffff16848760a001516120d79190615cd2565b6120e19190615cd2565b1015612119576040517f828d924c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c085015115801561212d575060a0850151155b1561213b5761213b87613ba7565b867f6909f75c94ff7a7648004afe5da77344ce9bbe4de5bdc77cf17cef5319e9eba98660a001518760c00151886020015160405161218f93929190928352602083019190915260ff16604082015260600190565b60405180910390a250505050505050565b6121aa3383613201565b61220c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b87565b6115ae84848484613c3c565b6000828152600f60209081526040808320815160e081018352815467ffffffffffffffff8116825260ff600160401b8204811695830195909552600160481b81049094161515928101929092526001600160a01b03600160501b9093048316606083015260018101549092166080820152600282015460a082015260039091015460c0820152819081906122b990856122b357600019613cc5565b85613cc5565b9250925092505b9250925092565b60608060008060006122d9600a612ec9565b9050336001600160a01b0382161461230f576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b8861231a338b613201565b612350576040517fc0185c6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061235a6138fe565b90506000600f60008d81526020019081526020016000206040518060e00160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900460ff1660ff1660ff1681526020016000820160099054906101000a900460ff1615151515815260200160008201600a9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152505090508a600f60008e81526020019081526020016000206002018190555061248a6000826020015160ff90811691161090565b80156124a05750602081015160ff808416911611155b156124e757898160c00151146124e2576040517fa0d64f8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125d5565b602081015160ff166124fd5760ff821660208201525b60008c8152600f602052604090206003018a9055891561251d578861251f565b815b60008d8152600f6020908152604091829020805460ff948516600160401b90810268ff00000000000000001983168117808555865160e08101885267ffffffffffffffff92831692909416919091178352908104861693820193909352600160481b83049094161515928401929092526001600160a01b03600160501b909104811660608401526001820154166080830152600281015460a08301526003015460c08201526125cf908290613ff1565b90985096505b60005b87518110156126345761262b6126068983815181106125f9576125f9615a3e565b60200260200101516131ec565b60008a848151811061261a5761261a615a3e565b602002602001015160200151612f16565b506001016125d8565b5060005b88518110156126875761267e6126598a83815181106125f9576125f9615a3e565b8a838151811061266b5761266b615a3e565b6020026020010151602001516000612f16565b50600101612638565b506126a481606001516001600160a01b03168c8360a00151612f16565b95506126c281608001516001600160a01b03168260c001518c612f16565b600003945050506126d281614425565b5050945094509450949050565b60006126eb838361448a565b159392505050565b60606126fe826130c0565b6000612708614505565b905060008151116127285760405180602001604052806000815250612753565b8061273284614514565b604051602001612743929190615ce9565b6040516020818303038152906040525b9392505050565b60008060008061276a600a612ec9565b9050336001600160a01b038216146127a0576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b6000868152600f6020526040902054600160481b900460ff166127d65760405163ba329a9b60e01b815260040160405180910390fd5b6000868152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c0820152612872818761286c57600019613cc5565b87613cc5565b9196509450925084158015612885575083155b156128bc576040517f6992224600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006128c66145b4565b905060006128df83602001518360ff9081169116101590565b6128ea576000612900565b60208301516128fc9060ff16836145bf565b6001015b60a084018051899003905260c0840180518890039081905260ff91909116915060000361296b5761293560ff831660016145bf565b60ff16602084810182905260008b8152600f90915260409020805468ff00000000000000001916600160401b9092029190911790555b60a083015160008a8152600f60205260409020600281019190915560c084015160039091015560608301516129aa906001600160a01b03168689612f16565b506060830151604051631a4ca37b60e21b81526001600160a01b039182166004820152602481018790527f0000000000000000000000000000000000000000000000000000000000000000821660448201527f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401600060405180830381600087803b158015612a4457600080fd5b505af1158015612a58573d6000803e3d6000fd5b50505050612a7583608001516001600160a01b0316876000612f16565b508015612c9f576000612a878a61180a565b905060008267ffffffffffffffff811115612aa457612aa46157ac565b604051908082528060200260200182016040528015612af857816020015b6040805160808101825260009181018281526060820183905281526020810191909152815260200190600190039081612ac25790505b50905060005b83811015612b98576080860151612b7390612b1c60ff8816846145cb565b8b604080516080810182526000918101828152606082018390528152602081019190915250604080516080810182526001600160a01b039490941690840190815260ff929092166060840152908252602082015290565b828281518110612b8557612b85615a3e565b6020908102919091010152600101612afe565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f90612be79085908590600401615d18565b600060405180830381600087803b158015612c0157600080fd5b505af1925050508015612c12575060015b612c9c5760005b83811015612c9a57818181518110612c3357612c33615a3e565b602002602001015160200151600d6000856001600160a01b03166001600160a01b031681526020019081526020016000206000612c7b8585815181106125f9576125f9615a3e565b8152602081019190915260400160002080549091019055600101612c19565b505b50505b604080518881526020810188905290810186905233908a907fe5fa9a508c78f7cf1e7d0fb90c4b5aae238aa0e336c5ca713d86f74d008b397f9060600160405180910390a3887f6909f75c94ff7a7648004afe5da77344ce9bbe4de5bdc77cf17cef5319e9eba98460a001518560c001518660200151604051612d3893929190928352602083019190915260ff16604082015260600190565b60405180910390a2505050509250925092565b600080612d58600a612ec9565b9050336001600160a01b03821614612d8e576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b612d98848461448a565b15612db657604051630793df6360e21b815260040160405180910390fd5b6009805460018082019092556000818152600f6020526040902080547fffff0000000000000000000000000000000000000000ffffffffffffffffffff16600160501b6001600160a01b0389811691909102919091178255920180546001600160a01b031916928616929092179091559150612e3233836145d7565b5092915050565b612e41613192565b6001600160a01b038116612ebd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b87565b612ec68161362c565b50565b8054600090610c7490612ee7906001906001600160801b0316615d54565b6001600160801b03167f760a9a962ae3d184e99c0483cf5684fb3170f47116ca4f445c50209da4f4f906015490565b6000818303612f2757506000612753565b6000612f33600a612ec9565b6001600160a01b0381166000908152600b6020908152604080832089845290915290205490915083851115612f7457612f6d848603614627565b9250612f85565b612f7f858503614627565b60000392505b6000612f918483615d74565b905080600003612fc757600a80546000196001600160801b03600160801b80840482169290920181169091029116179055612ff6565b81600003612ff657600a805460016001600160801b03600160801b808404821692909201811690910291161790555b6001600160a01b03929092166000908152600b6020908152604080832098835297905295909520559392505050565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061308857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610c7457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610c74565b6000818152600260205260409020546001600160a01b0316612ec65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b87565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906131598261180a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600c546001600160a01b031633146119a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b87565b80516020810151905160009160a01b01610c74565b60008061320d8361180a565b9050806001600160a01b0316846001600160a01b0316148061325457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806132785750836001600160a01b031661326d84610d0c565b6001600160a01b0316145b949350505050565b826001600160a01b03166132938261180a565b6001600160a01b0316146132f75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b87565b6001600160a01b0382166133725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b87565b826001600160a01b03166133858261180a565b6001600160a01b0316146133e95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b87565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526115ae9085906146c3565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561355a57507f000000000000000000000000000000000000000000000000000000000000000046145b1561358457507f000000000000000000000000000000000000000000000000000000000000000090565b6116be604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600f60205260408120613695906147ab565b67ffffffffffffffff1692915050565b6000610c746136b2613501565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006136fe878787876147f2565b9150915061370b816148b6565b5095945050505050565b606060ff831461372f5761372883614a1b565b9050610c74565b81805461373b906159e7565b80601f0160208091040260200160405190810160405280929190818152602001828054613767906159e7565b80156137b45780601f10613789576101008083540402835291602001916137b4565b820191906000526020600020905b81548152906001019060200180831161379757829003601f168201915b50505050509050610c74565b816001600160a01b0316836001600160a01b0316036138215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b87565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600f6020526040902054600160481b900460ff16156138af5750565b6000818152600f60205260409020805469ff0000000000000000001916600160481b17905550600a80546000196001600160801b03600160801b80840482169290920181169091029116179055565b60006116be600161390d6145b4565b60ff16906145bf565b8051602080830151604080516003808252608082019092526000948594859463ffffffff92831694921692859290918201606080368337019050509050888160008151811061396757613967615a3e565b60200260200101906001600160a01b031690816001600160a01b031681525050878160018151811061399b5761399b615a3e565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816002815181106139d0576139d0615a3e565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081526000917f00000000000000000000000000000000000000000000000000000000000000001690639d23d9f290613a46908590600401615d9c565b600060405180830381865afa158015613a63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a8b9190810190615de9565b905080600181518110613aa057613aa0615a3e565b602002602001015183601203600a0a82600281518110613ac257613ac2615a3e565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000000281613af957613af9615e83565b0481613b0757613b07615e83565b04945083831115613b5857838303600a0a81600081518110613b2b57613b2b615a3e565b602002602001015102965080600181518110613b4957613b49615a3e565b60200260200101519550613b9a565b80600081518110613b6b57613b6b615a3e565b60200260200101519650828403600a0a81600181518110613b8e57613b8e615a3e565b60200260200101510295505b5050505093509350939050565b6000613bb28261180a565b9050613bbd8261180a565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b613c47848484613280565b613c5384848484614a5a565b6115ae5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610b87565b600080600080600e6000613d26886060015189608001516040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b815260208082019290925260409081016000908120825160c081018452905463ffffffff80821683526401000000008204811695830195909552600160401b8104851693820193909352600160601b83048416606080830191909152600160801b84048516608080840191909152600160a01b90940490941660a082015292890151918901519293509182918291613dbf919086613916565b92509250925042613dd68a6020015160ff16614bae565b11613e60578860c001518810613df2578860c001519550613e37565b8860c001518189011115613e3357808960c001511015613e255760405163c985f1b360e01b815260040160405180910390fd5b808960c00151039550613e37565b8795505b613e59620f424083880202856060015163ffffffff16620f4240038502614bb9565b9650613fc5565b60a089015160c08a0151604086015191850291908402620f4240029063ffffffff1682028111613ea05760008060009850985098505050505050506122c0565b613ed58660a0015163ffffffff16830282038760a0015163ffffffff16886060015163ffffffff16620f424003038702614bb9565b9850620f424084876060015163ffffffff16620f424003878c020281613efd57613efd615e83565b0481613f0b57613f0b615e83565b60c08d01519190049850838111613f4257808b1015613f3d5760405163c985f1b360e01b815260040160405180910390fd5b613f7e565b80891180613f51575088840181105b15613f7157808b1015613f3d57613f6a8b858303614bf0565b9050613f7e565b613f7b8b8a614bf0565b90505b888114613fad57613fa7620f424086830202886060015163ffffffff16620f4240038802614bb9565b99508098505b8b60a001518a1115613fc1578b60a0015199505b5050505b620f4240846080015163ffffffff16880281613fe357613fe3615e83565b049450505050509250925092565b60608082606001516001600160a01b031684606001516001600160a01b0316148015614036575082608001516001600160a01b031684608001516001600160a01b0316145b801561405157508251845167ffffffffffffffff9081169116145b614087576040517f84991e9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006140916138fe565b90506140a781856020015160ff90811691161190565b806140bc5750602085015160ff908116908216115b156140f3576040517f47a5b25b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208401516000906141089060ff16836145bf565b60ff169050600061412983886020015160ff166145bf90919063ffffffff16565b60ff169050600061413a8383614bf0565b90508760c001518760c00151111561415657808203915061417b565b8760c001518760c00151101561417057808303925061417b565b808303925080820391505b5060008267ffffffffffffffff811115614197576141976157ac565b6040519080825280602002602001820160405280156141eb57816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816141b55790505b50905060008267ffffffffffffffff811115614209576142096157ac565b60405190808252806020026020018201604052801561425d57816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816142275790505b5090506000935060009250600061428c8661390d8c602001518c6020015160ff16614c0690919063ffffffff16565b60ff1690508560005b82811015614411576142ab60ff831660016145cb565b915060006142c38c602001518460ff90811691161090565b6142d1578b60c001516142d4565b60005b905060006142ec8e602001518560ff90811691161090565b6142fa578d60c001516142fd565b60005b905080821115614385576080808f015160408051808401825260008183018181526060808401839052908352602092830191909152825194850183526001600160a01b0390931691840191825260ff881692840192909252825282840390820152875160018b019a8991811061437557614375615a3e565b6020026020010181905250614407565b80821015614407576080808f015160408051808401825260008183018181526060808401839052908352602092830191909152825194850183526001600160a01b0390931691840191825260ff881692840192909252825283830390820152865160018a0199889181106143fb576143fb615a3e565b60200260200101819052505b5050600101614295565b5092975090955050505050505b9250929050565b6000818152600f6020526040902054600160481b900460ff166144455750565b6000908152600f60205260409020805469ff00000000000000000019169055600a8054600160801b8082046001600160801b0390811660010181169091029116179055565b6000600e60006144df85856040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b8152602081019190915260400160002054600160401b900463ffffffff16159392505050565b606060088054610c89906159e7565b6060600061452183614c1b565b600101905060008167ffffffffffffffff811115614541576145416157ac565b6040519080825280601f01601f19166020018201604052801561456b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461457557509392505050565b60006116be42614cfd565b60006127538284615e99565b60006127538284615eb2565b6145e18282614deb565b6000908152600f60205260409020805469ff0000000000000000001916905550600a8054600160801b8082046001600160801b0390811660010181169091029116179055565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156146bf5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610b87565b5090565b6000614718826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f769092919063ffffffff16565b90508051600014806147395750808060200190518101906147399190615ecb565b610e5f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b87565b805460009067ffffffffffffffff1682826147c583615ee8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561482957506000905060036148ad565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561487d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166148a6576000600192509250506148ad565b9150600090505b94509492505050565b60008160048111156148ca576148ca615f0f565b036148d25750565b60018160048111156148e6576148e6615f0f565b036149335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b87565b600281600481111561494757614947615f0f565b036149945760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b87565b60038160048111156149a8576149a8615f0f565b03612ec65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b87565b60606000614a2883614f85565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60006001600160a01b0384163b15614ba657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614a9e903390899088908890600401615f25565b6020604051808303816000875af1925050508015614ad9575060408051601f3d908101601f19168201909252614ad691810190615c1d565b60015b614b8c573d808015614b07576040519150601f19603f3d011682016040523d82523d6000602084013e614b0c565b606091505b508051600003614b845760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610b87565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613278565b506001613278565b6000610c7482614fc6565b60008215614be75781614bcd600185615f61565b614bd79190615f74565b614be2906001615f96565b612753565b50600092915050565b6000818310614bff5781612753565b5090919050565b600060ff80831690841611614bff5781612753565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614c64577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614c90576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614cae57662386f26fc10000830492506010015b6305f5e1008310614cc6576305f5e100830492506008015b6127108310614cda57612710830492506004015b60648310614cec576064830492506002015b600a8310610c745760010192915050565b600080620151808304905080622649658101600062023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281614d6257614d62615e83565b059050600b8105935083600c028160020103905083826031850360640201019150600060066001836107b28603600c02010381614da157614da1615e83565b04905060ff811115614ddf576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b6001600160a01b038216614e415760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b87565b6000818152600260205260409020546001600160a01b031615614ea65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b87565b6000818152600260205260409020546001600160a01b031615614f0b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b87565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606132788484600085615098565b600060ff8216601f811115610c74576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660ff831681020181600c82046107b20190506004600c8381614fee57614fee615e83565b06901b91506004810615801561500657506064810615155b8061501357506101908106155b1561503c5779016e014f0131011200f400d500b600980079005b003c001f000090911c9061505c565b79016d014e0130011100f300d400b500970078005a003b001f000090911c905b6201518061019061064019830104606461076c1984010460046107b0198501046107b2850361016d028661ffff16010103010292505050919050565b6060824710156151105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b87565b600080866001600160a01b0316858760405161512c9190615fa9565b60006040518083038185875af1925050503d8060008114615169576040519150601f19603f3d011682016040523d82523d6000602084013e61516e565b606091505b509150915061517f8783838761518a565b979650505050505050565b606083156151f95782516000036151f2576001600160a01b0385163b6151f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b87565b5081613278565b613278838381511561520e5781518083602001fd5b8060405162461bcd60e51b8152600401610b879190615303565b80356001600160a01b038116811461523f57600080fd5b919050565b60008060006060848603121561525957600080fd5b61526284615228565b925061527060208501615228565b9150604084013590509250925092565b6001600160e01b031981168114612ec657600080fd5b6000602082840312156152a857600080fd5b813561275381615280565b60005b838110156152ce5781810151838201526020016152b6565b50506000910152565b600081518084526152ef8160208601602086016152b3565b601f01601f19169290920160200192915050565b60208152600061275360208301846152d7565b60006020828403121561532857600080fd5b5035919050565b6000806040838503121561534257600080fd5b61534b83615228565b946020939093013593505050565b803563ffffffff8116811461523f57600080fd5b60008060008060008060c0878903121561538657600080fd5b61538f87615228565b955061539d60208801615228565b94506153ab60408801615359565b93506153b960608801615359565b92506153c760808801615359565b91506153d560a08801615359565b90509295509295509295565b60008083601f8401126153f357600080fd5b50813567ffffffffffffffff81111561540b57600080fd5b60208301915083602060608302850101111561441e57600080fd5b60008083601f84011261543857600080fd5b50813567ffffffffffffffff81111561545057600080fd5b60208301915083602082850101111561441e57600080fd5b60008060008060006060868803121561548057600080fd5b853567ffffffffffffffff8082111561549857600080fd5b6154a489838a016153e1565b90975095508591506154b860208901615228565b945060408801359150808211156154ce57600080fd5b506154db88828901615426565b969995985093965092949392505050565b6000806000806040858703121561550257600080fd5b843567ffffffffffffffff8082111561551a57600080fd5b818701915087601f83011261552e57600080fd5b81358181111561553d57600080fd5b8860208260061b850101111561555257600080fd5b60209283019650945090860135908082111561556d57600080fd5b5061557a87828801615426565b95989497509550505050565b6000806040838503121561559957600080fd5b6155a283615228565b91506155b060208401615228565b90509250929050565b600080602083850312156155cc57600080fd5b823567ffffffffffffffff8111156155e357600080fd5b6155ef858286016153e1565b90969095509350505050565b60006020828403121561560d57600080fd5b61275382615228565b60ff81168114612ec657600080fd5b60008060008060008060c0878903121561563e57600080fd5b61564787615228565b95506020870135945060408701359350606087013561566581615616565b9598949750929560808101359460a0909101359350915050565b6000806020838503121561569257600080fd5b823567ffffffffffffffff8111156156a957600080fd5b6155ef85828601615426565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526156f160e084018a6152d7565b8381036040850152615703818a6152d7565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561575557835183529284019291840191600101615739565b50909c9b505050505050505050505050565b8015158114612ec657600080fd5b6000806040838503121561578857600080fd5b61579183615228565b915060208301356157a181615767565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156157e5576157e56157ac565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615814576158146157ac565b604052919050565b600067ffffffffffffffff821115615836576158366157ac565b50601f01601f191660200190565b6000806000806080858703121561585a57600080fd5b61586385615228565b935061587160208601615228565b925060408501359150606085013567ffffffffffffffff81111561589457600080fd5b8501601f810187136158a557600080fd5b80356158b86158b38261581c565b6157eb565b8181528860208385010111156158cd57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561590257600080fd5b50508035926020909101359150565b6000806000806080858703121561592757600080fd5b843593506020850135925060408501359150606085013561594781615616565b939692955090935050565b600081518084526020808501945080840160005b838110156159a3578151805180516001600160a01b0316895284015160ff1684890152830151604088015260609096019590820190600101615966565b509495945050505050565b6080815260006159c16080830187615952565b82810360208401526159d38187615952565b604084019590955250506060015292915050565b600181811c908216806159fb57607f821691505b602082108103615a1b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215615a3357600080fd5b815161275381615616565b634e487b7160e01b600052603260045260246000fd5b600060408284031215615a6657600080fd5b615a6e6157c2565b9050615a7982615228565b81526020820135615a8981615616565b602082015292915050565b600060608284031215615aa657600080fd5b615aae6157c2565b615ab88484615a54565b815260409290920135602083015250919050565b8183526000602080850194508260005b858110156159a3576001600160a01b03615af583615228565b16875282820135615b0581615616565b60ff16878401526040828101359088015260609687019690910190600101615adc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0386168152606060208201526000615b74606083018688615acc565b8281036040840152614ddf818587615b28565b600060408284031215615b9957600080fd5b6127538383615a54565b6001600160a01b0385168152606060208201526000615bc56060830186615952565b828103604084015261517f818587615b28565b6001600160a01b0384168152604060208201526000615bfb604083018486615acc565b95945050505050565b82815260406020820152600061327860408301846152d7565b600060208284031215615c2f57600080fd5b815161275381615280565b602081526000613278602083018486615b28565b600060208284031215615c6057600080fd5b815167ffffffffffffffff811115615c7757600080fd5b8201601f81018413615c8857600080fd5b8051615c966158b38261581c565b818152856020838501011115615cab57600080fd5b615bfb8260208301602086016152b3565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c7457610c74615cbc565b60008351615cfb8184602088016152b3565b835190830190615d0f8183602088016152b3565b01949350505050565b6001600160a01b0383168152606060208201526000615d3a6060830184615952565b828103604084015260008152602081019150509392505050565b6001600160801b03828116828216039080821115612e3257612e32615cbc565b8082018281126000831280158216821582161715615d9457615d94615cbc565b505092915050565b6020808252825182820181905260009190848201906040850190845b81811015615ddd5783516001600160a01b031683529284019291840191600101615db8565b50909695505050505050565b60006020808385031215615dfc57600080fd5b825167ffffffffffffffff80821115615e1457600080fd5b818501915085601f830112615e2857600080fd5b815181811115615e3a57615e3a6157ac565b8060051b9150615e4b8483016157eb565b8181529183018401918481019088841115615e6557600080fd5b938501935b83851015614ddf57845182529385019390850190615e6a565b634e487b7160e01b600052601260045260246000fd5b60ff8281168282160390811115610c7457610c74615cbc565b60ff8181168382160190811115610c7457610c74615cbc565b600060208284031215615edd57600080fd5b815161275381615767565b600067ffffffffffffffff808316818103615f0557615f05615cbc565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152615f5760808301846152d7565b9695505050505050565b81810381811115610c7457610c74615cbc565b600082615f9157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c7457610c74615cbc565b60008251615fbb8184602087016152b3565b919091019291505056fea26469706673582212209048132fa59b170ab434aa5f45b56d0157fb5d5a73f04f46aca942668ce3e7f064736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106102f25760003560e01c806370a082311161018f578063b88d4fde116100e1578063de0bb9331161008a578063ee1fe2ad11610064578063ee1fe2ad14610ad2578063f2fde38b14610af2578063f8fcd15614610b1257600080fd5b8063de0bb93314610904578063e985e9c514610938578063eb02c3011461098157600080fd5b8063c1f48676116100bb578063c1f48676146108a4578063c87b56dd146108c4578063d296d1f1146108e457600080fd5b8063b88d4fde14610819578063bb4c831e14610839578063c18927c51461087457600080fd5b806384b0196e11610143578063a22cb4651161011d578063a22cb46514610796578063aba5b4b3146107b6578063af2b68c5146107d657600080fd5b806384b0196e1461073b5780638da5cb5b1461076357806395d89b411461078157600080fd5b80637ac2ff7b116101745780637ac2ff7b146106d45780637dc0d1d0146106e7578063815483191461071b57600080fd5b806370a082311461069f578063715018a6146106bf57600080fd5b806330adf81f11610248578063430c114b116101fc5780636352211e116101d65780636352211e146106325780636af6dbf4146106525780636c0360eb1461068a57600080fd5b8063430c114b146105c857806361b8ce8c146105e857806361d027b3146105fe57600080fd5b8063350a951a1161022d578063350a951a146105155780633644e5151461059357806342842e0e146105a857600080fd5b806330adf81f146104c1578063338b5dea146104f557600080fd5b80630a5a9a5a116102aa5780631ad4fbb8116102845780631ad4fbb81461044d57806323b872dd1461046d5780632ec939f91461048d57600080fd5b80630a5a9a5a146103c85780630f0b0765146103e8578063141a468c1461040857600080fd5b806306fdde03116102db57806306fdde031461034e578063081812fc14610370578063095ea7b3146103a857600080fd5b806301e33667146102f757806301ffc9a714610319575b600080fd5b34801561030357600080fd5b50610317610312366004615244565b610b49565b005b34801561032557600080fd5b50610339610334366004615296565b610c36565b60405190151581526020015b60405180910390f35b34801561035a57600080fd5b50610363610c7a565b6040516103459190615303565b34801561037c57600080fd5b5061039061038b366004615316565b610d0c565b6040516001600160a01b039091168152602001610345565b3480156103b457600080fd5b506103176103c336600461532f565b610d33565b3480156103d457600080fd5b506103176103e336600461536d565b610e64565b3480156103f457600080fd5b50610317610403366004615468565b611189565b34801561041457600080fd5b5061043f610423366004615316565b6000908152600f602052604090205467ffffffffffffffff1690565b604051908152602001610345565b34801561045957600080fd5b506103176104683660046154ec565b6112c4565b34801561047957600080fd5b50610317610488366004615244565b6114a5565b34801561049957600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b3480156104cd57600080fd5b5061043f7f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad81565b34801561050157600080fd5b5061031761051036600461532f565b61151c565b34801561052157600080fd5b50610535610530366004615586565b6115b4565b6040516103459190600060c08201905063ffffffff8084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b34801561059f57600080fd5b5061043f6116b4565b3480156105b457600080fd5b506103176105c3366004615244565b6116c3565b3480156105d457600080fd5b506103176105e33660046155b9565b6116de565b3480156105f457600080fd5b5061043f60095481565b34801561060a57600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b34801561063e57600080fd5b5061039061064d366004615316565b61180a565b34801561065e57600080fd5b5061043f61066d36600461532f565b600b60209081526000928352604080842090915290825290205481565b34801561069657600080fd5b5061036361186f565b3480156106ab57600080fd5b5061043f6106ba3660046155fb565b6118fd565b3480156106cb57600080fd5b50610317611997565b6103176106e2366004615625565b6119ab565b3480156106f357600080fd5b506103907f000000000000000000000000000000000000000000000000000000000000000081565b34801561072757600080fd5b5061036361073636600461567f565b611c18565b34801561074757600080fd5b50610750611d7c565b60405161034597969594939291906156b5565b34801561076f57600080fd5b50600c546001600160a01b0316610390565b34801561078d57600080fd5b50610363611e21565b3480156107a257600080fd5b506103176107b1366004615775565b611e30565b3480156107c257600080fd5b506103176107d1366004615316565b611e3f565b3480156107e257600080fd5b5061043f6107f136600461532f565b6001600160a01b03919091166000908152600d60209081526040808320938352929052205490565b34801561082557600080fd5b50610317610834366004615844565b6121a0565b34801561084557600080fd5b506108596108543660046158ef565b612218565b60408051938452602084019290925290820152606001610345565b34801561088057600080fd5b5061089461088f366004615911565b6122c7565b60405161034594939291906159ae565b3480156108b057600080fd5b506103396108bf366004615586565b6126df565b3480156108d057600080fd5b506103636108df366004615316565b6126f3565b3480156108f057600080fd5b506108596108ff3660046158ef565b61275a565b34801561091057600080fd5b5061043f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561094457600080fd5b50610339610953366004615586565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561098d57600080fd5b50610a5e61099c366004615316565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506000908152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c082015290565b6040516103459190600060e08201905067ffffffffffffffff835116825260ff602084015116602083015260408301511515604083015260608301516001600160a01b038082166060850152806080860151166080850152505060a083015160a083015260c083015160c083015292915050565b348015610ade57600080fd5b5061043f610aed366004615586565b612d4b565b348015610afe57600080fd5b50610317610b0d3660046155fb565b612e39565b348015610b1e57600080fd5b50600a54604080516001600160801b038084168252600160801b909304909216602083015201610345565b6000610b55600a612ec9565b9050336001600160a01b03821614610b90576040516313d2c13360e21b81526001600160a01b03821660048201526024015b60405180910390fd5b610ba5846001600160a01b0316836000612f16565b50604051631a4ca37b60e21b81526001600160a01b0385811660048301526024820184905284811660448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec90606401600060405180830381600087803b158015610c1857600080fd5b505af1158015610c2c573d6000803e3d6000fd5b5050505050505050565b60006001600160e01b031982167f6831a4fd000000000000000000000000000000000000000000000000000000001480610c745750610c7482613025565b92915050565b606060008054610c89906159e7565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb5906159e7565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b5050505050905090565b6000610d17826130c0565b506000908152600460205260409020546001600160a01b031690565b6000610d3e8261180a565b9050806001600160a01b0316836001600160a01b031603610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610b87565b336001600160a01b0382161480610de35750610de38133610953565b610e555760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610b87565b610e5f8383613124565b505050565b610e6c613192565b60408051606088811b6bffffffffffffffffffffffff199081166020808501919091529189901b16603483015282516028818403018152604890920190925280519101206000906000818152600e6020526040902054909150600160401b900463ffffffff1615610ef057604051630793df6360e21b815260040160405180910390fd5b6040518060c00160405280886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5d9190615a21565b60ff1663ffffffff168152602001876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190615a21565b60ff16815263ffffffff8781166020808401919091528782166040808501919091528783166060808601919091528784166080958601526000878152600e8452829020865181549488015188850151938901519789015160a0909901518716600160a01b027fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff998816600160801b02999099167fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff988816600160601b027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff958916600160401b02959095167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff9289166401000000000267ffffffffffffffff19909816939098169290921795909517949094169490941717939093161792909217909155516001600160a01b0380881691908916907ff603a35b218903704c6a49441ff6b83ae5faeba8f4377ed380cb006c34824d649061117890899089908990899063ffffffff948516815292841660208401529083166040830152909116606082015260800190565b60405180910390a350505050505050565b6000611195600a612ec9565b9050336001600160a01b038216146111cb576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b60005b858110156112355761122c6112098888848181106111ee576111ee615a3e565b9050606002018036038101906112049190615a94565b6131ec565b88888481811061121b5761121b615a3e565b905060600201604001356000612f16565b506001016111ce565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f9061128a9087908a908a9089908990600401615b51565b600060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b50505050505050505050565b60008367ffffffffffffffff8111156112df576112df6157ac565b60405190808252806020026020018201604052801561133357816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816112fd5790505b50905060005b8481101561141957600061137f87878481811061135857611358615a3e565b90506040020180360381019061136e9190615b87565b6020810151905160a09190911b0190565b9050604051806040016040528088888581811061139e5761139e615a3e565b9050604002018036038101906113b49190615b87565b8152336000908152600d6020908152604080832086845282529091205491015283518490849081106113e8576113e8615a3e565b602090810291909101810191909152336000908152600d825260408082209382529290915290812055600101611339565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f9061146c903390859088908890600401615ba3565b600060405180830381600087803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050505050505050565b6114af3382613201565b6115115760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b87565b610e5f838383613280565b6000611528600a612ec9565b9050336001600160a01b0382161461155e576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b8115610e5f576115996001600160a01b038416337f000000000000000000000000000000000000000000000000000000000000000085613479565b6115ae836001600160a01b0316600084612f16565b50505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600e600061163985856040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b81526020808201929092526040908101600020815160c081018352905463ffffffff80821683526401000000008204811694830194909452600160401b8104841692820192909252600160601b820483166060820152600160801b820483166080820152600160a01b90910490911660a08201529392505050565b60006116be613501565b905090565b610e5f838383604051806020016040528060008152506121a0565b60006116ea600a612ec9565b9050336001600160a01b03821614611720576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b6040517fca6ce7ea0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ca6ce7ea9061178990339087908790600401615bd8565b600060405180830381600087803b1580156117a357600080fd5b505af11580156117b7573d6000803e3d6000fd5b5050505060005b828110156115ae576118016117de8585848181106111ee576111ee615a3e565b60008686858181106117f2576117f2615a3e565b90506060020160400135612f16565b506001016117be565b6000818152600260205260408120546001600160a01b031680610c745760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b87565b6008805461187c906159e7565b80601f01602080910402602001604051908101604052809291908181526020018280546118a8906159e7565b80156118f55780601f106118ca576101008083540402835291602001916118f5565b820191906000526020600020905b8154815290600101906020018083116118d857829003601f168201915b505050505081565b60006001600160a01b03821661197b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610b87565b506001600160a01b031660009081526003602052604090205490565b61199f613192565b6119a9600061362c565b565b834211156119e5576040517f1a15a3cc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a637f49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad8888611a168161367e565b6040805160208101959095526001600160a01b03909316928401929092526060830152608082015260a0810187905260c001604051602081830303815290604052805190602001206136a5565b90506000611a708761180a565b9050806001600160a01b0316886001600160a01b031603611aa457604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381163b15611bd157604080516020810186905280820185905260f887901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e000000000000000000000000000000000000000000000000000000009092526001600160a01b03831691631626ba7e91611b46918691606501615c04565b602060405180830381865afa158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b879190615c1d565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14611bcc57604051638baa579f60e01b815260040160405180910390fd5b611c0e565b806001600160a01b0316611be7838787876136ed565b6001600160a01b031614611c0e57604051638baa579f60e01b815260040160405180910390fd5b610c2c8888613124565b6060611c74600a3381546001600160801b039081167f760a9a962ae3d184e99c0483cf5684fb3170f47116ca4f445c50209da4f4f90681019290925582546fffffffffffffffffffffffffffffffff1916600190920116179055565b6040517f46a114e200000000000000000000000000000000000000000000000000000000815233906346a114e290611cb29086908690600401615c3a565b6000604051808303816000875af1158015611cd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cf99190810190615c4e565b600a549091506001600160801b0316600103611d4a57600a54600160801b90046001600160801b031615611d405760405163ba329a9b60e01b815260040160405180910390fd5b6000600a55610c74565b600a80546fffffffffffffffffffffffffffffffff1981166001600160801b0391821660001901909116179055610c74565b600060608082808083611db07f00000000000000000000000000000000000000000000000000000000000000006006613715565b611ddb7f00000000000000000000000000000000000000000000000000000000000000006007613715565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b606060018054610c89906159e7565b611e3b3383836137c0565b5050565b6000611e4b600a612ec9565b9050336001600160a01b03821614611e81576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b611e8a8261388e565b6000828152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c0820181905215801590611f365750611f368160200151611f2a6138fe565b60ff9081169116111590565b15611f6d576040517f04aec73b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e6000611fca846060015185608001516040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b815260208082019290925260409081016000908120825160c081018452905463ffffffff80821683526401000000008204811695830195909552600160401b8104851693820193909352600160601b83048416606080830191909152600160801b84048516608080840191909152600160a01b90940490941660a082015292850151918501519293509182918291612063919086613916565b92509250925060008560c0015111801561208057508460c0015181115b1561209e5760405163c985f1b360e01b815260040160405180910390fd5b620f4240828660c001516120b29190615cd2565b6120bc9190615cd2565b846040015163ffffffff16848760a001516120d79190615cd2565b6120e19190615cd2565b1015612119576040517f828d924c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c085015115801561212d575060a0850151155b1561213b5761213b87613ba7565b867f6909f75c94ff7a7648004afe5da77344ce9bbe4de5bdc77cf17cef5319e9eba98660a001518760c00151886020015160405161218f93929190928352602083019190915260ff16604082015260600190565b60405180910390a250505050505050565b6121aa3383613201565b61220c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610b87565b6115ae84848484613c3c565b6000828152600f60209081526040808320815160e081018352815467ffffffffffffffff8116825260ff600160401b8204811695830195909552600160481b81049094161515928101929092526001600160a01b03600160501b9093048316606083015260018101549092166080820152600282015460a082015260039091015460c0820152819081906122b990856122b357600019613cc5565b85613cc5565b9250925092505b9250925092565b60608060008060006122d9600a612ec9565b9050336001600160a01b0382161461230f576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b8861231a338b613201565b612350576040517fc0185c6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061235a6138fe565b90506000600f60008d81526020019081526020016000206040518060e00160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900460ff1660ff1660ff1681526020016000820160099054906101000a900460ff1615151515815260200160008201600a9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016001820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016002820154815260200160038201548152505090508a600f60008e81526020019081526020016000206002018190555061248a6000826020015160ff90811691161090565b80156124a05750602081015160ff808416911611155b156124e757898160c00151146124e2576040517fa0d64f8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125d5565b602081015160ff166124fd5760ff821660208201525b60008c8152600f602052604090206003018a9055891561251d578861251f565b815b60008d8152600f6020908152604091829020805460ff948516600160401b90810268ff00000000000000001983168117808555865160e08101885267ffffffffffffffff92831692909416919091178352908104861693820193909352600160481b83049094161515928401929092526001600160a01b03600160501b909104811660608401526001820154166080830152600281015460a08301526003015460c08201526125cf908290613ff1565b90985096505b60005b87518110156126345761262b6126068983815181106125f9576125f9615a3e565b60200260200101516131ec565b60008a848151811061261a5761261a615a3e565b602002602001015160200151612f16565b506001016125d8565b5060005b88518110156126875761267e6126598a83815181106125f9576125f9615a3e565b8a838151811061266b5761266b615a3e565b6020026020010151602001516000612f16565b50600101612638565b506126a481606001516001600160a01b03168c8360a00151612f16565b95506126c281608001516001600160a01b03168260c001518c612f16565b600003945050506126d281614425565b5050945094509450949050565b60006126eb838361448a565b159392505050565b60606126fe826130c0565b6000612708614505565b905060008151116127285760405180602001604052806000815250612753565b8061273284614514565b604051602001612743929190615ce9565b6040516020818303038152906040525b9392505050565b60008060008061276a600a612ec9565b9050336001600160a01b038216146127a0576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b6000868152600f6020526040902054600160481b900460ff166127d65760405163ba329a9b60e01b815260040160405180910390fd5b6000868152600f6020908152604091829020825160e081018452815467ffffffffffffffff8116825260ff600160401b8204811694830194909452600160481b81049093161515938101939093526001600160a01b03600160501b9092048216606084015260018101549091166080830152600281015460a08301526003015460c0820152612872818761286c57600019613cc5565b87613cc5565b9196509450925084158015612885575083155b156128bc576040517f6992224600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006128c66145b4565b905060006128df83602001518360ff9081169116101590565b6128ea576000612900565b60208301516128fc9060ff16836145bf565b6001015b60a084018051899003905260c0840180518890039081905260ff91909116915060000361296b5761293560ff831660016145bf565b60ff16602084810182905260008b8152600f90915260409020805468ff00000000000000001916600160401b9092029190911790555b60a083015160008a8152600f60205260409020600281019190915560c084015160039091015560608301516129aa906001600160a01b03168689612f16565b506060830151604051631a4ca37b60e21b81526001600160a01b039182166004820152602481018790527f0000000000000000000000000000000000000000000000000000000000000000821660448201527f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec90606401600060405180830381600087803b158015612a4457600080fd5b505af1158015612a58573d6000803e3d6000fd5b50505050612a7583608001516001600160a01b0316876000612f16565b508015612c9f576000612a878a61180a565b905060008267ffffffffffffffff811115612aa457612aa46157ac565b604051908082528060200260200182016040528015612af857816020015b6040805160808101825260009181018281526060820183905281526020810191909152815260200190600190039081612ac25790505b50905060005b83811015612b98576080860151612b7390612b1c60ff8816846145cb565b8b604080516080810182526000918101828152606082018390528152602081019190915250604080516080810182526001600160a01b039490941690840190815260ff929092166060840152908252602082015290565b828281518110612b8557612b85615a3e565b6020908102919091010152600101612afe565b50604051633ee44b0f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633ee44b0f90612be79085908590600401615d18565b600060405180830381600087803b158015612c0157600080fd5b505af1925050508015612c12575060015b612c9c5760005b83811015612c9a57818181518110612c3357612c33615a3e565b602002602001015160200151600d6000856001600160a01b03166001600160a01b031681526020019081526020016000206000612c7b8585815181106125f9576125f9615a3e565b8152602081019190915260400160002080549091019055600101612c19565b505b50505b604080518881526020810188905290810186905233908a907fe5fa9a508c78f7cf1e7d0fb90c4b5aae238aa0e336c5ca713d86f74d008b397f9060600160405180910390a3887f6909f75c94ff7a7648004afe5da77344ce9bbe4de5bdc77cf17cef5319e9eba98460a001518560c001518660200151604051612d3893929190928352602083019190915260ff16604082015260600190565b60405180910390a2505050509250925092565b600080612d58600a612ec9565b9050336001600160a01b03821614612d8e576040516313d2c13360e21b81526001600160a01b0382166004820152602401610b87565b612d98848461448a565b15612db657604051630793df6360e21b815260040160405180910390fd5b6009805460018082019092556000818152600f6020526040902080547fffff0000000000000000000000000000000000000000ffffffffffffffffffff16600160501b6001600160a01b0389811691909102919091178255920180546001600160a01b031916928616929092179091559150612e3233836145d7565b5092915050565b612e41613192565b6001600160a01b038116612ebd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b87565b612ec68161362c565b50565b8054600090610c7490612ee7906001906001600160801b0316615d54565b6001600160801b03167f760a9a962ae3d184e99c0483cf5684fb3170f47116ca4f445c50209da4f4f906015490565b6000818303612f2757506000612753565b6000612f33600a612ec9565b6001600160a01b0381166000908152600b6020908152604080832089845290915290205490915083851115612f7457612f6d848603614627565b9250612f85565b612f7f858503614627565b60000392505b6000612f918483615d74565b905080600003612fc757600a80546000196001600160801b03600160801b80840482169290920181169091029116179055612ff6565b81600003612ff657600a805460016001600160801b03600160801b808404821692909201811690910291161790555b6001600160a01b03929092166000908152600b6020908152604080832098835297905295909520559392505050565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061308857506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b80610c7457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610c74565b6000818152600260205260409020546001600160a01b0316612ec65760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610b87565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906131598261180a565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600c546001600160a01b031633146119a95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b87565b80516020810151905160009160a01b01610c74565b60008061320d8361180a565b9050806001600160a01b0316846001600160a01b0316148061325457506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806132785750836001600160a01b031661326d84610d0c565b6001600160a01b0316145b949350505050565b826001600160a01b03166132938261180a565b6001600160a01b0316146132f75760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b87565b6001600160a01b0382166133725760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610b87565b826001600160a01b03166133858261180a565b6001600160a01b0316146133e95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610b87565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526115ae9085906146c3565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561355a57507f000000000000000000000000000000000000000000000000000000000000000046145b1561358457507f000000000000000000000000000000000000000000000000000000000000000090565b6116be604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600c80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000818152600f60205260408120613695906147ab565b67ffffffffffffffff1692915050565b6000610c746136b2613501565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006136fe878787876147f2565b9150915061370b816148b6565b5095945050505050565b606060ff831461372f5761372883614a1b565b9050610c74565b81805461373b906159e7565b80601f0160208091040260200160405190810160405280929190818152602001828054613767906159e7565b80156137b45780601f10613789576101008083540402835291602001916137b4565b820191906000526020600020905b81548152906001019060200180831161379757829003601f168201915b50505050509050610c74565b816001600160a01b0316836001600160a01b0316036138215760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610b87565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600f6020526040902054600160481b900460ff16156138af5750565b6000818152600f60205260409020805469ff0000000000000000001916600160481b17905550600a80546000196001600160801b03600160801b80840482169290920181169091029116179055565b60006116be600161390d6145b4565b60ff16906145bf565b8051602080830151604080516003808252608082019092526000948594859463ffffffff92831694921692859290918201606080368337019050509050888160008151811061396757613967615a3e565b60200260200101906001600160a01b031690816001600160a01b031681525050878160018151811061399b5761399b615a3e565b60200260200101906001600160a01b031690816001600160a01b0316815250506000816002815181106139d0576139d0615a3e565b6001600160a01b0392831660209182029290920101526040517f9d23d9f20000000000000000000000000000000000000000000000000000000081526000917f00000000000000000000000000000000000000000000000000000000000000001690639d23d9f290613a46908590600401615d9c565b600060405180830381865afa158015613a63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613a8b9190810190615de9565b905080600181518110613aa057613aa0615a3e565b602002602001015183601203600a0a82600281518110613ac257613ac2615a3e565b60200260200101517f00000000000000000000000000000000000000000000000000000000000000000281613af957613af9615e83565b0481613b0757613b07615e83565b04945083831115613b5857838303600a0a81600081518110613b2b57613b2b615a3e565b602002602001015102965080600181518110613b4957613b49615a3e565b60200260200101519550613b9a565b80600081518110613b6b57613b6b615a3e565b60200260200101519650828403600a0a81600181518110613b8e57613b8e615a3e565b60200260200101510295505b5050505093509350939050565b6000613bb28261180a565b9050613bbd8261180a565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b613c47848484613280565b613c5384848484614a5a565b6115ae5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610b87565b600080600080600e6000613d26886060015189608001516040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b815260208082019290925260409081016000908120825160c081018452905463ffffffff80821683526401000000008204811695830195909552600160401b8104851693820193909352600160601b83048416606080830191909152600160801b84048516608080840191909152600160a01b90940490941660a082015292890151918901519293509182918291613dbf919086613916565b92509250925042613dd68a6020015160ff16614bae565b11613e60578860c001518810613df2578860c001519550613e37565b8860c001518189011115613e3357808960c001511015613e255760405163c985f1b360e01b815260040160405180910390fd5b808960c00151039550613e37565b8795505b613e59620f424083880202856060015163ffffffff16620f4240038502614bb9565b9650613fc5565b60a089015160c08a0151604086015191850291908402620f4240029063ffffffff1682028111613ea05760008060009850985098505050505050506122c0565b613ed58660a0015163ffffffff16830282038760a0015163ffffffff16886060015163ffffffff16620f424003038702614bb9565b9850620f424084876060015163ffffffff16620f424003878c020281613efd57613efd615e83565b0481613f0b57613f0b615e83565b60c08d01519190049850838111613f4257808b1015613f3d5760405163c985f1b360e01b815260040160405180910390fd5b613f7e565b80891180613f51575088840181105b15613f7157808b1015613f3d57613f6a8b858303614bf0565b9050613f7e565b613f7b8b8a614bf0565b90505b888114613fad57613fa7620f424086830202886060015163ffffffff16620f4240038802614bb9565b99508098505b8b60a001518a1115613fc1578b60a0015199505b5050505b620f4240846080015163ffffffff16880281613fe357613fe3615e83565b049450505050509250925092565b60608082606001516001600160a01b031684606001516001600160a01b0316148015614036575082608001516001600160a01b031684608001516001600160a01b0316145b801561405157508251845167ffffffffffffffff9081169116145b614087576040517f84991e9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006140916138fe565b90506140a781856020015160ff90811691161190565b806140bc5750602085015160ff908116908216115b156140f3576040517f47a5b25b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208401516000906141089060ff16836145bf565b60ff169050600061412983886020015160ff166145bf90919063ffffffff16565b60ff169050600061413a8383614bf0565b90508760c001518760c00151111561415657808203915061417b565b8760c001518760c00151101561417057808303925061417b565b808303925080820391505b5060008267ffffffffffffffff811115614197576141976157ac565b6040519080825280602002602001820160405280156141eb57816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816141b55790505b50905060008267ffffffffffffffff811115614209576142096157ac565b60405190808252806020026020018201604052801561425d57816020015b60408051608081018252600091810182815260608201839052815260208101919091528152602001906001900390816142275790505b5090506000935060009250600061428c8661390d8c602001518c6020015160ff16614c0690919063ffffffff16565b60ff1690508560005b82811015614411576142ab60ff831660016145cb565b915060006142c38c602001518460ff90811691161090565b6142d1578b60c001516142d4565b60005b905060006142ec8e602001518560ff90811691161090565b6142fa578d60c001516142fd565b60005b905080821115614385576080808f015160408051808401825260008183018181526060808401839052908352602092830191909152825194850183526001600160a01b0390931691840191825260ff881692840192909252825282840390820152875160018b019a8991811061437557614375615a3e565b6020026020010181905250614407565b80821015614407576080808f015160408051808401825260008183018181526060808401839052908352602092830191909152825194850183526001600160a01b0390931691840191825260ff881692840192909252825283830390820152865160018a0199889181106143fb576143fb615a3e565b60200260200101819052505b5050600101614295565b5092975090955050505050505b9250929050565b6000818152600f6020526040902054600160481b900460ff166144455750565b6000908152600f60205260409020805469ff00000000000000000019169055600a8054600160801b8082046001600160801b0390811660010181169091029116179055565b6000600e60006144df85856040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260009060480160405160208183030381529060405280519060200120905092915050565b8152602081019190915260400160002054600160401b900463ffffffff16159392505050565b606060088054610c89906159e7565b6060600061452183614c1b565b600101905060008167ffffffffffffffff811115614541576145416157ac565b6040519080825280601f01601f19166020018201604052801561456b576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461457557509392505050565b60006116be42614cfd565b60006127538284615e99565b60006127538284615eb2565b6145e18282614deb565b6000908152600f60205260409020805469ff0000000000000000001916905550600a8054600160801b8082046001600160801b0390811660010181169091029116179055565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156146bf5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610b87565b5090565b6000614718826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614f769092919063ffffffff16565b90508051600014806147395750808060200190518101906147399190615ecb565b610e5f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b87565b805460009067ffffffffffffffff1682826147c583615ee8565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561482957506000905060036148ad565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561487d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166148a6576000600192509250506148ad565b9150600090505b94509492505050565b60008160048111156148ca576148ca615f0f565b036148d25750565b60018160048111156148e6576148e6615f0f565b036149335760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b87565b600281600481111561494757614947615f0f565b036149945760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b87565b60038160048111156149a8576149a8615f0f565b03612ec65760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b87565b60606000614a2883614f85565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60006001600160a01b0384163b15614ba657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290614a9e903390899088908890600401615f25565b6020604051808303816000875af1925050508015614ad9575060408051601f3d908101601f19168201909252614ad691810190615c1d565b60015b614b8c573d808015614b07576040519150601f19603f3d011682016040523d82523d6000602084013e614b0c565b606091505b508051600003614b845760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610b87565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050613278565b506001613278565b6000610c7482614fc6565b60008215614be75781614bcd600185615f61565b614bd79190615f74565b614be2906001615f96565b612753565b50600092915050565b6000818310614bff5781612753565b5090919050565b600060ff80831690841611614bff5781612753565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310614c64577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310614c90576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614cae57662386f26fc10000830492506010015b6305f5e1008310614cc6576305f5e100830492506008015b6127108310614cda57612710830492506004015b60648310614cec576064830492506002015b600a8310610c745760010192915050565b600080620151808304905080622649658101600062023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281614d6257614d62615e83565b059050600b8105935083600c028160020103905083826031850360640201019150600060066001836107b28603600c02010381614da157614da1615e83565b04905060ff811115614ddf576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b6001600160a01b038216614e415760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610b87565b6000818152600260205260409020546001600160a01b031615614ea65760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b87565b6000818152600260205260409020546001600160a01b031615614f0b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610b87565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606132788484600085615098565b600060ff8216601f811115610c74576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660ff831681020181600c82046107b20190506004600c8381614fee57614fee615e83565b06901b91506004810615801561500657506064810615155b8061501357506101908106155b1561503c5779016e014f0131011200f400d500b600980079005b003c001f000090911c9061505c565b79016d014e0130011100f300d400b500970078005a003b001f000090911c905b6201518061019061064019830104606461076c1984010460046107b0198501046107b2850361016d028661ffff16010103010292505050919050565b6060824710156151105760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b87565b600080866001600160a01b0316858760405161512c9190615fa9565b60006040518083038185875af1925050503d8060008114615169576040519150601f19603f3d011682016040523d82523d6000602084013e61516e565b606091505b509150915061517f8783838761518a565b979650505050505050565b606083156151f95782516000036151f2576001600160a01b0385163b6151f25760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b87565b5081613278565b613278838381511561520e5781518083602001fd5b8060405162461bcd60e51b8152600401610b879190615303565b80356001600160a01b038116811461523f57600080fd5b919050565b60008060006060848603121561525957600080fd5b61526284615228565b925061527060208501615228565b9150604084013590509250925092565b6001600160e01b031981168114612ec657600080fd5b6000602082840312156152a857600080fd5b813561275381615280565b60005b838110156152ce5781810151838201526020016152b6565b50506000910152565b600081518084526152ef8160208601602086016152b3565b601f01601f19169290920160200192915050565b60208152600061275360208301846152d7565b60006020828403121561532857600080fd5b5035919050565b6000806040838503121561534257600080fd5b61534b83615228565b946020939093013593505050565b803563ffffffff8116811461523f57600080fd5b60008060008060008060c0878903121561538657600080fd5b61538f87615228565b955061539d60208801615228565b94506153ab60408801615359565b93506153b960608801615359565b92506153c760808801615359565b91506153d560a08801615359565b90509295509295509295565b60008083601f8401126153f357600080fd5b50813567ffffffffffffffff81111561540b57600080fd5b60208301915083602060608302850101111561441e57600080fd5b60008083601f84011261543857600080fd5b50813567ffffffffffffffff81111561545057600080fd5b60208301915083602082850101111561441e57600080fd5b60008060008060006060868803121561548057600080fd5b853567ffffffffffffffff8082111561549857600080fd5b6154a489838a016153e1565b90975095508591506154b860208901615228565b945060408801359150808211156154ce57600080fd5b506154db88828901615426565b969995985093965092949392505050565b6000806000806040858703121561550257600080fd5b843567ffffffffffffffff8082111561551a57600080fd5b818701915087601f83011261552e57600080fd5b81358181111561553d57600080fd5b8860208260061b850101111561555257600080fd5b60209283019650945090860135908082111561556d57600080fd5b5061557a87828801615426565b95989497509550505050565b6000806040838503121561559957600080fd5b6155a283615228565b91506155b060208401615228565b90509250929050565b600080602083850312156155cc57600080fd5b823567ffffffffffffffff8111156155e357600080fd5b6155ef858286016153e1565b90969095509350505050565b60006020828403121561560d57600080fd5b61275382615228565b60ff81168114612ec657600080fd5b60008060008060008060c0878903121561563e57600080fd5b61564787615228565b95506020870135945060408701359350606087013561566581615616565b9598949750929560808101359460a0909101359350915050565b6000806020838503121561569257600080fd5b823567ffffffffffffffff8111156156a957600080fd5b6155ef85828601615426565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526156f160e084018a6152d7565b8381036040850152615703818a6152d7565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561575557835183529284019291840191600101615739565b50909c9b505050505050505050505050565b8015158114612ec657600080fd5b6000806040838503121561578857600080fd5b61579183615228565b915060208301356157a181615767565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156157e5576157e56157ac565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715615814576158146157ac565b604052919050565b600067ffffffffffffffff821115615836576158366157ac565b50601f01601f191660200190565b6000806000806080858703121561585a57600080fd5b61586385615228565b935061587160208601615228565b925060408501359150606085013567ffffffffffffffff81111561589457600080fd5b8501601f810187136158a557600080fd5b80356158b86158b38261581c565b6157eb565b8181528860208385010111156158cd57600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561590257600080fd5b50508035926020909101359150565b6000806000806080858703121561592757600080fd5b843593506020850135925060408501359150606085013561594781615616565b939692955090935050565b600081518084526020808501945080840160005b838110156159a3578151805180516001600160a01b0316895284015160ff1684890152830151604088015260609096019590820190600101615966565b509495945050505050565b6080815260006159c16080830187615952565b82810360208401526159d38187615952565b604084019590955250506060015292915050565b600181811c908216806159fb57607f821691505b602082108103615a1b57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215615a3357600080fd5b815161275381615616565b634e487b7160e01b600052603260045260246000fd5b600060408284031215615a6657600080fd5b615a6e6157c2565b9050615a7982615228565b81526020820135615a8981615616565b602082015292915050565b600060608284031215615aa657600080fd5b615aae6157c2565b615ab88484615a54565b815260409290920135602083015250919050565b8183526000602080850194508260005b858110156159a3576001600160a01b03615af583615228565b16875282820135615b0581615616565b60ff16878401526040828101359088015260609687019690910190600101615adc565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b0386168152606060208201526000615b74606083018688615acc565b8281036040840152614ddf818587615b28565b600060408284031215615b9957600080fd5b6127538383615a54565b6001600160a01b0385168152606060208201526000615bc56060830186615952565b828103604084015261517f818587615b28565b6001600160a01b0384168152604060208201526000615bfb604083018486615acc565b95945050505050565b82815260406020820152600061327860408301846152d7565b600060208284031215615c2f57600080fd5b815161275381615280565b602081526000613278602083018486615b28565b600060208284031215615c6057600080fd5b815167ffffffffffffffff811115615c7757600080fd5b8201601f81018413615c8857600080fd5b8051615c966158b38261581c565b818152856020838501011115615cab57600080fd5b615bfb8260208301602086016152b3565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c7457610c74615cbc565b60008351615cfb8184602088016152b3565b835190830190615d0f8183602088016152b3565b01949350505050565b6001600160a01b0383168152606060208201526000615d3a6060830184615952565b828103604084015260008152602081019150509392505050565b6001600160801b03828116828216039080821115612e3257612e32615cbc565b8082018281126000831280158216821582161715615d9457615d94615cbc565b505092915050565b6020808252825182820181905260009190848201906040850190845b81811015615ddd5783516001600160a01b031683529284019291840191600101615db8565b50909695505050505050565b60006020808385031215615dfc57600080fd5b825167ffffffffffffffff80821115615e1457600080fd5b818501915085601f830112615e2857600080fd5b815181811115615e3a57615e3a6157ac565b8060051b9150615e4b8483016157eb565b8181529183018401918481019088841115615e6557600080fd5b938501935b83851015614ddf57845182529385019390850190615e6a565b634e487b7160e01b600052601260045260246000fd5b60ff8281168282160390811115610c7457610c74615cbc565b60ff8181168382160190811115610c7457610c74615cbc565b600060208284031215615edd57600080fd5b815161275381615767565b600067ffffffffffffffff808316818103615f0557615f05615cbc565b6001019392505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152615f5760808301846152d7565b9695505050505050565b81810381811115610c7457610c74615cbc565b600082615f9157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c7457610c74615cbc565b60008251615fbb8184602087016152b3565b919091019291505056fea26469706673582212209048132fa59b170ab434aa5f45b56d0157fb5d5a73f04f46aca942668ce3e7f064736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "eip712Domain()": {
        "details": "See {EIP-5267}. _Available since v4.9._"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3094,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3096,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3100,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3104,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3108,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3114,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5536,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 5538,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 20672,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "baseURI",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 20676,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "nextId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 20679,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_lockData",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(LockData)20537_storage"
      },
      {
        "astId": 20686,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "assetDelta",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 7,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 11330,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_couponOwed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 11335,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_loanConfiguration",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(LoanConfiguration)17523_storage)"
      },
      {
        "astId": 11340,
        "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
        "label": "_positionMap",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(LoanPosition)20251_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(LoanConfiguration)17523_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ILoanPositionManagerTypes.LoanConfiguration)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanConfiguration)17523_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_struct(LoanPosition)20251_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanPosition)20251_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LoanConfiguration)17523_storage": {
        "encoding": "inplace",
        "label": "struct ILoanPositionManagerTypes.LoanConfiguration",
        "members": [
          {
            "astId": 17512,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "collateralDecimal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17514,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "debtDecimal",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17516,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "liquidationThreshold",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17518,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "liquidationFee",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17520,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "liquidationProtocolFee",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17522,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "liquidationTargetLtv",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(LoanPosition)20251_storage": {
        "encoding": "inplace",
        "label": "struct LoanPosition",
        "members": [
          {
            "astId": 20237,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20240,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "expiredWith",
            "offset": 8,
            "slot": "0",
            "type": "t_userDefinedValueType(Epoch)19673"
          },
          {
            "astId": 20242,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "isSettled",
            "offset": 9,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20244,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "collateralToken",
            "offset": 10,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20246,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "debtToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 20248,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 20250,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "debtAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LockData)20537_storage": {
        "encoding": "inplace",
        "label": "struct LockData",
        "members": [
          {
            "astId": 20533,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "length",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 20536,
            "contract": "contracts/LoanPositionManager.sol:LoanPositionManager",
            "label": "nonzeroDeltaCount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_userDefinedValueType(Epoch)19673": {
        "encoding": "inplace",
        "label": "Epoch",
        "numberOfBytes": "1"
      }
    }
  }
}