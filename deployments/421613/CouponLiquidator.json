{
  "address": "0x40bd43758FfcEDB094d1F12AAB3e8323e7FEbeFb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loanPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CollateralSwapFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "positionLockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7e32bfe709cde95f7bdbbee7561abb476b8d9c35c8282ccf2c8189638d596cae",
  "receipt": {
    "to": null,
    "from": "0xa0E3174f4D222C5CBf705A138C6a9369935EeD81",
    "contractAddress": "0x40bd43758FfcEDB094d1F12AAB3e8323e7FEbeFb",
    "transactionIndex": 1,
    "gasUsed": "1231306",
    "logsBloom": "0x
    "blockHash": "0x669bd784df6a84554d99deb2a556cd1b0d64b5cab22dc3515513215174b428cc",
    "transactionHash": "0x7e32bfe709cde95f7bdbbee7561abb476b8d9c35c8282ccf2c8189638d596cae",
    "logs": [],
    "blockNumber": 56001893,
    "cumulativeGasUsed": "1231306",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4c856a264EE234e3DcFDEecEcfFC34ec203dF4f2",
    "0xbe83C53499C676dAB038db0E2CAd3E69a3d5CdFC",
    "0x4284186b053ACdBA28E8B26E99475d891533086a"
  ],
  "numDeployments": 1,
  "solcInputHash": "ea8b58e8a7e8e0821cfdd78d9f7388f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CollateralSwapFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"positionLockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CouponLiquidator.sol\":\"CouponLiquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/CouponLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {LoanPosition} from \\\"./libraries/LoanPosition.sol\\\";\\nimport {IWETH9} from \\\"./external/weth/IWETH9.sol\\\";\\nimport {ISubstitute} from \\\"./interfaces/ISubstitute.sol\\\";\\nimport {ILoanPositionManager} from \\\"./interfaces/ILoanPositionManager.sol\\\";\\nimport {IPositionLocker} from \\\"./interfaces/IPositionLocker.sol\\\";\\nimport {ICouponLiquidator} from \\\"./interfaces/ICouponLiquidator.sol\\\";\\n\\ncontract CouponLiquidator is ICouponLiquidator, IPositionLocker {\\n    using SafeERC20 for IERC20;\\n\\n    ILoanPositionManager private immutable _loanPositionManager;\\n    address private immutable _router;\\n    IWETH9 internal immutable _weth;\\n\\n    constructor(address loanPositionManager, address router, address weth) {\\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\\n        _router = router;\\n        _weth = IWETH9(weth);\\n    }\\n\\n    function positionLockAcquired(bytes memory data) external returns (bytes memory) {\\n        (uint256 positionId, uint256 swapAmount, bytes memory swapData) = abi.decode(data, (uint256, uint256, bytes));\\n\\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\\n        address inToken = ISubstitute(position.collateralToken).underlyingToken();\\n        address outToken = ISubstitute(position.debtToken).underlyingToken();\\n        _loanPositionManager.withdrawToken(position.collateralToken, address(this), swapAmount);\\n        _burnAllSubstitute(position.collateralToken, address(this));\\n        if (inToken == address(_weth)) {\\n            _weth.deposit{value: swapAmount}();\\n        }\\n        _swap(inToken, swapAmount, swapData);\\n\\n        (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount) =\\n            _loanPositionManager.liquidate(positionId, IERC20(outToken).balanceOf(address(this)));\\n\\n        uint256 collateralAmount = liquidationAmount - protocolFeeAmount - swapAmount;\\n\\n        if (collateralAmount > 0) {\\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), collateralAmount);\\n            _burnAllSubstitute(position.collateralToken, address(this));\\n            if (inToken == address(_weth)) {\\n                _weth.deposit{value: collateralAmount}();\\n            }\\n        }\\n\\n        IERC20(outToken).approve(position.debtToken, repayAmount);\\n        ISubstitute(position.debtToken).mint(repayAmount, address(this));\\n        IERC20(position.debtToken).approve(address(_loanPositionManager), repayAmount);\\n        _loanPositionManager.depositToken(position.debtToken, repayAmount);\\n\\n        return abi.encode(inToken, outToken);\\n    }\\n\\n    function liquidate(uint256 positionId, uint256 swapAmount, bytes memory swapData, address feeRecipient) external {\\n        bytes memory lockData = abi.encode(positionId, swapAmount, swapData);\\n        (address collateralToken, address debtToken) =\\n            abi.decode(_loanPositionManager.lock(lockData), (address, address));\\n\\n        uint256 collateralAmount = IERC20(collateralToken).balanceOf(address(this));\\n        if (collateralAmount > 0) {\\n            IERC20(collateralToken).safeTransfer(feeRecipient, collateralAmount);\\n        }\\n\\n        uint256 debtAmount = IERC20(debtToken).balanceOf(address(this));\\n        if (debtAmount > 0) {\\n            IERC20(debtToken).safeTransfer(feeRecipient, debtAmount);\\n        }\\n    }\\n\\n    function _swap(address inToken, uint256 inAmount, bytes memory swapData) internal {\\n        IERC20(inToken).approve(_router, inAmount);\\n        (bool success, bytes memory result) = _router.call(swapData);\\n        if (!success) revert CollateralSwapFailed(string(result));\\n        IERC20(inToken).approve(_router, 0);\\n    }\\n\\n    function _burnAllSubstitute(address substitute, address to) internal {\\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\\n        if (leftAmount == 0) return;\\n        ISubstitute(substitute).burn(leftAmount, to);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7541d80157677619c54e668aa3a3a445b26b63ad6aeeaf02335a42506eb93711\",\"license\":\"-\"},\"contracts/external/weth/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x2ee71d25c3fbf9b954291eb2c76b1149fc9cf6456944019adbb6b051ff1bda11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICouponLiquidator {\\n    error CollateralSwapFailed(string reason);\\n\\n    function liquidate(uint256 positionId, uint256 swapAmount, bytes memory swapData, address feeRecipient) external;\\n}\\n\",\"keccak256\":\"0x1537776dfd3413624806561a7c15bbb84c61e4e23591e52e86ec533111a684e2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6970e2181dc25efdcd17b3df6ff9be05bfdc421d9cdb691976c4621e8e0aaae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILoanPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {LoanPosition} from \\\"../libraries/LoanPosition.sol\\\";\\n\\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\\n    // liquidationFee = liquidator fee + protocol fee\\n    // debt = collateral * (1 - liquidationFee)\\n    struct LoanConfiguration {\\n        uint32 collateralDecimal;\\n        uint32 debtDecimal;\\n        uint32 liquidationThreshold;\\n        uint32 liquidationFee;\\n        uint32 liquidationProtocolFee;\\n        uint32 liquidationTargetLtv;\\n    }\\n\\n    event SetLoanConfiguration(\\n        address indexed collateral,\\n        address indexed debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    );\\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\\n    event LiquidatePosition(\\n        uint256 indexed positionId,\\n        address indexed liquidator,\\n        uint256 liquidationAmount,\\n        uint256 repayAmount,\\n        uint256 protocolFeeAmount\\n    );\\n    event SetTreasury(address indexed newTreasury);\\n\\n    error TooSmallDebtLeft();\\n    error InvalidAccess();\\n    error FullRepaymentRequired();\\n    error LiquidationThreshold();\\n    error InvalidPair();\\n    error InvalidConfiguration();\\n    error UnableToLiquidate();\\n}\\n\\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\\n    function treasury() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function minDebtValueInEth() external view returns (uint256);\\n\\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\\n\\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\\n\\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\\n\\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\\n\\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        view\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\\n        external\\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\\n\\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\\n\\n    function setLoanConfiguration(\\n        address collateral,\\n        address debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    ) external;\\n\\n    function setTreasury(address newTreasury) external;\\n}\\n\",\"keccak256\":\"0x9a7457f1c0ef0c959bc942c71bf9a2ff1699ba32a56d395e05f9d28787633317\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xf4e8029d7b7f2be9318bb10e9e0a184b0d47954d37bf9d2cdbca6560d076ac40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISubstitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubstitute {\\n    event SetTreasury(address indexed newTreasury);\\n    event Claim(address indexed treasury, uint256 adminYield);\\n\\n    error InvalidToken();\\n    error ValueTransferFailed();\\n\\n    function treasury() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function claim() external;\\n\\n    function mintableAmount() external view returns (uint256);\\n\\n    function burnableAmount() external view returns (uint256);\\n\\n    function setTreasury(address newTreasury) external;\\n\\n    function withdrawLostToken(address token, address recipient) external;\\n}\\n\",\"keccak256\":\"0xa6d6ff8684f2d6b02d5a1a249a48bb07d39333f68e4d93e64ed551f4bdbf93f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xe3bd591859541e734e6b18f7c742efff2ea320805345b8dcf9597ea3e778d076\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint16 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d6688cd9d666140bf81ed569d5c41174cb89e06f108568a591b1cab2a1371b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\ntype Epoch is uint16;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint16 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1) + 1;\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint16).max) revert EpochOverflow();\\n            return uint16(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cd1bac5f8222900e18564e78b008420877383d46684e9c79b926b5cf4a7535b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LoanPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct LoanPosition {\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    address collateralToken;\\n    address debtToken;\\n    uint256 collateralAmount;\\n    uint256 debtAmount;\\n}\\n\\nlibrary LoanPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\\n    {\\n        if (\\n            !(\\n                oldPosition.collateralToken == newPosition.collateralToken\\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\\n            )\\n        ) revert UnmatchedPosition();\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n\\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\\n                mintCouponsLength -= minCount;\\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\\n                burnCouponsLength -= minCount;\\n            } else {\\n                burnCouponsLength -= minCount;\\n                mintCouponsLength -= minCount;\\n            }\\n        }\\n\\n        mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCoupons = new Coupon[](burnCouponsLength);\\n        mintCouponsLength = 0;\\n        burnCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\\n                if (newAmount > oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9918038441dfb9a7b5cfd8e99317abeb37b67caa5d5df0235a3abe21571f923\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620016903803806200169083398101604081905262000034916200006f565b6001600160a01b0392831660805290821660a0521660c052620000b9565b80516001600160a01b03811681146200006a57600080fd5b919050565b6000806000606084860312156200008557600080fd5b620000908462000052565b9250620000a06020850162000052565b9150620000b06040850162000052565b90509250925092565b60805160a05160c05161155b62000135600039600081816102b7015281816102f00152818161054e0152610587015260008181610b7701528181610bf90152610ccf01526000818160b60152818161024b01528181610392015281816104e00152818161070f015281816107d101526108a4015261155b6000f3fe60806040526004361061002d5760003560e01c806346a114e214610039578063a44a70fa1461006f57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004611155565b610091565b60405161006691906111da565b60405180910390f35b34801561007b57600080fd5b5061008f61008a36600461120c565b610877565b005b60606000806000848060200190518101906100ac91906112b4565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eb02c301856040518263ffffffff1660e01b815260040161010291815260200190565b60e060405180830381865afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190611336565b9050600081606001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ad91906113cc565b9050600082608001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021791906113cc565b60608401516040516301e3366760e01b81526001600160a01b039182166004820152306024820152604481018890529192507f000000000000000000000000000000000000000000000000000000000000000016906301e3366790606401600060405180830381600087803b15801561028f57600080fd5b505af11580156102a3573d6000803e3d6000fd5b505050506102b5836060015130610a66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610363577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b50505050505b61036e828686610b60565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163d296d1f1918c91908816906370a0823190602401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a91906113e9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260248201526044016060604051808303816000875af1158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190611402565b9194509250905060008861049d8386611430565b6104a79190611430565b905080156105fa5760608701516040516301e3366760e01b81526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b5050505061054c876060015130610a66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316036105fa577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b50505050505b608087015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529086169063095ea7b3906044016020604051808303816000875af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611457565b5060808701516040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b03909116906394bf804d90604401600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b50505050608087015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190611457565b5060808701516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b5050505085856040516020016108579291906001600160a01b0392831681529116602082015260400190565b6040516020818303038152906040529a5050505050505050505050919050565b600084848460405160200161088e93929190611472565b60405160208183030381529060405290506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381548319846040518263ffffffff1660e01b81526004016108ee91906111da565b6000604051808303816000875af115801561090d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610935919081019061149a565b80602001905181019061094891906114cf565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b891906113e9565b905080156109d4576109d46001600160a01b0384168683610d53565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906113e9565b90508015610a5b57610a5b6001600160a01b0384168783610d53565b505050505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad191906113e9565b905080600003610ae057505050565b6040517ffcd3533c000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905284169063095ea7b3906044016020604051808303816000875af1158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf39190611457565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683604051610c2f9190611509565b6000604051808303816000865af19150503d8060008114610c6c576040519150601f19603f3d011682016040523d82523d6000602084013e610c71565b606091505b509150915081610cb857806040517feff88414000000000000000000000000000000000000000000000000000000008152600401610caf91906111da565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015286169063095ea7b3906044016020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611457565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610dd3908490610dd8565b505050565b6000610e2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ec09092919063ffffffff16565b9050805160001480610e4e575080806020019051810190610e4e9190611457565b610dd35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610caf565b6060610ecf8484600085610ed7565b949350505050565b606082471015610f4f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610caf565b600080866001600160a01b03168587604051610f6b9190611509565b60006040518083038185875af1925050503d8060008114610fa8576040519150601f19603f3d011682016040523d82523d6000602084013e610fad565b606091505b5091509150610fbe87838387610fc9565b979650505050505050565b60608315611038578251600003611031576001600160a01b0385163b6110315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610caf565b5081610ecf565b610ecf838381511561104d5781518083602001fd5b8060405162461bcd60e51b8152600401610caf91906111da565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156110a0576110a0611067565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110cf576110cf611067565b604052919050565b600067ffffffffffffffff8211156110f1576110f1611067565b50601f01601f191660200190565b600082601f83011261111057600080fd5b813561112361111e826110d7565b6110a6565b81815284602083860101111561113857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561116757600080fd5b813567ffffffffffffffff81111561117e57600080fd5b610ecf848285016110ff565b60005b838110156111a557818101518382015260200161118d565b50506000910152565b600081518084526111c681602086016020860161118a565b601f01601f19169290920160200192915050565b6020815260006111ed60208301846111ae565b9392505050565b6001600160a01b038116811461120957600080fd5b50565b6000806000806080858703121561122257600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561124757600080fd5b611253878288016110ff565b9250506060850135611264816111f4565b939692955090935050565b600082601f83011261128057600080fd5b815161128e61111e826110d7565b8181528460208386010111156112a357600080fd5b610ecf82602083016020870161118a565b6000806000606084860312156112c957600080fd5b8351925060208401519150604084015167ffffffffffffffff8111156112ee57600080fd5b6112fa8682870161126f565b9150509250925092565b805161ffff8116811461131657600080fd5b919050565b8051801515811461131657600080fd5b8051611316816111f4565b600060e0828403121561134857600080fd5b61135061107d565b825167ffffffffffffffff8116811461136857600080fd5b815261137660208401611304565b60208201526113876040840161131b565b60408201526113986060840161132b565b60608201526113a96080840161132b565b608082015260a083015160a082015260c083015160c08201528091505092915050565b6000602082840312156113de57600080fd5b81516111ed816111f4565b6000602082840312156113fb57600080fd5b5051919050565b60008060006060848603121561141757600080fd5b8351925060208401519150604084015190509250925092565b8181038181111561145157634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561146957600080fd5b6111ed8261131b565b83815282602082015260606040820152600061149160608301846111ae565b95945050505050565b6000602082840312156114ac57600080fd5b815167ffffffffffffffff8111156114c357600080fd5b610ecf8482850161126f565b600080604083850312156114e257600080fd5b82516114ed816111f4565b60208401519092506114fe816111f4565b809150509250929050565b6000825161151b81846020870161118a565b919091019291505056fea2646970667358221220b6d9d732b6671ae1a3213a5f7a2aa9377f37f38af901bcd0000ab08dcbd3979a64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061002d5760003560e01c806346a114e214610039578063a44a70fa1461006f57600080fd5b3661003457005b600080fd5b34801561004557600080fd5b50610059610054366004611155565b610091565b60405161006691906111da565b60405180910390f35b34801561007b57600080fd5b5061008f61008a36600461120c565b610877565b005b60606000806000848060200190518101906100ac91906112b4565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663eb02c301856040518263ffffffff1660e01b815260040161010291815260200190565b60e060405180830381865afa15801561011f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101439190611336565b9050600081606001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610189573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ad91906113cc565b9050600082608001516001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021791906113cc565b60608401516040516301e3366760e01b81526001600160a01b039182166004820152306024820152604481018890529192507f000000000000000000000000000000000000000000000000000000000000000016906301e3366790606401600060405180830381600087803b15801561028f57600080fd5b505af11580156102a3573d6000803e3d6000fd5b505050506102b5836060015130610a66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603610363577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561034957600080fd5b505af115801561035d573d6000803e3d6000fd5b50505050505b61036e828686610b60565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169163d296d1f1918c91908816906370a0823190602401602060405180830381865afa1580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a91906113e9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925260248201526044016060604051808303816000875af1158015610465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104899190611402565b9194509250905060008861049d8386611430565b6104a79190611430565b905080156105fa5760608701516040516301e3366760e01b81526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b5050505061054c876060015130610a66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b0316036105fa577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b50505050505b608087015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529086169063095ea7b3906044016020604051808303816000875af115801561064f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106739190611457565b5060808701516040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b03909116906394bf804d90604401600060405180830381600087803b1580156106db57600080fd5b505af11580156106ef573d6000803e3d6000fd5b50505050608087015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018690529091169063095ea7b3906044016020604051808303816000875af1158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190611457565b5060808701516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b15801561081757600080fd5b505af115801561082b573d6000803e3d6000fd5b5050505085856040516020016108579291906001600160a01b0392831681529116602082015260400190565b6040516020818303038152906040529a5050505050505050505050919050565b600084848460405160200161088e93929190611472565b60405160208183030381529060405290506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166381548319846040518263ffffffff1660e01b81526004016108ee91906111da565b6000604051808303816000875af115801561090d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610935919081019061149a565b80602001905181019061094891906114cf565b6040516370a0823160e01b815230600482015291935091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b891906113e9565b905080156109d4576109d46001600160a01b0384168683610d53565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906113e9565b90508015610a5b57610a5b6001600160a01b0384168783610d53565b505050505050505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad191906113e9565b905080600003610ae057505050565b6040517ffcd3533c000000000000000000000000000000000000000000000000000000008152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905284169063095ea7b3906044016020604051808303816000875af1158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf39190611457565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031683604051610c2f9190611509565b6000604051808303816000865af19150503d8060008114610c6c576040519150601f19603f3d011682016040523d82523d6000602084013e610c71565b606091505b509150915081610cb857806040517feff88414000000000000000000000000000000000000000000000000000000008152600401610caf91906111da565b60405180910390fd5b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015286169063095ea7b3906044016020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b9190611457565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610dd3908490610dd8565b505050565b6000610e2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610ec09092919063ffffffff16565b9050805160001480610e4e575080806020019051810190610e4e9190611457565b610dd35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610caf565b6060610ecf8484600085610ed7565b949350505050565b606082471015610f4f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610caf565b600080866001600160a01b03168587604051610f6b9190611509565b60006040518083038185875af1925050503d8060008114610fa8576040519150601f19603f3d011682016040523d82523d6000602084013e610fad565b606091505b5091509150610fbe87838387610fc9565b979650505050505050565b60608315611038578251600003611031576001600160a01b0385163b6110315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610caf565b5081610ecf565b610ecf838381511561104d5781518083602001fd5b8060405162461bcd60e51b8152600401610caf91906111da565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156110a0576110a0611067565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156110cf576110cf611067565b604052919050565b600067ffffffffffffffff8211156110f1576110f1611067565b50601f01601f191660200190565b600082601f83011261111057600080fd5b813561112361111e826110d7565b6110a6565b81815284602083860101111561113857600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561116757600080fd5b813567ffffffffffffffff81111561117e57600080fd5b610ecf848285016110ff565b60005b838110156111a557818101518382015260200161118d565b50506000910152565b600081518084526111c681602086016020860161118a565b601f01601f19169290920160200192915050565b6020815260006111ed60208301846111ae565b9392505050565b6001600160a01b038116811461120957600080fd5b50565b6000806000806080858703121561122257600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561124757600080fd5b611253878288016110ff565b9250506060850135611264816111f4565b939692955090935050565b600082601f83011261128057600080fd5b815161128e61111e826110d7565b8181528460208386010111156112a357600080fd5b610ecf82602083016020870161118a565b6000806000606084860312156112c957600080fd5b8351925060208401519150604084015167ffffffffffffffff8111156112ee57600080fd5b6112fa8682870161126f565b9150509250925092565b805161ffff8116811461131657600080fd5b919050565b8051801515811461131657600080fd5b8051611316816111f4565b600060e0828403121561134857600080fd5b61135061107d565b825167ffffffffffffffff8116811461136857600080fd5b815261137660208401611304565b60208201526113876040840161131b565b60408201526113986060840161132b565b60608201526113a96080840161132b565b608082015260a083015160a082015260c083015160c08201528091505092915050565b6000602082840312156113de57600080fd5b81516111ed816111f4565b6000602082840312156113fb57600080fd5b5051919050565b60008060006060848603121561141757600080fd5b8351925060208401519150604084015190509250925092565b8181038181111561145157634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561146957600080fd5b6111ed8261131b565b83815282602082015260606040820152600061149160608301846111ae565b95945050505050565b6000602082840312156114ac57600080fd5b815167ffffffffffffffff8111156114c357600080fd5b610ecf8482850161126f565b600080604083850312156114e257600080fd5b82516114ed816111f4565b60208401519092506114fe816111f4565b809150509250929050565b6000825161151b81846020870161118a565b919091019291505056fea2646970667358221220b6d9d732b6671ae1a3213a5f7a2aa9377f37f38af901bcd0000ab08dcbd3979a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}