{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/BorrowController.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IBorrowController} from \"./interfaces/IBorrowController.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\n\ncontract BorrowController is IBorrowController, Controller, IPositionLocker {\n    using EpochLibrary for Epoch;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address loanPositionManager\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\n        if (positionId == 0) {\n            address collateralToken;\n            address debtToken;\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\n            result = abi.encode(positionId);\n        }\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        uint256 maxPayInterest;\n        uint256 minEarnInterest;\n        (position.collateralAmount, position.debtAmount, position.expiredWith, maxPayInterest, minEarnInterest) =\n            abi.decode(data, (uint256, uint256, Epoch, uint256, uint256));\n\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\n        _loanPositionManager.adjustPosition(\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\n        );\n        if (collateralDelta < 0) {\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\n        }\n        if (debtDelta > 0) _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\n        if (couponsToMint.length > 0) {\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(\n            user,\n            position.debtToken,\n            couponsToMint,\n            couponsToBurn,\n            debtDelta < 0 ? uint256(-debtDelta) : 0,\n            maxPayInterest,\n            minEarnInterest\n        );\n\n        if (collateralDelta > 0) {\n            _ensureBalance(position.collateralToken, user, uint256(collateralDelta));\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\n        }\n        if (debtDelta < 0) {\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _loanPositionManager.settlePosition(positionId);\n    }\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        uint256 maxPayInterest,\n        uint16 loanEpochs,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapETH {\n        _permitERC20(collateralToken, collateralPermitParams);\n\n        bytes memory lockData =\n            abi.encode(collateralAmount, borrowAmount, EpochLibrary.current().add(loanEpochs - 1), maxPayInterest, 0);\n        lockData = abi.encode(0, msg.sender, abi.encode(collateralToken, debtToken, lockData));\n        bytes memory result = _loanPositionManager.lock(lockData);\n        uint256 positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(collateralToken, msg.sender);\n        _burnAllSubstitute(debtToken, msg.sender);\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function borrowMore(\n        uint256 positionId,\n        uint256 amount,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams\n    ) external nonReentrant onlyPositionOwner(positionId) {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        position.debtAmount += amount;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, maxPayInterest, 0));\n\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function addCollateral(\n        uint256 positionId,\n        uint256 amount,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant onlyPositionOwner(positionId) wrapETH {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        _permitERC20(position.collateralToken, collateralPermitParams);\n        position.collateralAmount += amount;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, 0, 0));\n\n        _burnAllSubstitute(position.collateralToken, msg.sender);\n    }\n\n    function removeCollateral(uint256 positionId, uint256 amount, PermitSignature calldata positionPermitParams)\n        external\n        nonReentrant\n        onlyPositionOwner(positionId)\n    {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        position.collateralAmount -= amount;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, 0, 0));\n\n        _burnAllSubstitute(position.collateralToken, msg.sender);\n    }\n\n    function extendLoanDuration(\n        uint256 positionId,\n        uint16 epochs,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable nonReentrant onlyPositionOwner(positionId) wrapETH {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        _permitERC20(position.debtToken, debtPermitParams);\n        position.expiredWith = position.expiredWith.add(epochs);\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, maxPayInterest, 0));\n\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function shortenLoanDuration(\n        uint256 positionId,\n        uint16 epochs,\n        uint256 minEarnInterest,\n        PermitSignature calldata positionPermitParams\n    ) external nonReentrant onlyPositionOwner(positionId) {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        position.expiredWith = position.expiredWith.sub(epochs);\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, 0, minEarnInterest));\n\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function repay(\n        uint256 positionId,\n        uint256 amount,\n        uint256 minEarnInterest,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable nonReentrant onlyPositionOwner(positionId) wrapETH {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        _permitERC20(position.debtToken, debtPermitParams);\n        position.debtAmount -= amount;\n\n        _loanPositionManager.lock(_encodeAdjustData(positionId, position, 0, minEarnInterest));\n\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function _encodeAdjustData(uint256 id, LoanPosition memory p, uint256 maxPay, uint256 minEarn)\n        internal\n        view\n        returns (bytes memory)\n    {\n        bytes memory data = abi.encode(p.collateralAmount, p.debtAmount, p.expiredWith, maxPay, minEarn);\n        return abi.encode(id, msg.sender, data);\n    }\n}\n"
    },
    "contracts/DepositController.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IDepositController} from \"./interfaces/IDepositController.sol\";\nimport {IBondPositionManager} from \"./interfaces/IBondPositionManager.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {BondPosition} from \"./libraries/BondPosition.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\nimport {CouponKey} from \"./libraries/CouponKey.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\n\ncontract DepositController is IDepositController, Controller, IPositionLocker {\n    using EpochLibrary for Epoch;\n\n    IBondPositionManager private immutable _bondPositionManager;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_bondPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address bondPositionManager\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _bondPositionManager = IBondPositionManager(bondPositionManager);\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_bondPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        (positionId, user, data) = abi.decode(data, (uint256, address, bytes));\n        if (positionId == 0) {\n            address asset;\n            (asset, data) = abi.decode(data, (address, bytes));\n            positionId = _bondPositionManager.mint(asset);\n            result = abi.encode(positionId);\n        }\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n\n        uint256 maxPayInterest;\n        uint256 minEarnInterest;\n        (position.amount, position.expiredWith, maxPayInterest, minEarnInterest) =\n            abi.decode(data, (uint256, Epoch, uint256, uint256));\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta) =\n            _bondPositionManager.adjustPosition(positionId, position.amount, position.expiredWith);\n        if (amountDelta < 0) _bondPositionManager.withdrawToken(position.asset, address(this), uint256(-amountDelta));\n        if (couponsToMint.length > 0) {\n            _bondPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(\n            user,\n            position.asset,\n            couponsToMint,\n            couponsToBurn,\n            amountDelta > 0 ? uint256(amountDelta) : 0,\n            maxPayInterest,\n            minEarnInterest\n        );\n\n        if (amountDelta > 0) {\n            IERC20(position.asset).approve(address(_bondPositionManager), uint256(amountDelta));\n            _bondPositionManager.depositToken(position.asset, uint256(amountDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _bondPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _bondPositionManager.settlePosition(positionId);\n    }\n\n    function deposit(\n        address asset,\n        uint256 amount,\n        uint16 lockEpochs,\n        uint256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable nonReentrant wrapETH {\n        _permitERC20(asset, tokenPermitParams);\n        bytes memory lockData = abi.encode(amount, EpochLibrary.current().add(lockEpochs - 1), 0, minEarnInterest);\n        bytes memory result = _bondPositionManager.lock(abi.encode(0, msg.sender, abi.encode(asset, lockData)));\n        uint256 id = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(asset, msg.sender);\n\n        _bondPositionManager.transferFrom(address(this), msg.sender, id);\n    }\n\n    function withdraw(\n        uint256 positionId,\n        uint256 withdrawAmount,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams\n    ) external nonReentrant onlyPositionOwner(positionId) {\n        _permitERC721(_bondPositionManager, positionId, positionPermitParams);\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n\n        bytes memory lockData = abi.encode(position.amount - withdrawAmount, position.expiredWith, maxPayInterest, 0);\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, lockData));\n\n        _burnAllSubstitute(position.asset, msg.sender);\n    }\n\n    function collect(uint256 positionId, PermitSignature calldata positionPermitParams)\n        external\n        nonReentrant\n        onlyPositionOwner(positionId)\n    {\n        _permitERC721(_bondPositionManager, positionId, positionPermitParams);\n        BondPosition memory position = _bondPositionManager.getPosition(positionId);\n        if (position.expiredWith >= EpochLibrary.current()) revert NotExpired();\n\n        _bondPositionManager.lock(abi.encode(positionId, msg.sender, abi.encode(0, position.expiredWith, 0, 0)));\n\n        _burnAllSubstitute(position.asset, msg.sender);\n    }\n}\n"
    },
    "contracts/external/clober/CloberMarketFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketFactory {\n    /**\n     * @notice Emitted when a new volatile market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     */\n    event CreateVolatileMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    );\n\n    /**\n     * @notice Emitted when a new stable market is created.\n     * @param market The address of the new market.\n     * @param orderToken The address of the new market's order token.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param nonce The nonce for this market.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     */\n    event CreateStableMarket(\n        address indexed market,\n        address orderToken,\n        address quoteToken,\n        address baseToken,\n        uint256 quoteUnit,\n        uint256 nonce,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    );\n\n    /**\n     * @notice Emitted when the address of the owner has changed.\n     * @param previousOwner The address of the previous owner.\n     * @param newOwner The address of the new owner.\n     */\n    event ChangeOwner(address previousOwner, address newOwner);\n\n    /**\n     * @notice Emitted when the DAO Treasury address has changed.\n     * @param previousTreasury The address of the previous DAO Treasury.\n     * @param newTreasury The address of the new DAO Treasury.\n     */\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\n\n    /**\n     * @notice Emitted when the host address has changed.\n     * @param market The address of the market that had a change of hosts.\n     * @param previousHost The address of the previous host.\n     * @param newHost The address of a new host.\n     */\n    event ChangeHost(address indexed market, address previousHost, address newHost);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\n\n    /**\n     * @notice Returns the address of the deployed GeometricPriceBook.\n     * @return The address of the GeometricPriceBook.\n     */\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\n\n    /**\n     * @notice Returns the address of the MarketDeployer.\n     * @return The address of the MarketDeployer.\n     */\n    function marketDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the priceBookDeployer.\n     * @return The address of the priceBookDeployer.\n     */\n    function priceBookDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the orderTokenDeployer.\n     * @return The address of the orderTokenDeployer.\n     */\n    function orderTokenDeployer() external view returns (address);\n\n    /**\n     * @notice Returns the address of the OrderCanceler.\n     * @return The address of the OrderCanceler.\n     */\n    function canceler() external view returns (address);\n\n    /**\n     * @notice Returns whether the specified token address has been registered as a quote token.\n     * @param token The address of the token to check.\n     * @return bool Whether the token is registered as a quote token.\n     */\n    function registeredQuoteTokens(address token) external view returns (bool);\n\n    /**\n     * @notice Returns the address of the factory owner\n     * @return The address of the factory owner\n     */\n    function owner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the factory owner candidate\n     * @return The address of the factory owner candidate\n     */\n    function futureOwner() external view returns (address);\n\n    /**\n     * @notice Returns the address of the DAO Treasury\n     * @return The address of the DAO Treasury\n     */\n    function daoTreasury() external view returns (address);\n\n    /**\n     * @notice Returns the current nonce\n     * @return The current nonce\n     */\n    function nonce() external view returns (uint256);\n\n    /**\n     * @notice Creates a new market with a VolatilePriceBook.\n     * @param host The address of the new market's host.\n     * @param quoteToken The address of the new market's quote token.\n     * @param baseToken The address of the new market's base token.\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The scale factor of the price points.\n     * @param r The common ratio between price points.\n     * @return The address of the created market.\n     */\n    function createVolatileMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 r\n    ) external returns (address);\n\n    /**\n     * @notice Creates a new market with a StablePriceBook\n     * @param host The address of the new market's host\n     * @param quoteToken The address of the new market's quote token\n     * @param baseToken The address of the new market's base token\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\n     * @param makerFee The maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param takerFee The taker fee.\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @param a The starting price point.\n     * @param d The common difference between price points.\n     * @return The address of the created market.\n     */\n    function createStableMarket(\n        address host,\n        address quoteToken,\n        address baseToken,\n        uint96 quoteUnit,\n        int24 makerFee,\n        uint24 takerFee,\n        uint128 a,\n        uint128 d\n    ) external returns (address);\n\n    /**\n     * @notice Change the DAO Treasury address.\n     * @dev Only the factory owner can call this function.\n     * @param treasury The new address of the DAO Treasury.\n     */\n    function changeDaoTreasury(address treasury) external;\n\n    /**\n     * @notice Sets the new owner address for this contract.\n     * @dev Only the factory owner can call this function.\n     * @param newOwner The new owner address for this contract.\n     */\n    function prepareChangeOwner(address newOwner) external;\n\n    /**\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\n     * @dev Only the future owner can call this function.\n     */\n    function executeChangeOwner() external;\n\n    /**\n     * @notice Returns the host address of the given market.\n     * @param market The address of the target market.\n     * @return The host address of the market.\n     */\n    function getMarketHost(address market) external view returns (address);\n\n    /**\n     * @notice Prepares to set a new host address for the given market address.\n     * @dev Only the market host can call this function.\n     * @param market The market address for which the host will be changed.\n     * @param newHost The new host address for the given market.\n     */\n    function prepareHandOverHost(address market, address newHost) external;\n\n    /**\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\n     * @dev Only the future market host can call this function.\n     * @param market The market address for which the host will be changed.\n     */\n    function executeHandOverHost(address market) external;\n\n    enum MarketType {\n        NONE,\n        VOLATILE,\n        STABLE\n    }\n\n    /**\n     * @notice MarketInfo struct that contains information about a market.\n     * @param host The address of the market host.\n     * @param marketType The market type, either VOLATILE or STABLE.\n     * @param a The starting price point.\n     * @param factor The either the common ratio or common difference between price points.\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\n     */\n    struct MarketInfo {\n        address host;\n        MarketType marketType;\n        uint128 a;\n        uint128 factor;\n        address futureHost;\n    }\n\n    /**\n     * @notice Returns key information about the market.\n     * @param market The address of the market.\n     * @return marketInfo The MarketInfo structure of the given market.\n     */\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\n\n    /**\n     * @notice Allows the specified token to be used as the quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to register.\n     */\n    function registerQuoteToken(address token) external;\n\n    /**\n     * @notice Revokes the token's right to be used as a quote token.\n     * @dev Only the factory owner can call this function.\n     * @param token The address of the token to unregister.\n     */\n    function unregisterQuoteToken(address token) external;\n\n    /**\n     * @notice Returns the order token name.\n     * @param quoteToken The address of the market's quote token.\n     * @param baseToken The address of the market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token name.\n     */\n    function formatOrderTokenName(address quoteToken, address baseToken, uint256 marketNonce)\n        external\n        view\n        returns (string memory);\n\n    /**\n     * @notice Returns the order token symbol.\n     * @param quoteToken The address of a new market's quote token.\n     * @param baseToken The address of a new market's base token.\n     * @param marketNonce The market nonce.\n     * @return The order token symbol.\n     */\n    function formatOrderTokenSymbol(address quoteToken, address baseToken, uint256 marketNonce)\n        external\n        view\n        returns (string memory);\n}\n"
    },
    "contracts/external/clober/CloberMarketSwapCallbackReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface CloberMarketSwapCallbackReceiver {\n    /**\n     * @notice Contracts placing orders on the OrderBook must implement this method.\n     * In this method, the contract has to send the required token, or the transaction will revert.\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\n     * @param inputToken The address of the token the user has to send.\n     * @param outputToken The address of the token the user has received.\n     * @param inputAmount The amount of tokens the user has to send.\n     * @param outputAmount The amount of tokens the user has received.\n     * @param data The user's custom callback data.\n     */\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address outputToken,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable;\n}\n"
    },
    "contracts/external/clober/CloberOrderBook.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport \"./CloberOrderKey.sol\";\n\ninterface CloberOrderBook {\n    /**\n     * @notice Emitted when an order is created.\n     * @param sender The address who sent the tokens to make the order.\n     * @param user The address with the rights to claim the proceeds of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param options LSB: 0 - Ask, 1 - Bid.\n     */\n    event MakeOrder(\n        address indexed sender,\n        address indexed user,\n        uint64 rawAmount,\n        uint32 claimBounty,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        uint8 options\n    );\n\n    /**\n     * @notice Emitted when an order takes from the order book.\n     * @param sender The address who sent the tokens to take the order.\n     * @param user The recipient address of the traded token.\n     * @param priceIndex The price book index.\n     * @param rawAmount The ordered raw amount.\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\n     */\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\n\n    /**\n     * @notice Emitted when an order is canceled.\n     * @param user The owner of the order.\n     * @param rawAmount The raw amount remaining that was canceled.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\n     */\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\n\n    /**\n     * @notice Emitted when the proceeds of an order is claimed.\n     * @param claimer The address that initiated the claim.\n     * @param user The owner of the order.\n     * @param rawAmount The ordered raw amount.\n     * @param bountyAmount The size of the claim bounty.\n     * @param orderIndex The order index.\n     * @param priceIndex The price book index.\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\n     */\n    event ClaimOrder(\n        address indexed claimer,\n        address indexed user,\n        uint64 rawAmount,\n        uint256 bountyAmount,\n        uint256 orderIndex,\n        uint16 priceIndex,\n        bool isBase\n    );\n\n    /**\n     * @notice Emitted when a flash-loan is taken.\n     * @param caller The caller address of the flash-loan.\n     * @param borrower The address of the flash loan token receiver.\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\n     * @param baseAmount The amount of base tokens the user has borrowed.\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\n     */\n    event Flash(\n        address indexed caller,\n        address indexed borrower,\n        uint256 quoteAmount,\n        uint256 baseAmount,\n        uint256 earnedQuote,\n        uint256 earnedBase\n    );\n\n    /**\n     * @notice A struct that represents an order.\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\n     * @param owner The address of the order owner.\n     */\n    struct Order {\n        uint64 amount;\n        uint32 claimBounty;\n        address owner;\n    }\n\n    /**\n     * @notice A struct that represents a block trade log.\n     * @param blockTime The timestamp of the block.\n     * @param askVolume The volume taken on the ask side.\n     * @param bidVolume The volume taken on the bid side.\n     * @param open The price book index on the open.\n     * @param high The highest price book index in the block.\n     * @param low The lowest price book index in the block.\n     * @param close The price book index on the close.\n     */\n    struct BlockTradeLog {\n        uint64 blockTime;\n        uint64 askVolume;\n        uint64 bidVolume;\n        uint16 open;\n        uint16 high;\n        uint16 low;\n        uint16 close;\n    }\n\n    /**\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\n     * @dev `msg.value` will be used as the claimBounty.\n     * @param user The taker/maker address.\n     * @param priceIndex The price book index.\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\n     * @param baseAmount The base token amount to trade, utilized by asks.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\n     * @param data Custom callback data\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\n     */\n    function limitOrder(\n        address user,\n        uint16 priceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external payable returns (uint256);\n\n    /**\n     * @notice Returns the expected input amount and output amount.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * Bid & expendInput => Used as input amount.\n     * Bid & !expendInput => Not used.\n     * Ask & expendInput => Not used.\n     * Ask & !expendInput => Used as output amount.\n     * @param baseAmount The base token amount to trade.\n     * Bid & expendInput => Not used.\n     * Bid & !expendInput => Used as output amount.\n     * Ask & expendInput => Used as input amount.\n     * Ask & !expendInput => Not used.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     */\n    function getExpectedAmount(uint16 limitPriceIndex, uint64 rawAmount, uint256 baseAmount, uint8 options)\n        external\n        view\n        returns (uint256, uint256);\n\n    /**\n     * @notice Take opens orders until certain conditions are met.\n     * @param user The taker address.\n     * @param limitPriceIndex The price index to take until.\n     * @param rawAmount The raw amount to trade.\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\n     * @param baseAmount The base token amount to trade.\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\n     * @param data Custom callback data.\n     */\n    function marketOrder(\n        address user,\n        uint16 limitPriceIndex,\n        uint64 rawAmount,\n        uint256 baseAmount,\n        uint8 options,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @notice Cancel orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param receiver The address to receive canceled tokens.\n     * @param orderKeys The order keys of the orders to cancel.\n     */\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Claim the proceeds of orders.\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\n     * @param claimer The address to receive the claim bounties.\n     * @param orderKeys The order keys of the orders to claim.\n     */\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\n\n    /**\n     * @notice Get the claimable proceeds of an order.\n     * @param orderKey The order key of the order.\n     * @return claimableRawAmount The claimable raw amount.\n     * @return claimableAmount The claimable amount after fees.\n     * @return feeAmount The maker fee to be paid on claim.\n     * @return rebateAmount The rebate to be received on claim.\n     */\n    function getClaimable(OrderKey calldata orderKey)\n        external\n        view\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\n\n    /**\n     * @notice Flash loan the tokens in the OrderBook.\n     * @param borrower The address to receive the loan.\n     * @param quoteAmount The quote token amount to borrow.\n     * @param baseAmount The base token amount to borrow.\n     * @param data The user's custom callback data.\n     */\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\n\n    /**\n     * @notice Returns the quote unit amount.\n     * @return The amount that one raw amount represent in quote tokens.\n     */\n    function quoteUnit() external view returns (uint256);\n\n    /**\n     * @notice Returns the maker fee.\n     * Paid to the maker when negative, paid by the maker when positive.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The maker fee. 100 = 1bp.\n     */\n    function makerFee() external view returns (int24);\n\n    /**\n     * @notice Returns the take fee\n     * Paid by the taker.\n     * Every 10000 represents a 1% fee on trade volume.\n     * @return The taker fee. 100 = 1bps.\n     */\n    function takerFee() external view returns (uint24);\n\n    /**\n     * @notice Returns the address of the order NFT contract.\n     * @return The address of the order NFT contract.\n     */\n    function orderToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the quote token.\n     * @return The address of the quote token.\n     */\n    function quoteToken() external view returns (address);\n\n    /**\n     * @notice Returns the address of the base token.\n     * @return The address of the base token.\n     */\n    function baseToken() external view returns (address);\n\n    /**\n     * @notice Returns the current total open amount at the given price.\n     * @param isBid The flag to choose which side to check the depth for.\n     * @param priceIndex The price book index.\n     * @return The total open amount.\n     */\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\n\n    /**\n     * @notice Returns the fee balance that has not been collected yet.\n     * @return quote The current fee balance for the quote token.\n     * @return base The current fee balance for the base token.\n     */\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the host.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the host.\n     */\n    function uncollectedHostFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\n     * @param token The address of the token to be collected.\n     * @return The amount of tokens that can be collected by the dao treasury.\n     */\n    function uncollectedProtocolFees(address token) external view returns (uint256);\n\n    /**\n     * @notice Returns whether the order book is empty or not.\n     * @param isBid The flag to choose which side to check the emptiness of.\n     * @return Whether the order book is empty or not on that side.\n     */\n    function isEmpty(bool isBid) external view returns (bool);\n\n    /**\n     * @notice Returns the order information.\n     * @param orderKey The order key of the order.\n     * @return The order struct of the given order key.\n     */\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\n\n    /**\n     * @notice Returns the lowest ask price index or the highest bid price index.\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\n     * @return The current price index. If the order book is empty, it will revert.\n     */\n    function bestPriceIndex(bool isBid) external view returns (uint16);\n\n    /**\n     * @notice Returns the current block trade log index.\n     * @return The current block trade log index.\n     */\n    function blockTradeLogIndex() external view returns (uint16);\n\n    /**\n     * @notice Returns the block trade log for a certain index.\n     * @param index The block trade log index used to query the block trade log.\n     * @return The queried block trade log.\n     */\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\n\n    /**\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\n     * @param rawAmount The raw amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted base amount.\n     */\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\n\n    /**\n     * @notice Converts a raw amount to its corresponding quote amount.\n     * @param rawAmount The raw amount to be converted.\n     * @return The converted quote amount.\n     */\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\n\n    /**\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\n     * @param baseAmount The base amount to be converted.\n     * @param priceIndex The index of the price to be used for the conversion.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Converts a quote amount to its corresponding raw amount.\n     * @param quoteAmount The quote amount to be converted.\n     * @param roundingUp Specifies whether the result should be rounded up or down.\n     * @return The converted raw amount.\n     */\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\n\n    /**\n     * @notice Collects fees for either the protocol or host.\n     * @param token The token address to collect. It should be the quote token or the base token.\n     * @param destination The destination address to transfer fees.\n     * It should be the dao treasury address or the host address.\n     */\n    function collectFees(address token, address destination) external;\n\n    /**\n     * @notice Change the owner of the order.\n     * @dev Only the OrderToken contract can call this function.\n     * @param orderKey The order key of the order.\n     * @param newOwner The new owner address.\n     */\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\n\n    /**\n     * @notice Converts the price index into the actual price.\n     * @param priceIndex The price book index.\n     * @return price The actual price.\n     */\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\n\n    /**\n     * @notice Returns the price book index closest to the provided price.\n     * @param price Provided price.\n     * @param roundingUp Determines whether to round up or down.\n     * @return index The price book index.\n     * @return correctedPrice The actual price for the price book index.\n     */\n    function priceToIndex(uint256 price, bool roundingUp)\n        external\n        view\n        returns (uint16 index, uint256 correctedPrice);\n}\n"
    },
    "contracts/external/clober/CloberOrderKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\n/**\n * @notice A struct that represents a unique key for an order.\n * @param isBid The flag indicating whether it's a bid order or an ask order.\n * @param priceIndex The price book index.\n * @param orderIndex The order index.\n */\nstruct OrderKey {\n    bool isBid;\n    uint16 priceIndex;\n    uint256 orderIndex;\n}\n"
    },
    "contracts/external/weth/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IWETH9 is IERC20Metadata {\n    event Deposit(address indexed dst, uint256 wad);\n    event Withdrawal(address indexed src, uint256 wad);\n\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n"
    },
    "contracts/external/wrapped1155/IWrapped1155Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\n\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\ninterface IWrapped1155Factory is IERC1155Receiver {\n    function erc20Implementation() external view returns (address);\n\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\n        external;\n\n    function batchUnwrap(\n        address multiToken,\n        uint256[] calldata tokenIds,\n        uint256[] calldata amounts,\n        address recipient,\n        bytes calldata data\n    ) external;\n\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\n        external\n        view\n        returns (bytes memory);\n\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\n\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\n}\n"
    },
    "contracts/interfaces/IBondPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {BondPosition} from \"../libraries/BondPosition.sol\";\n\ninterface IBondPositionManagerTypes is IPositionManagerTypes {\n    event RegisterAsset(address indexed asset);\n    event UpdatePosition(uint256 indexed tokenId, uint256 amount, Epoch expiredWith);\n\n    error InvalidAccess();\n    error UnregisteredAsset();\n    error InvalidEpoch();\n    error AlreadyExpired();\n}\n\ninterface IBondPositionManager is IBondPositionManagerTypes, IPositionManager {\n    // View Functions //\n    function MAX_EPOCH() external view returns (Epoch maxEpoch);\n\n    function getPosition(uint256 tokenId) external view returns (BondPosition memory);\n\n    function isAssetRegistered(address asset) external view returns (bool);\n\n    // User Functions //\n    function mint(address asset) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 tokenId, uint256 amount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 amountDelta);\n\n    // Admin Functions //\n    function registerAsset(address asset) external;\n}\n"
    },
    "contracts/interfaces/IBorrowController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\n\ninterface IBorrowController is IController {\n    error CollateralSwapFailed(string reason);\n    error InvalidDebtAmount();\n\n    function borrow(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        uint256 maxPayInterest,\n        uint16 loanEpochs,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable;\n\n    function borrowMore(\n        uint256 positionId,\n        uint256 amount,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams\n    ) external;\n\n    function addCollateral(\n        uint256 positionId,\n        uint256 amount,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable;\n\n    function removeCollateral(uint256 positionId, uint256 amount, PermitSignature calldata positionPermitParams)\n        external;\n\n    function extendLoanDuration(\n        uint256 positionId,\n        uint16 epochs,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable;\n\n    function shortenLoanDuration(\n        uint256 positionId,\n        uint16 epochs,\n        uint256 minEarnInterest,\n        PermitSignature calldata positionPermitParams\n    ) external;\n\n    function repay(\n        uint256 positionId,\n        uint256 amount,\n        uint256 minEarnInterest,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata debtPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface IController {\n    struct ERC20PermitParams {\n        uint256 permitAmount;\n        PermitSignature signature;\n    }\n\n    struct PermitSignature {\n        uint256 deadline;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, address indexed cloberMarket);\n\n    error InvalidAccess();\n    error InvalidMarket();\n    error ControllerSlippage();\n}\n"
    },
    "contracts/interfaces/ICouponManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC1155MetadataURI} from \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\n\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\n\ninterface ICouponManager is IERC1155MetadataURI {\n    error InvalidAccess();\n\n    // View Functions //\n    function isMinter(address account) external view returns (bool);\n\n    function currentEpoch() external view returns (Epoch);\n\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\n\n    function baseURI() external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function exists(uint256 id) external view returns (bool);\n\n    // User Functions\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\n\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\n\n    // Admin Functions //\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\n\n    function burnBatch(address user, Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/ICouponOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ICouponOracleTypes {\n    error LengthMismatch();\n    error AssetFeedAlreadySet();\n    error InvalidTimeout();\n    error InvalidGracePeriod();\n\n    event SetSequencerOracle(address indexed newSequencerOracle);\n    event SetTimeout(uint256 newTimeout);\n    event SetGracePeriod(uint256 newGracePeriod);\n    event SetFallbackOracle(address indexed newFallbackOracle);\n    event SetFeed(address indexed asset, address[] feeds);\n}\n\ninterface ICouponOracle is ICouponOracleTypes {\n    function decimals() external view returns (uint8);\n\n    function sequencerOracle() external view returns (address);\n\n    function timeout() external view returns (uint256);\n\n    function gracePeriod() external view returns (uint256);\n\n    function fallbackOracle() external view returns (address);\n\n    function getFeeds(address asset) external view returns (address[] memory);\n\n    function getAssetPrice(address asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\n\n    function isSequencerValid() external view returns (bool);\n\n    function setFallbackOracle(address newFallbackOracle) external;\n\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external;\n\n    function setSequencerOracle(address newSequencerOracle) external;\n\n    function setTimeout(uint256 newTimeout) external;\n\n    function setGracePeriod(uint256 newGracePeriod) external;\n}\n"
    },
    "contracts/interfaces/IDepositController.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\n\ninterface IDepositController is IController {\n    error NotExpired();\n\n    function deposit(\n        address token,\n        uint256 amount,\n        uint16 lockEpochs,\n        uint256 minEarnInterest,\n        ERC20PermitParams calldata tokenPermitParams\n    ) external payable;\n\n    function withdraw(\n        uint256 positionId,\n        uint256 withdrawAmount,\n        uint256 maxPayInterest,\n        PermitSignature calldata positionPermitParams\n    ) external;\n\n    function collect(uint256 positionId, PermitSignature calldata positionPermitParams) external;\n}\n"
    },
    "contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface IERC721Permit is IERC721 {\n    error InvalidSignature();\n    error PermitExpired();\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    function nonces(uint256 tokenId) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ILeverageAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\n\ninterface ILeverageAdapter is IController {\n    error CollateralSwapFailed(string reason);\n\n    function leverage(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        uint256 maxPayInterest,\n        uint16 loanEpochs,\n        bytes memory swapData,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable;\n\n    function leverageMore(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        uint256 maxPayInterest,\n        bytes memory swapData,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable;\n}\n"
    },
    "contracts/interfaces/ILoanPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IPositionManagerTypes, IPositionManager} from \"./IPositionManager.sol\";\nimport {CouponKey} from \"../libraries/CouponKey.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {LoanPosition} from \"../libraries/LoanPosition.sol\";\n\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\n    // liquidationFee = liquidator fee + protocol fee\n    // debt = collateral * (1 - liquidationFee)\n    struct LoanConfiguration {\n        uint32 collateralDecimal;\n        uint32 debtDecimal;\n        uint32 liquidationThreshold;\n        uint32 liquidationFee;\n        uint32 liquidationProtocolFee;\n        uint32 liquidationTargetLtv;\n    }\n\n    event SetLoanConfiguration(\n        address indexed collateral,\n        address indexed debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    );\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\n    event LiquidatePosition(\n        uint256 indexed positionId,\n        address indexed liquidator,\n        uint256 liquidationAmount,\n        uint256 repayAmount,\n        uint256 protocolFeeAmount\n    );\n    event SetTreasury(address indexed newTreasury);\n\n    error TooSmallDebtLeft();\n    error InvalidAccess();\n    error FullRepaymentRequired();\n    error LiquidationThreshold();\n    error InvalidPair();\n    error InvalidConfiguration();\n    error UnableToLiquidate();\n}\n\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\n    function treasury() external view returns (address);\n\n    function oracle() external view returns (address);\n\n    function minDebtValueInEth() external view returns (uint256);\n\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\n\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\n\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\n\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\n\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\n        external\n        view\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\n\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\n        external\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\n\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\n        external\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\n\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\n\n    function setLoanConfiguration(\n        address collateral,\n        address debt,\n        uint32 liquidationThreshold,\n        uint32 liquidationFee,\n        uint32 liquidationProtocolFee,\n        uint32 liquidationTargetLtv,\n        address hook\n    ) external;\n\n    function setTreasury(address newTreasury) external;\n}\n"
    },
    "contracts/interfaces/IPositionLocker.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface IPositionLocker {\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\n}\n"
    },
    "contracts/interfaces/IPositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IERC721Metadata} from \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\n\nimport {IERC721Permit} from \"./IERC721Permit.sol\";\nimport {Coupon} from \"../libraries/Coupon.sol\";\n\ninterface IPositionManagerTypes {\n    error LockedBy(address locker);\n    error NotSettled();\n}\n\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\n    function baseURI() external view returns (string memory);\n\n    function contractURI() external view returns (string memory);\n\n    function nextId() external view returns (uint256);\n\n    function assetPool() external view returns (address);\n\n    function lockData() external view returns (uint128, uint128);\n\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\n\n    function lock(bytes calldata data) external returns (bytes memory);\n\n    function settlePosition(uint256 positionId) external;\n\n    function withdrawToken(address token, address to, uint256 amount) external;\n\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\n\n    function depositToken(address token, uint256 amount) external;\n\n    function burnCoupons(Coupon[] calldata coupons) external;\n}\n"
    },
    "contracts/interfaces/IRepayAdapter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {IController} from \"./IController.sol\";\n\ninterface IRepayAdapter is IController {\n    error CollateralSwapFailed(string reason);\n\n    function repayWithCollateral(\n        uint256 positionId,\n        uint256 sellCollateralAmount,\n        uint256 minRepayAmount,\n        bytes memory swapData,\n        PermitSignature calldata positionPermitParams\n    ) external;\n}\n"
    },
    "contracts/interfaces/ISubstitute.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ISubstitute {\n    event SetTreasury(address indexed newTreasury);\n    event Claim(address indexed treasury, uint256 adminYield);\n\n    error InvalidToken();\n    error ValueTransferFailed();\n\n    function treasury() external view returns (address);\n\n    function underlyingToken() external view returns (address);\n\n    function mint(uint256 amount, address to) external;\n\n    function burn(uint256 amount, address to) external;\n\n    function claim() external;\n\n    function mintableAmount() external view returns (uint256);\n\n    function burnableAmount() external view returns (uint256);\n\n    function setTreasury(address newTreasury) external;\n\n    function withdrawLostToken(address token, address recipient) external;\n}\n"
    },
    "contracts/LeverageAdapter.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {ICouponOracle} from \"./interfaces/ICouponOracle.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {ILeverageAdapter} from \"./interfaces/ILeverageAdapter.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\n\ncontract LeverageAdapter is ILeverageAdapter, Controller, IPositionLocker {\n    using EpochLibrary for Epoch;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address loanPositionManager,\n        address router\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        uint256 positionId;\n        address user;\n        bytes memory swapData;\n        (positionId, user, data, swapData) = abi.decode(data, (uint256, address, bytes, bytes));\n        if (positionId == 0) {\n            address collateralToken;\n            address debtToken;\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\n            result = abi.encode(positionId);\n        }\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        uint256 maxPayInterest;\n        uint256 minEarnInterest;\n        (position.collateralAmount, position.debtAmount, position.expiredWith, maxPayInterest, minEarnInterest) =\n            abi.decode(data, (uint256, uint256, Epoch, uint256, uint256));\n\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\n        _loanPositionManager.adjustPosition(\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\n        );\n        if (collateralDelta < 0) {\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\n        }\n        if (debtDelta > 0) {\n            _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\n        }\n        if (couponsToMint.length > 0) {\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n            _wrapCoupons(couponsToMint);\n        }\n\n        _executeCouponTrade(\n            user,\n            position.debtToken,\n            couponsToMint,\n            couponsToBurn,\n            debtDelta < 0 ? uint256(-debtDelta) : 0,\n            maxPayInterest,\n            minEarnInterest\n        );\n\n        if (swapData.length > 0) {\n            _swap(position.debtToken, position.collateralToken, swapData);\n        }\n\n        if (collateralDelta > 0) {\n            _ensureBalance(position.collateralToken, user, uint256(collateralDelta));\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\n        }\n        if (debtDelta < 0) {\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\n        }\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _loanPositionManager.settlePosition(positionId);\n    }\n\n    function leverage(\n        address collateralToken,\n        address debtToken,\n        uint256 collateralAmount,\n        uint256 borrowAmount,\n        uint256 maxPayInterest,\n        uint16 loanEpochs,\n        bytes memory swapData,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapETH {\n        _permitERC20(collateralToken, collateralPermitParams);\n\n        bytes memory lockData =\n            abi.encode(collateralAmount, borrowAmount, EpochLibrary.current().add(loanEpochs - 1), maxPayInterest, 0);\n        lockData = abi.encode(0, msg.sender, abi.encode(collateralToken, debtToken, lockData), swapData);\n        bytes memory result = _loanPositionManager.lock(lockData);\n        uint256 positionId = abi.decode(result, (uint256));\n\n        _burnAllSubstitute(collateralToken, msg.sender);\n        _burnAllSubstitute(debtToken, msg.sender);\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\n    }\n\n    function leverageMore(\n        uint256 positionId,\n        uint256 collateralAmount,\n        uint256 debtAmount,\n        uint256 maxPayInterest,\n        bytes memory swapData,\n        PermitSignature calldata positionPermitParams,\n        ERC20PermitParams calldata collateralPermitParams\n    ) external payable nonReentrant wrapETH onlyPositionOwner(positionId) {\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n\n        _permitERC20(position.collateralToken, collateralPermitParams);\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n\n        position.collateralAmount += collateralAmount;\n        position.debtAmount += debtAmount;\n\n        bytes memory data =\n            abi.encode(position.collateralAmount, position.debtAmount, position.expiredWith, maxPayInterest, 0);\n\n        _loanPositionManager.lock(abi.encode(positionId, msg.sender, data, swapData));\n\n        _burnAllSubstitute(position.collateralToken, msg.sender);\n        _burnAllSubstitute(position.debtToken, msg.sender);\n    }\n\n    function _swap(address inSubstitute, address outSubstitute, bytes memory swapData)\n        internal\n        returns (uint256 leftInAmount, uint256 outAmount)\n    {\n        uint256 inAmount = IERC20(inSubstitute).balanceOf(address(this));\n\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\n\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapData);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n\n        outAmount = IERC20(outToken).balanceOf(address(this));\n        leftInAmount = IERC20(inToken).balanceOf(address(this));\n\n        if (leftInAmount > 0) {\n            IERC20(inToken).approve(inSubstitute, leftInAmount);\n            ISubstitute(inSubstitute).mint(leftInAmount, address(this));\n        }\n\n        IERC20(outToken).approve(outSubstitute, outAmount);\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\n    }\n}\n"
    },
    "contracts/libraries/BondPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct BondPosition {\n    address asset;\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    uint256 amount;\n}\n\nlibrary BondPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(BondPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(BondPosition memory oldPosition, BondPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (!(oldPosition.asset == newPosition.asset && oldPosition.nonce == newPosition.nonce)) {\n            revert UnmatchedPosition();\n        }\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n        uint256 mintCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.amount > oldPosition.amount) {\n                burnCouponsLength -= minCount;\n            } else if (newPosition.amount < oldPosition.amount) {\n                mintCouponsLength -= minCount;\n            } else {\n                mintCouponsLength -= minCount;\n                burnCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.amount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.amount;\n                if (newAmount > oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.asset, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/Controller.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Permit} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\";\nimport {ERC1155Holder} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport {CloberMarketSwapCallbackReceiver} from \"../external/clober/CloberMarketSwapCallbackReceiver.sol\";\nimport {CloberMarketFactory} from \"../external/clober/CloberMarketFactory.sol\";\nimport {IWETH9} from \"../external/weth/IWETH9.sol\";\nimport {IWrapped1155Factory} from \"../external/wrapped1155/IWrapped1155Factory.sol\";\nimport {CloberOrderBook} from \"../external/clober/CloberOrderBook.sol\";\nimport {ICouponManager} from \"../interfaces/ICouponManager.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\nimport {Wrapped1155MetadataBuilder} from \"./Wrapped1155MetadataBuilder.sol\";\nimport {IERC721Permit} from \"../interfaces/IERC721Permit.sol\";\nimport {ISubstitute} from \"../interfaces/ISubstitute.sol\";\nimport {IController} from \"../interfaces/IController.sol\";\nimport {ReentrancyGuard} from \"./ReentrancyGuard.sol\";\n\nabstract contract Controller is\n    IController,\n    ERC1155Holder,\n    CloberMarketSwapCallbackReceiver,\n    Ownable2Step,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n    using CouponKeyLibrary for CouponKey;\n    using CouponLibrary for Coupon;\n\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\n    CloberMarketFactory internal immutable _cloberMarketFactory;\n    ICouponManager internal immutable _couponManager;\n    IWETH9 internal immutable _weth;\n\n    mapping(uint256 couponId => address market) internal _couponMarkets;\n\n    constructor(address wrapped1155Factory, address cloberMarketFactory, address couponManager, address weth) {\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\n        _cloberMarketFactory = CloberMarketFactory(cloberMarketFactory);\n        _couponManager = ICouponManager(couponManager);\n        _weth = IWETH9(weth);\n    }\n\n    modifier wrapETH() {\n        if (address(this).balance > 0) _weth.deposit{value: address(this).balance}();\n        _;\n    }\n\n    function _executeCouponTrade(\n        address user,\n        address token,\n        Coupon[] memory couponsToMint,\n        Coupon[] memory couponsToBurn,\n        uint256 amountToPay,\n        uint256 maxPayInterest,\n        uint256 leftRequiredInterest\n    ) internal {\n        if (couponsToBurn.length > 0) {\n            Coupon memory lastCoupon = couponsToBurn[couponsToBurn.length - 1];\n            assembly {\n                mstore(couponsToBurn, sub(mload(couponsToBurn), 1))\n            }\n            bytes memory data = abi.encode(\n                user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\n            );\n            assembly {\n                mstore(couponsToBurn, add(mload(couponsToBurn), 1))\n            }\n\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\n            uint256 dy = lastCoupon.amount - IERC20(market.baseToken()).balanceOf(address(this));\n            market.marketOrder(address(this), type(uint16).max, type(uint64).max, dy, 1, data);\n        } else if (couponsToMint.length > 0) {\n            Coupon memory lastCoupon = couponsToMint[couponsToMint.length - 1];\n            assembly {\n                mstore(couponsToMint, sub(mload(couponsToMint), 1))\n            }\n            bytes memory data = abi.encode(\n                user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\n            );\n            assembly {\n                mstore(couponsToMint, add(mload(couponsToMint), 1))\n            }\n\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\n            market.marketOrder(address(this), 0, 0, lastCoupon.amount, 2, data);\n        } else {\n            if (leftRequiredInterest > 0) revert ControllerSlippage();\n            _ensureBalance(token, user, amountToPay);\n        }\n    }\n\n    function cloberMarketSwapCallback(\n        address inputToken,\n        address,\n        uint256 inputAmount,\n        uint256 outputAmount,\n        bytes calldata data\n    ) external payable {\n        // check if caller is registered market\n        if (_cloberMarketFactory.getMarketHost(msg.sender) == address(0)) revert InvalidAccess();\n\n        address asset = CloberOrderBook(msg.sender).quoteToken();\n        address user;\n        Coupon memory lastCoupon;\n        unchecked {\n            Coupon[] memory couponsToMint;\n            Coupon[] memory couponsToBurn;\n            uint256 amountToPay;\n            uint256 maxPayInterest;\n            uint256 leftRequiredInterest;\n            (user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest) =\n                abi.decode(data, (address, Coupon, Coupon[], Coupon[], uint256, uint256, uint256));\n\n            if (asset == inputToken) {\n                if (maxPayInterest < inputAmount) revert ControllerSlippage();\n                maxPayInterest -= inputAmount;\n                amountToPay += inputAmount;\n            } else {\n                if (leftRequiredInterest > outputAmount) {\n                    leftRequiredInterest -= outputAmount;\n                } else {\n                    leftRequiredInterest = 0;\n                }\n            }\n\n            _executeCouponTrade(\n                user, asset, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\n            );\n        }\n\n        // transfer input tokens\n        if (inputAmount > 0) IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\n        uint256 couponBalance = IERC20(inputToken).balanceOf(address(this));\n        if (asset != inputToken && couponBalance > 0) {\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(lastCoupon.key);\n            _wrapped1155Factory.unwrap(address(_couponManager), lastCoupon.id(), couponBalance, user, metadata);\n        }\n    }\n\n    function _permitERC20(address token, ERC20PermitParams calldata p) internal {\n        if (p.signature.deadline > 0) {\n            try IERC20Permit(ISubstitute(token).underlyingToken()).permit(\n                msg.sender,\n                address(this),\n                p.permitAmount,\n                p.signature.deadline,\n                p.signature.v,\n                p.signature.r,\n                p.signature.s\n            ) {} catch {}\n        }\n    }\n\n    function _permitERC721(IERC721Permit permitNFT, uint256 positionId, PermitSignature calldata p) internal {\n        if (p.deadline > 0) try permitNFT.permit(address(this), positionId, p.deadline, p.v, p.r, p.s) {} catch {}\n    }\n\n    function _burnAllSubstitute(address substitute, address to) internal {\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\n        if (leftAmount == 0) return;\n        ISubstitute(substitute).burn(leftAmount, to);\n    }\n\n    function _ensureBalance(address token, address user, uint256 amount) internal {\n        address underlyingToken = ISubstitute(token).underlyingToken();\n        uint256 thisBalance = IERC20(token).balanceOf(address(this));\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\n        if (amount > thisBalance + underlyingBalance) {\n            unchecked {\n                IERC20(underlyingToken).safeTransferFrom(user, address(this), amount - thisBalance - underlyingBalance);\n                underlyingBalance = amount - thisBalance;\n            }\n        }\n        if (underlyingBalance > 0) {\n            IERC20(underlyingToken).approve(token, underlyingBalance);\n            ISubstitute(token).mint(underlyingBalance, address(this));\n        }\n    }\n\n    function _wrapCoupons(Coupon[] memory coupons) internal {\n        // wrap 1155 to 20\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\n    }\n\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\n        uint256[] memory tokenIds = new uint256[](coupons.length);\n        uint256[] memory amounts = new uint256[](coupons.length);\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                tokenIds[i] = coupons[i].id();\n                amounts[i] = coupons[i].amount;\n            }\n        }\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\n    }\n\n    function getCouponMarket(CouponKey memory couponKey) external view returns (address) {\n        return _couponMarkets[couponKey.toId()];\n    }\n\n    function setCouponMarket(CouponKey memory couponKey, address cloberMarket) public virtual onlyOwner {\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\n        uint256 id = couponKey.toId();\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), id, metadata);\n        CloberMarketFactory.MarketInfo memory marketInfo = _cloberMarketFactory.getMarketInfo(cloberMarket);\n        if (\n            (marketInfo.host == address(0)) || (CloberOrderBook(cloberMarket).baseToken() != wrappedCoupon)\n                || (CloberOrderBook(cloberMarket).quoteToken() != couponKey.asset)\n        ) {\n            revert InvalidMarket();\n        }\n\n        _couponMarkets[id] = cloberMarket;\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, cloberMarket);\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/libraries/Coupon.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"../libraries/Epoch.sol\";\nimport {CouponKey, CouponKeyLibrary} from \"./CouponKey.sol\";\n\nstruct Coupon {\n    CouponKey key;\n    uint256 amount;\n}\n\nlibrary CouponLibrary {\n    using CouponKeyLibrary for CouponKey;\n\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\n    }\n\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\n        return Coupon({key: couponKey, amount: amount});\n    }\n\n    function id(Coupon memory coupon) internal pure returns (uint256) {\n        return coupon.key.toId();\n    }\n}\n"
    },
    "contracts/libraries/CouponKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\nimport {Epoch} from \"./Epoch.sol\";\n\nstruct CouponKey {\n    address asset;\n    Epoch epoch;\n}\n\nlibrary CouponKeyLibrary {\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\n        uint16 epoch = Epoch.unwrap(key.epoch);\n        address asset = key.asset;\n        assembly {\n            id := add(asset, shl(160, epoch))\n        }\n    }\n}\n"
    },
    "contracts/libraries/Epoch.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.19;\n\ntype Epoch is uint16;\n\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\n\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\n}\n\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\n}\n\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\n}\n\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\n}\n\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\n}\n\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\n}\n\nlibrary EpochLibrary {\n    using EpochLibrary for Epoch;\n\n    error EpochOverflow();\n\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    function startTime(Epoch epoch) internal pure returns (uint256) {\n        uint16 currentEpoch = Epoch.unwrap(epoch);\n        if (currentEpoch == 0) return 0;\n        unchecked {\n            return _epochToTimestamp(currentEpoch - 1) + 1;\n        }\n    }\n\n    function endTime(Epoch epoch) internal pure returns (uint256) {\n        return _epochToTimestamp(Epoch.unwrap(epoch));\n    }\n\n    function lastExpiredEpoch() internal view returns (Epoch) {\n        return current().sub(1);\n    }\n\n    function current() internal view returns (Epoch) {\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\n    }\n\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\n    }\n\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\n    }\n\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\n    }\n\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\n        return a > b ? a : b;\n    }\n\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\n        unchecked {\n            uint256 _days = timestamp / SECONDS_PER_DAY;\n            int256 __days = int256(_days);\n\n            int256 L = __days + 68569 + OFFSET19700101;\n            int256 N = (4 * L) / 146097;\n            L = L - (146097 * N + 3) / 4;\n            int256 _year = (4000 * (L + 1)) / 1461001;\n            L = L - (1461 * _year) / 4 + 31;\n            int256 _month = (80 * L) / 2447;\n            L = _month / 11;\n            _month = _month + 2 - 12 * L;\n            _year = 100 * (N - 49) + _year + L;\n\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\n            if (epoch > type(uint16).max) revert EpochOverflow();\n            return uint16(epoch);\n        }\n    }\n\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\n        unchecked {\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\n            uint256 year = months / 12 + 1970;\n            months = (months % 12) << 4;\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\n            } else {\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\n            }\n            return (\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\n            ) * SECONDS_PER_DAY - 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/LoanPosition.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport {Epoch, EpochLibrary} from \"./Epoch.sol\";\nimport {Coupon, CouponLibrary} from \"./Coupon.sol\";\n\nstruct LoanPosition {\n    uint64 nonce;\n    Epoch expiredWith;\n    bool isSettled;\n    address collateralToken;\n    address debtToken;\n    uint256 collateralAmount;\n    uint256 debtAmount;\n}\n\nlibrary LoanPositionLibrary {\n    error UnmatchedPosition();\n    error InvalidPositionEpoch();\n\n    using EpochLibrary for Epoch;\n\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\n        nonce = positionStorage.nonce++;\n    }\n\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\n        internal\n        view\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\n    {\n        if (\n            !(\n                oldPosition.collateralToken == newPosition.collateralToken\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\n            )\n        ) revert UnmatchedPosition();\n\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\n            revert InvalidPositionEpoch();\n        }\n\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\n        unchecked {\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\n                mintCouponsLength -= minCount;\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\n                burnCouponsLength -= minCount;\n            } else {\n                burnCouponsLength -= minCount;\n                mintCouponsLength -= minCount;\n            }\n        }\n\n        mintCoupons = new Coupon[](mintCouponsLength);\n        burnCoupons = new Coupon[](burnCouponsLength);\n        mintCouponsLength = 0;\n        burnCouponsLength = 0;\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\n        unchecked {\n            Epoch epoch = latestExpiredEpoch;\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\n                epoch = epoch.add(1);\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\n                if (newAmount > oldAmount) {\n                    burnCoupons[burnCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\n                } else if (newAmount < oldAmount) {\n                    mintCoupons[mintCouponsLength++] =\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\npragma solidity >=0.8.0;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    error Reentrancy();\n\n    uint256 internal _locked = 1;\n\n    modifier nonReentrant() virtual {\n        if (_locked != 1) revert Reentrancy();\n\n        _locked = 2;\n\n        _;\n\n        _locked = 1;\n    }\n}\n"
    },
    "contracts/libraries/Wrapped1155MetadataBuilder.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {CouponKey} from \"./CouponKey.sol\";\nimport {Coupon} from \"./Coupon.sol\";\nimport {Epoch} from \"./Epoch.sol\";\n\nlibrary Wrapped1155MetadataBuilder {\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\n        // @dev assume that tokenSymbol.length <= 12\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \" Bond Coupon (\", epochString, \")\"));\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \"-CP\", epochString));\n        assembly {\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\n            nameData := add(nameData, add(30, addLength))\n            symbolData := add(symbolData, add(6, addLength))\n        }\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\n    }\n\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\n        unchecked {\n            for (uint256 i = 0; i < coupons.length; ++i) {\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\n            }\n        }\n    }\n}\n"
    },
    "contracts/RepayAdapter.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {ISubstitute} from \"./interfaces/ISubstitute.sol\";\nimport {ICouponOracle} from \"./interfaces/ICouponOracle.sol\";\nimport {ILoanPositionManager} from \"./interfaces/ILoanPositionManager.sol\";\nimport {LoanPosition} from \"./libraries/LoanPosition.sol\";\nimport {Coupon} from \"./libraries/Coupon.sol\";\nimport {Controller} from \"./libraries/Controller.sol\";\nimport {IPositionLocker} from \"./interfaces/IPositionLocker.sol\";\nimport {IRepayAdapter} from \"./interfaces/IRepayAdapter.sol\";\nimport {Epoch, EpochLibrary} from \"./libraries/Epoch.sol\";\n\ncontract RepayAdapter is IRepayAdapter, Controller, IPositionLocker {\n    using EpochLibrary for Epoch;\n\n    ILoanPositionManager private immutable _loanPositionManager;\n    address private immutable _router;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\n        _;\n    }\n\n    constructor(\n        address wrapped1155Factory,\n        address cloberMarketFactory,\n        address couponManager,\n        address weth,\n        address loanPositionManager,\n        address router\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\n        _router = router;\n    }\n\n    function positionLockAcquired(bytes memory data) external returns (bytes memory) {\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\n\n        (uint256 positionId, address user, uint256 sellCollateralAmount, uint256 minRepayAmount, bytes memory swapData)\n        = abi.decode(data, (uint256, address, uint256, uint256, bytes));\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\n        uint256 maxDebtAmount = position.debtAmount - minRepayAmount;\n\n        _loanPositionManager.withdrawToken(position.collateralToken, address(this), sellCollateralAmount);\n        (uint256 leftCollateralAmount, uint256 repayDebtAmount) =\n            _swapCollateral(position.collateralToken, position.debtToken, sellCollateralAmount, swapData);\n        IERC20(position.collateralToken).approve(address(_loanPositionManager), leftCollateralAmount);\n        _loanPositionManager.depositToken(position.collateralToken, leftCollateralAmount);\n        position.collateralAmount = position.collateralAmount + leftCollateralAmount - sellCollateralAmount;\n\n        Epoch lastExpiredEpoch = EpochLibrary.lastExpiredEpoch();\n        Coupon[] memory couponsToMint;\n        Coupon[] memory couponsToBurn;\n        unchecked {\n            if (position.debtAmount < repayDebtAmount) {\n                repayDebtAmount = position.debtAmount;\n            }\n\n            uint256 remainingDebtAmount = position.debtAmount - repayDebtAmount;\n            uint256 minDebtAmount = _getMinDebtAmount(position.debtToken);\n            if (0 < remainingDebtAmount && remainingDebtAmount < minDebtAmount) remainingDebtAmount = minDebtAmount;\n\n            (couponsToMint, couponsToBurn,,) = _loanPositionManager.adjustPosition(\n                positionId,\n                position.collateralAmount,\n                remainingDebtAmount,\n                remainingDebtAmount == 0 ? lastExpiredEpoch : position.expiredWith\n            );\n\n            if (couponsToMint.length > 0) {\n                _loanPositionManager.mintCoupons(couponsToMint, address(this), \"\");\n                _wrapCoupons(couponsToMint);\n            }\n\n            _executeCouponTrade(\n                user, position.debtToken, couponsToMint, couponsToBurn, repayDebtAmount, type(uint256).max, 0\n            );\n\n            uint256 depositDebtTokenAmount = IERC20(position.debtToken).balanceOf(address(this));\n\n            if (position.debtAmount <= depositDebtTokenAmount) {\n                remainingDebtAmount = 0;\n                depositDebtTokenAmount = position.debtAmount;\n            } else {\n                remainingDebtAmount = position.debtAmount - depositDebtTokenAmount;\n            }\n\n            if (remainingDebtAmount > 0 && remainingDebtAmount < minDebtAmount) remainingDebtAmount = minDebtAmount;\n            if (maxDebtAmount < remainingDebtAmount) revert ControllerSlippage();\n\n            uint256 depositAmount = position.debtAmount - remainingDebtAmount;\n            IERC20(position.debtToken).approve(address(_loanPositionManager), depositAmount);\n            _loanPositionManager.depositToken(position.debtToken, depositAmount);\n            position.debtAmount = remainingDebtAmount;\n        }\n\n        (couponsToMint,,,) = _loanPositionManager.adjustPosition(\n            positionId,\n            position.collateralAmount,\n            position.debtAmount,\n            position.debtAmount == 0 ? lastExpiredEpoch : position.expiredWith\n        );\n        _loanPositionManager.mintCoupons(couponsToMint, user, \"\");\n        if (couponsToBurn.length > 0) {\n            _unwrapCoupons(couponsToBurn);\n            _loanPositionManager.burnCoupons(couponsToBurn);\n        }\n\n        _burnAllSubstitute(position.debtToken, user);\n        _loanPositionManager.settlePosition(positionId);\n\n        return \"\";\n    }\n\n    function repayWithCollateral(\n        uint256 positionId,\n        uint256 sellCollateralAmount,\n        uint256 minRepayAmount,\n        bytes memory swapData,\n        PermitSignature calldata positionPermitParams\n    ) external nonReentrant onlyPositionOwner(positionId) {\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\n        _loanPositionManager.lock(abi.encode(positionId, msg.sender, sellCollateralAmount, minRepayAmount, swapData));\n    }\n\n    function _swapCollateral(address collateral, address debt, uint256 inAmount, bytes memory swapData)\n        internal\n        returns (uint256 leftInAmount, uint256 outAmount)\n    {\n        address inToken = ISubstitute(collateral).underlyingToken();\n        address outToken = ISubstitute(debt).underlyingToken();\n\n        ISubstitute(collateral).burn(inAmount, address(this));\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\n        IERC20(inToken).approve(_router, inAmount);\n        (bool success, bytes memory result) = _router.call(swapData);\n        if (!success) revert CollateralSwapFailed(string(result));\n        IERC20(inToken).approve(_router, 0);\n\n        outAmount = IERC20(outToken).balanceOf(address(this));\n        leftInAmount = IERC20(inToken).balanceOf(address(this));\n\n        if (leftInAmount > 0) {\n            IERC20(inToken).approve(collateral, leftInAmount);\n            ISubstitute(collateral).mint(leftInAmount, address(this));\n        }\n\n        IERC20(outToken).approve(debt, outAmount);\n        ISubstitute(debt).mint(outAmount, address(this));\n    }\n\n    function _getMinDebtAmount(address debtToken) internal view returns (uint256 minDebtAmount) {\n        unchecked {\n            address[] memory assets = new address[](2);\n            assets[0] = debtToken;\n            assets[1] = address(0);\n\n            uint256 debtDecimal = IERC20Metadata(debtToken).decimals();\n\n            uint256[] memory prices = ICouponOracle(_loanPositionManager.oracle()).getAssetsPrices(assets);\n            minDebtAmount = _loanPositionManager.minDebtValueInEth() * prices[1];\n            if (debtDecimal > 18) {\n                minDebtAmount *= 10 ** (debtDecimal - 18);\n            } else {\n                minDebtAmount /= 10 ** (18 - debtDecimal);\n            }\n            minDebtAmount /= prices[0];\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}