{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CouponOracle.sol": {
      "content": "// SPDX-License-Identifier: -\n// License: https://license.coupon.finance/LICENSE.pdf\n\npragma solidity ^0.8.0;\n\nimport {Ownable2Step} from \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\nimport {AggregatorV3Interface} from \"./external/chainlink/AggregatorV3Interface.sol\";\nimport {ICouponOracle} from \"./interfaces/ICouponOracle.sol\";\nimport {IFallbackOracle} from \"./interfaces/IFallbackOracle.sol\";\n\ncontract CouponOracle is ICouponOracle, Ownable2Step {\n    uint256 private constant _MAX_TIMEOUT = 1 days;\n    uint256 private constant _MIN_TIMEOUT = 20 minutes;\n    uint256 private constant _MAX_GRACE_PERIOD = 1 days;\n    uint256 private constant _MIN_GRACE_PERIOD = 20 minutes;\n\n    uint256 public override timeout;\n    address public override sequencerOracle;\n    uint256 public override gracePeriod;\n    address public override fallbackOracle;\n    mapping(address => address[]) private _feeds;\n\n    constructor(address sequencerOracle_, uint256 timeout_, uint256 gracePeriod_) {\n        _setSequencerOracle(sequencerOracle_);\n        _setTimeout(timeout_);\n        _setGracePeriod(gracePeriod_);\n    }\n\n    function decimals() external pure returns (uint8) {\n        return 8;\n    }\n\n    function getFeeds(address asset) external view returns (address[] memory) {\n        return _feeds[asset];\n    }\n\n    function getAssetPrice(address asset) public view returns (uint256) {\n        address[] memory feeds = _feeds[asset];\n        if (feeds.length == 0) {\n            return IFallbackOracle(fallbackOracle).getAssetPrice(asset);\n        }\n        uint256 price = 10 ** 8;\n        for (uint256 i = 0; i < feeds.length; ++i) {\n            try AggregatorV3Interface(feeds[i]).latestRoundData() returns (\n                uint80 roundId, int256 answer, uint256, /* startedAt */ uint256 updatedAt, uint80 /* answeredInRound */\n            ) {\n                if (\n                    roundId != 0 && answer >= 0 && updatedAt <= block.timestamp\n                        && block.timestamp <= updatedAt + timeout && _isSequencerValid()\n                ) {\n                    uint256 feedDecimals = AggregatorV3Interface(feeds[i]).decimals();\n                    price = price * uint256(answer) / 10 ** feedDecimals;\n                    continue;\n                }\n            } catch {}\n            return IFallbackOracle(fallbackOracle).getAssetPrice(asset);\n        }\n        return price;\n    }\n\n    function getAssetsPrices(address[] memory assets) external view returns (uint256[] memory prices) {\n        prices = new uint256[](assets.length);\n        unchecked {\n            for (uint256 i = 0; i < assets.length; ++i) {\n                prices[i] = getAssetPrice(assets[i]);\n            }\n        }\n    }\n\n    function isSequencerValid() external view returns (bool) {\n        return _isSequencerValid();\n    }\n\n    function setFallbackOracle(address newFallbackOracle) external onlyOwner {\n        fallbackOracle = newFallbackOracle;\n        emit SetFallbackOracle(newFallbackOracle);\n    }\n\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external onlyOwner {\n        if (assets.length != feeds.length) revert LengthMismatch();\n        unchecked {\n            for (uint256 i = 0; i < assets.length; ++i) {\n                if (_feeds[assets[i]].length > 0) revert AssetFeedAlreadySet();\n                if (feeds[i].length == 0) revert LengthMismatch();\n                for (uint256 j = 0; j < feeds[i].length; ++j) {\n                    _feeds[assets[i]].push(feeds[i][j]);\n                }\n                emit SetFeed(assets[i], feeds[i]);\n            }\n        }\n    }\n\n    function setSequencerOracle(address newSequencerOracle) external onlyOwner {\n        _setSequencerOracle(newSequencerOracle);\n    }\n\n    function _setSequencerOracle(address newSequencerOracle) internal {\n        sequencerOracle = newSequencerOracle;\n        emit SetSequencerOracle(newSequencerOracle);\n    }\n\n    function setTimeout(uint256 newTimeout) external onlyOwner {\n        _setTimeout(newTimeout);\n    }\n\n    function _setTimeout(uint256 newTimeout) internal {\n        if (newTimeout < _MIN_TIMEOUT || newTimeout > _MAX_TIMEOUT) revert InvalidTimeout();\n        timeout = newTimeout;\n        emit SetTimeout(newTimeout);\n    }\n\n    function setGracePeriod(uint256 newGracePeriod) external onlyOwner {\n        _setGracePeriod(newGracePeriod);\n    }\n\n    function _setGracePeriod(uint256 newGracePeriod) internal {\n        if (newGracePeriod < _MIN_GRACE_PERIOD || newGracePeriod > _MAX_GRACE_PERIOD) revert InvalidGracePeriod();\n        gracePeriod = newGracePeriod;\n        emit SetGracePeriod(newGracePeriod);\n    }\n\n    function _isSequencerValid() internal view returns (bool) {\n        (, int256 answer,, uint256 updatedAt,) = AggregatorV3Interface(sequencerOracle).latestRoundData();\n        return answer == 0 && block.timestamp - updatedAt > gracePeriod;\n    }\n}\n"
    },
    "contracts/external/chainlink/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/interfaces/ICouponOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface ICouponOracleTypes {\n    error LengthMismatch();\n    error AssetFeedAlreadySet();\n    error InvalidTimeout();\n    error InvalidGracePeriod();\n\n    event SetSequencerOracle(address indexed newSequencerOracle);\n    event SetTimeout(uint256 newTimeout);\n    event SetGracePeriod(uint256 newGracePeriod);\n    event SetFallbackOracle(address indexed newFallbackOracle);\n    event SetFeed(address indexed asset, address[] feeds);\n}\n\ninterface ICouponOracle is ICouponOracleTypes {\n    function decimals() external view returns (uint8);\n\n    function sequencerOracle() external view returns (address);\n\n    function timeout() external view returns (uint256);\n\n    function gracePeriod() external view returns (uint256);\n\n    function fallbackOracle() external view returns (address);\n\n    function getFeeds(address asset) external view returns (address[] memory);\n\n    function getAssetPrice(address asset) external view returns (uint256);\n\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\n\n    function isSequencerValid() external view returns (bool);\n\n    function setFallbackOracle(address newFallbackOracle) external;\n\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external;\n\n    function setSequencerOracle(address newSequencerOracle) external;\n\n    function setTimeout(uint256 newTimeout) external;\n\n    function setGracePeriod(uint256 newGracePeriod) external;\n}\n"
    },
    "contracts/interfaces/IFallbackOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity ^0.8.0;\n\ninterface IFallbackOracle {\n    function getAssetPrice(address asset) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}