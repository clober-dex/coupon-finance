{
  "address": "0xF71D8Fbf7c605E21F5ED3728F36F203B5CEc1413",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapped1155Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cloberMarketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "couponManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loanPositionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "CollateralSwapFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ControllerSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EpochOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarket",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrancy",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "Epoch",
          "name": "epoch",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloberMarket",
          "type": "address"
        }
      ],
      "name": "SetCouponMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "cloberMarketSwapCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        }
      ],
      "name": "getCouponMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "loanEpochs",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams",
          "name": "collateralPermitParams",
          "type": "tuple"
        }
      ],
      "name": "leverage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPayInterest",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swapData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IController.PermitSignature",
          "name": "positionPermitParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "permitAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "deadline",
                  "type": "uint256"
                },
                {
                  "internalType": "uint8",
                  "name": "v",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes32",
                  "name": "r",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "s",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IController.PermitSignature",
              "name": "signature",
              "type": "tuple"
            }
          ],
          "internalType": "struct IController.ERC20PermitParams",
          "name": "collateralPermitParams",
          "type": "tuple"
        }
      ],
      "name": "leverageMore",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "positionLockAcquired",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "Epoch",
              "name": "epoch",
              "type": "uint16"
            }
          ],
          "internalType": "struct CouponKey",
          "name": "couponKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "cloberMarket",
          "type": "address"
        }
      ],
      "name": "setCouponMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3986299ff0af94ba547096c762d62a24ee4073f4e4c3ca5499dc94929b4e8a23",
  "receipt": {
    "to": null,
    "from": "0x1f88547fc4E1dC1a924AEaaDE65108EEb9DdEEd4",
    "contractAddress": "0xF71D8Fbf7c605E21F5ED3728F36F203B5CEc1413",
    "transactionIndex": 1,
    "gasUsed": "26458907",
    "logsBloom": "0x
    "blockHash": "0x24a498343d982100e7050ab1634e06b3839c79c8aa5b29d2a225eb3b6949690a",
    "transactionHash": "0x3986299ff0af94ba547096c762d62a24ee4073f4e4c3ca5499dc94929b4e8a23",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 150536584,
        "transactionHash": "0x3986299ff0af94ba547096c762d62a24ee4073f4e4c3ca5499dc94929b4e8a23",
        "address": "0xF71D8Fbf7c605E21F5ED3728F36F203B5CEc1413",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f88547fc4e1dc1a924aeaade65108eeb9ddeed4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x24a498343d982100e7050ab1634e06b3839c79c8aa5b29d2a225eb3b6949690a"
      }
    ],
    "blockNumber": 150536584,
    "cumulativeGasUsed": "26458907",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfcBE16BfD991E4949244E59d9b524e6964b8BB75",
    "0x24aC0938C010Fb520F1068e96d78E0458855111D",
    "0x8bbcA766D175aDbffB073832262990df1c5ef748",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0x03d65411684ae7B5440E11a6063881a774C733dF",
    "0xa669e7A0d4b3e4Fa48af2dE86BD4CD7126Be4e13"
  ],
  "numDeployments": 1,
  "solcInputHash": "79048f46984044ebed3dd29bb6e9cb9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapped1155Factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cloberMarketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"couponManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CollateralSwapFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ControllerSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EpochOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrancy\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloberMarket\",\"type\":\"address\"}],\"name\":\"SetCouponMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"cloberMarketSwapCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"}],\"name\":\"getCouponMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"loanEpochs\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams\",\"name\":\"collateralPermitParams\",\"type\":\"tuple\"}],\"name\":\"leverage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayInterest\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"positionPermitParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"permitAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IController.PermitSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"struct IController.ERC20PermitParams\",\"name\":\"collateralPermitParams\",\"type\":\"tuple\"}],\"name\":\"leverageMore\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"positionLockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"Epoch\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"internalType\":\"struct CouponKey\",\"name\":\"couponKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"cloberMarket\",\"type\":\"address\"}],\"name\":\"setCouponMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LeverageAdapter.sol\":\"LeverageAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LeverageAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {ISubstitute} from \\\"./interfaces/ISubstitute.sol\\\";\\nimport {ICouponOracle} from \\\"./interfaces/ICouponOracle.sol\\\";\\nimport {ILoanPositionManager} from \\\"./interfaces/ILoanPositionManager.sol\\\";\\nimport {LoanPosition} from \\\"./libraries/LoanPosition.sol\\\";\\nimport {Coupon} from \\\"./libraries/Coupon.sol\\\";\\nimport {Controller} from \\\"./libraries/Controller.sol\\\";\\nimport {IPositionLocker} from \\\"./interfaces/IPositionLocker.sol\\\";\\nimport {ILeverageAdapter} from \\\"./interfaces/ILeverageAdapter.sol\\\";\\nimport {Epoch, EpochLibrary} from \\\"./libraries/Epoch.sol\\\";\\n\\ncontract LeverageAdapter is ILeverageAdapter, Controller, IPositionLocker {\\n    using EpochLibrary for Epoch;\\n\\n    ILoanPositionManager private immutable _loanPositionManager;\\n    address private immutable _router;\\n\\n    modifier onlyPositionOwner(uint256 positionId) {\\n        if (_loanPositionManager.ownerOf(positionId) != msg.sender) revert InvalidAccess();\\n        _;\\n    }\\n\\n    constructor(\\n        address wrapped1155Factory,\\n        address cloberMarketFactory,\\n        address couponManager,\\n        address weth,\\n        address loanPositionManager,\\n        address router\\n    ) Controller(wrapped1155Factory, cloberMarketFactory, couponManager, weth) {\\n        _loanPositionManager = ILoanPositionManager(loanPositionManager);\\n        _router = router;\\n    }\\n\\n    function positionLockAcquired(bytes memory data) external returns (bytes memory result) {\\n        if (msg.sender != address(_loanPositionManager)) revert InvalidAccess();\\n\\n        uint256 positionId;\\n        address user;\\n        bytes memory swapData;\\n        (positionId, user, data, swapData) = abi.decode(data, (uint256, address, bytes, bytes));\\n        if (positionId == 0) {\\n            address collateralToken;\\n            address debtToken;\\n            (collateralToken, debtToken, data) = abi.decode(data, (address, address, bytes));\\n            positionId = _loanPositionManager.mint(collateralToken, debtToken);\\n            result = abi.encode(positionId);\\n        }\\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\\n\\n        uint256 maxPayInterest;\\n        uint256 minEarnInterest;\\n        (position.collateralAmount, position.debtAmount, position.expiredWith, maxPayInterest, minEarnInterest) =\\n            abi.decode(data, (uint256, uint256, Epoch, uint256, uint256));\\n\\n        (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta) =\\n        _loanPositionManager.adjustPosition(\\n            positionId, position.collateralAmount, position.debtAmount, position.expiredWith\\n        );\\n        if (collateralDelta < 0) {\\n            _loanPositionManager.withdrawToken(position.collateralToken, address(this), uint256(-collateralDelta));\\n        }\\n        if (debtDelta > 0) {\\n            _loanPositionManager.withdrawToken(position.debtToken, address(this), uint256(debtDelta));\\n        }\\n        if (couponsToMint.length > 0) {\\n            _loanPositionManager.mintCoupons(couponsToMint, address(this), \\\"\\\");\\n            _wrapCoupons(couponsToMint);\\n        }\\n\\n        _executeCouponTrade(\\n            user,\\n            position.debtToken,\\n            couponsToMint,\\n            couponsToBurn,\\n            debtDelta < 0 ? uint256(-debtDelta) : 0,\\n            maxPayInterest,\\n            minEarnInterest\\n        );\\n\\n        if (swapData.length > 0) {\\n            _swap(position.debtToken, position.collateralToken, swapData);\\n        }\\n\\n        if (collateralDelta > 0) {\\n            _ensureBalance(position.collateralToken, user, uint256(collateralDelta));\\n            IERC20(position.collateralToken).approve(address(_loanPositionManager), uint256(collateralDelta));\\n            _loanPositionManager.depositToken(position.collateralToken, uint256(collateralDelta));\\n        }\\n        if (debtDelta < 0) {\\n            IERC20(position.debtToken).approve(address(_loanPositionManager), uint256(-debtDelta));\\n            _loanPositionManager.depositToken(position.debtToken, uint256(-debtDelta));\\n        }\\n        if (couponsToBurn.length > 0) {\\n            _unwrapCoupons(couponsToBurn);\\n            _loanPositionManager.burnCoupons(couponsToBurn);\\n        }\\n\\n        _loanPositionManager.settlePosition(positionId);\\n    }\\n\\n    function leverage(\\n        address collateralToken,\\n        address debtToken,\\n        uint256 collateralAmount,\\n        uint256 borrowAmount,\\n        uint256 maxPayInterest,\\n        uint16 loanEpochs,\\n        bytes memory swapData,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable nonReentrant wrapETH {\\n        _permitERC20(collateralToken, collateralPermitParams);\\n\\n        bytes memory lockData =\\n            abi.encode(collateralAmount, borrowAmount, EpochLibrary.current().add(loanEpochs - 1), maxPayInterest, 0);\\n        lockData = abi.encode(0, msg.sender, abi.encode(collateralToken, debtToken, lockData), swapData);\\n        bytes memory result = _loanPositionManager.lock(lockData);\\n        uint256 positionId = abi.decode(result, (uint256));\\n\\n        _burnAllSubstitute(collateralToken, msg.sender);\\n        _burnAllSubstitute(debtToken, msg.sender);\\n        _loanPositionManager.transferFrom(address(this), msg.sender, positionId);\\n    }\\n\\n    function leverageMore(\\n        uint256 positionId,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        uint256 maxPayInterest,\\n        bytes memory swapData,\\n        PermitSignature calldata positionPermitParams,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable nonReentrant wrapETH onlyPositionOwner(positionId) {\\n        LoanPosition memory position = _loanPositionManager.getPosition(positionId);\\n\\n        _permitERC20(position.collateralToken, collateralPermitParams);\\n        _permitERC721(_loanPositionManager, positionId, positionPermitParams);\\n\\n        position.collateralAmount += collateralAmount;\\n        position.debtAmount += debtAmount;\\n\\n        bytes memory data =\\n            abi.encode(position.collateralAmount, position.debtAmount, position.expiredWith, maxPayInterest, 0);\\n\\n        _loanPositionManager.lock(abi.encode(positionId, msg.sender, data, swapData));\\n\\n        _burnAllSubstitute(position.collateralToken, msg.sender);\\n        _burnAllSubstitute(position.debtToken, msg.sender);\\n    }\\n\\n    function _swap(address inSubstitute, address outSubstitute, bytes memory swapData)\\n        internal\\n        returns (uint256 leftInAmount, uint256 outAmount)\\n    {\\n        uint256 inAmount = IERC20(inSubstitute).balanceOf(address(this));\\n\\n        address inToken = ISubstitute(inSubstitute).underlyingToken();\\n        address outToken = ISubstitute(outSubstitute).underlyingToken();\\n\\n        ISubstitute(inSubstitute).burn(inAmount, address(this));\\n        if (inToken == address(_weth)) _weth.deposit{value: inAmount}();\\n        IERC20(inToken).approve(_router, inAmount);\\n        (bool success, bytes memory result) = _router.call(swapData);\\n        if (!success) revert CollateralSwapFailed(string(result));\\n        IERC20(inToken).approve(_router, 0);\\n\\n        outAmount = IERC20(outToken).balanceOf(address(this));\\n        leftInAmount = IERC20(inToken).balanceOf(address(this));\\n\\n        if (leftInAmount > 0) {\\n            IERC20(inToken).approve(inSubstitute, leftInAmount);\\n            ISubstitute(inSubstitute).mint(leftInAmount, address(this));\\n        }\\n\\n        IERC20(outToken).approve(outSubstitute, outAmount);\\n        ISubstitute(outSubstitute).mint(outAmount, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xabb1b3a4f414a38a677e102c4394f9185e03019ba1050cb453285e1a872fabaf\",\"license\":\"-\"},\"contracts/external/clober/CloberMarketFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketFactory {\\n    /**\\n     * @notice Emitted when a new volatile market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     */\\n    event CreateVolatileMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    );\\n\\n    /**\\n     * @notice Emitted when a new stable market is created.\\n     * @param market The address of the new market.\\n     * @param orderToken The address of the new market's order token.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param nonce The nonce for this market.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     */\\n    event CreateStableMarket(\\n        address indexed market,\\n        address orderToken,\\n        address quoteToken,\\n        address baseToken,\\n        uint256 quoteUnit,\\n        uint256 nonce,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    );\\n\\n    /**\\n     * @notice Emitted when the address of the owner has changed.\\n     * @param previousOwner The address of the previous owner.\\n     * @param newOwner The address of the new owner.\\n     */\\n    event ChangeOwner(address previousOwner, address newOwner);\\n\\n    /**\\n     * @notice Emitted when the DAO Treasury address has changed.\\n     * @param previousTreasury The address of the previous DAO Treasury.\\n     * @param newTreasury The address of the new DAO Treasury.\\n     */\\n    event ChangeDaoTreasury(address previousTreasury, address newTreasury);\\n\\n    /**\\n     * @notice Emitted when the host address has changed.\\n     * @param market The address of the market that had a change of hosts.\\n     * @param previousHost The address of the previous host.\\n     * @param newHost The address of a new host.\\n     */\\n    event ChangeHost(address indexed market, address previousHost, address newHost);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedGeometricPriceBook(uint128 a, uint128 r) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the deployed GeometricPriceBook.\\n     * @return The address of the GeometricPriceBook.\\n     */\\n    function deployedArithmeticPriceBook(uint128 a, uint128 d) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the MarketDeployer.\\n     * @return The address of the MarketDeployer.\\n     */\\n    function marketDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the priceBookDeployer.\\n     * @return The address of the priceBookDeployer.\\n     */\\n    function priceBookDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the orderTokenDeployer.\\n     * @return The address of the orderTokenDeployer.\\n     */\\n    function orderTokenDeployer() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the OrderCanceler.\\n     * @return The address of the OrderCanceler.\\n     */\\n    function canceler() external view returns (address);\\n\\n    /**\\n     * @notice Returns whether the specified token address has been registered as a quote token.\\n     * @param token The address of the token to check.\\n     * @return bool Whether the token is registered as a quote token.\\n     */\\n    function registeredQuoteTokens(address token) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the address of the factory owner\\n     * @return The address of the factory owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the factory owner candidate\\n     * @return The address of the factory owner candidate\\n     */\\n    function futureOwner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the DAO Treasury\\n     * @return The address of the DAO Treasury\\n     */\\n    function daoTreasury() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current nonce\\n     * @return The current nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * @notice Creates a new market with a VolatilePriceBook.\\n     * @param host The address of the new market's host.\\n     * @param quoteToken The address of the new market's quote token.\\n     * @param baseToken The address of the new market's base token.\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens.\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The scale factor of the price points.\\n     * @param r The common ratio between price points.\\n     * @return The address of the created market.\\n     */\\n    function createVolatileMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 r\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Creates a new market with a StablePriceBook\\n     * @param host The address of the new market's host\\n     * @param quoteToken The address of the new market's quote token\\n     * @param baseToken The address of the new market's base token\\n     * @param quoteUnit The amount that one raw amount represents in quote tokens\\n     * @param makerFee The maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param takerFee The taker fee.\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @param a The starting price point.\\n     * @param d The common difference between price points.\\n     * @return The address of the created market.\\n     */\\n    function createStableMarket(\\n        address host,\\n        address quoteToken,\\n        address baseToken,\\n        uint96 quoteUnit,\\n        int24 makerFee,\\n        uint24 takerFee,\\n        uint128 a,\\n        uint128 d\\n    ) external returns (address);\\n\\n    /**\\n     * @notice Change the DAO Treasury address.\\n     * @dev Only the factory owner can call this function.\\n     * @param treasury The new address of the DAO Treasury.\\n     */\\n    function changeDaoTreasury(address treasury) external;\\n\\n    /**\\n     * @notice Sets the new owner address for this contract.\\n     * @dev Only the factory owner can call this function.\\n     * @param newOwner The new owner address for this contract.\\n     */\\n    function prepareChangeOwner(address newOwner) external;\\n\\n    /**\\n     * @notice Changes the owner of this contract to the address set by `prepareChangeOwner`.\\n     * @dev Only the future owner can call this function.\\n     */\\n    function executeChangeOwner() external;\\n\\n    /**\\n     * @notice Returns the host address of the given market.\\n     * @param market The address of the target market.\\n     * @return The host address of the market.\\n     */\\n    function getMarketHost(address market) external view returns (address);\\n\\n    /**\\n     * @notice Prepares to set a new host address for the given market address.\\n     * @dev Only the market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     * @param newHost The new host address for the given market.\\n     */\\n    function prepareHandOverHost(address market, address newHost) external;\\n\\n    /**\\n     * @notice Changes the host address of the given market to the address set by `prepareHandOverHost`.\\n     * @dev Only the future market host can call this function.\\n     * @param market The market address for which the host will be changed.\\n     */\\n    function executeHandOverHost(address market) external;\\n\\n    enum MarketType {\\n        NONE,\\n        VOLATILE,\\n        STABLE\\n    }\\n\\n    /**\\n     * @notice MarketInfo struct that contains information about a market.\\n     * @param host The address of the market host.\\n     * @param marketType The market type, either VOLATILE or STABLE.\\n     * @param a The starting price point.\\n     * @param factor The either the common ratio or common difference between price points.\\n     * @param futureHost The address set by `prepareHandOverHost` to change the market host.\\n     */\\n    struct MarketInfo {\\n        address host;\\n        MarketType marketType;\\n        uint128 a;\\n        uint128 factor;\\n        address futureHost;\\n    }\\n\\n    /**\\n     * @notice Returns key information about the market.\\n     * @param market The address of the market.\\n     * @return marketInfo The MarketInfo structure of the given market.\\n     */\\n    function getMarketInfo(address market) external view returns (MarketInfo memory marketInfo);\\n\\n    /**\\n     * @notice Allows the specified token to be used as the quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to register.\\n     */\\n    function registerQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Revokes the token's right to be used as a quote token.\\n     * @dev Only the factory owner can call this function.\\n     * @param token The address of the token to unregister.\\n     */\\n    function unregisterQuoteToken(address token) external;\\n\\n    /**\\n     * @notice Returns the order token name.\\n     * @param quoteToken The address of the market's quote token.\\n     * @param baseToken The address of the market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token name.\\n     */\\n    function formatOrderTokenName(address quoteToken, address baseToken, uint256 marketNonce)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the order token symbol.\\n     * @param quoteToken The address of a new market's quote token.\\n     * @param baseToken The address of a new market's base token.\\n     * @param marketNonce The market nonce.\\n     * @return The order token symbol.\\n     */\\n    function formatOrderTokenSymbol(address quoteToken, address baseToken, uint256 marketNonce)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x987c3a4a5f24cf8e153ac85b04f50c5b84830e7bd7d02fec51114c8a84cf7c0d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberMarketSwapCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface CloberMarketSwapCallbackReceiver {\\n    /**\\n     * @notice Contracts placing orders on the OrderBook must implement this method.\\n     * In this method, the contract has to send the required token, or the transaction will revert.\\n     * If there is a claim bounty to be refunded, it will be transferred via msg.value.\\n     * @param inputToken The address of the token the user has to send.\\n     * @param outputToken The address of the token the user has received.\\n     * @param inputAmount The amount of tokens the user has to send.\\n     * @param outputAmount The amount of tokens the user has received.\\n     * @param data The user's custom callback data.\\n     */\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address outputToken,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x3c238ac30949be45e9c6a4b74416fb03bb99a3cfde0414ed6beda0fd5f51f5b8\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloberOrderKey.sol\\\";\\n\\ninterface CloberOrderBook {\\n    /**\\n     * @notice Emitted when an order is created.\\n     * @param sender The address who sent the tokens to make the order.\\n     * @param user The address with the rights to claim the proceeds of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param options LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event MakeOrder(\\n        address indexed sender,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint32 claimBounty,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        uint8 options\\n    );\\n\\n    /**\\n     * @notice Emitted when an order takes from the order book.\\n     * @param sender The address who sent the tokens to take the order.\\n     * @param user The recipient address of the traded token.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The ordered raw amount.\\n     * @param options MSB: 0 - Limit, 1 - Market / LSB: 0 - Ask, 1 - Bid.\\n     */\\n    event TakeOrder(address indexed sender, address indexed user, uint16 priceIndex, uint64 rawAmount, uint8 options);\\n\\n    /**\\n     * @notice Emitted when an order is canceled.\\n     * @param user The owner of the order.\\n     * @param rawAmount The raw amount remaining that was canceled.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBid The flag indicating whether it's a bid order or an ask order.\\n     */\\n    event CancelOrder(address indexed user, uint64 rawAmount, uint256 orderIndex, uint16 priceIndex, bool isBid);\\n\\n    /**\\n     * @notice Emitted when the proceeds of an order is claimed.\\n     * @param claimer The address that initiated the claim.\\n     * @param user The owner of the order.\\n     * @param rawAmount The ordered raw amount.\\n     * @param bountyAmount The size of the claim bounty.\\n     * @param orderIndex The order index.\\n     * @param priceIndex The price book index.\\n     * @param isBase The flag indicating whether the user receives the base token or the quote token.\\n     */\\n    event ClaimOrder(\\n        address indexed claimer,\\n        address indexed user,\\n        uint64 rawAmount,\\n        uint256 bountyAmount,\\n        uint256 orderIndex,\\n        uint16 priceIndex,\\n        bool isBase\\n    );\\n\\n    /**\\n     * @notice Emitted when a flash-loan is taken.\\n     * @param caller The caller address of the flash-loan.\\n     * @param borrower The address of the flash loan token receiver.\\n     * @param quoteAmount The amount of quote tokens the user has borrowed.\\n     * @param baseAmount The amount of base tokens the user has borrowed.\\n     * @param earnedQuote The amount of quote tokens the protocol earned in quote tokens.\\n     * @param earnedBase The amount of base tokens the protocol earned in base tokens.\\n     */\\n    event Flash(\\n        address indexed caller,\\n        address indexed borrower,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        uint256 earnedQuote,\\n        uint256 earnedBase\\n    );\\n\\n    /**\\n     * @notice A struct that represents an order.\\n     * @param amount The raw amount not filled yet. In case of a stale order, the amount not claimed yet.\\n     * @param claimBounty The bounty amount in gwei that can be collected by the party that fully claims the order.\\n     * @param owner The address of the order owner.\\n     */\\n    struct Order {\\n        uint64 amount;\\n        uint32 claimBounty;\\n        address owner;\\n    }\\n\\n    /**\\n     * @notice A struct that represents a block trade log.\\n     * @param blockTime The timestamp of the block.\\n     * @param askVolume The volume taken on the ask side.\\n     * @param bidVolume The volume taken on the bid side.\\n     * @param open The price book index on the open.\\n     * @param high The highest price book index in the block.\\n     * @param low The lowest price book index in the block.\\n     * @param close The price book index on the close.\\n     */\\n    struct BlockTradeLog {\\n        uint64 blockTime;\\n        uint64 askVolume;\\n        uint64 bidVolume;\\n        uint16 open;\\n        uint16 high;\\n        uint16 low;\\n        uint16 close;\\n    }\\n\\n    /**\\n     * @notice Take orders better or equal to the given priceIndex and make an order with the remaining tokens.\\n     * @dev `msg.value` will be used as the claimBounty.\\n     * @param user The taker/maker address.\\n     * @param priceIndex The price book index.\\n     * @param rawAmount The raw quote amount to trade, utilized by bids.\\n     * @param baseAmount The base token amount to trade, utilized by asks.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - Post only.\\n     * @param data Custom callback data\\n     * @return The order index. If an order is not made `type(uint256).max` is returned instead.\\n     */\\n    function limitOrder(\\n        address user,\\n        uint16 priceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Returns the expected input amount and output amount.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * Bid & expendInput => Used as input amount.\\n     * Bid & !expendInput => Not used.\\n     * Ask & expendInput => Not used.\\n     * Ask & !expendInput => Used as output amount.\\n     * @param baseAmount The base token amount to trade.\\n     * Bid & expendInput => Not used.\\n     * Bid & !expendInput => Used as output amount.\\n     * Ask & expendInput => Used as input amount.\\n     * Ask & !expendInput => Not used.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     */\\n    function getExpectedAmount(uint16 limitPriceIndex, uint64 rawAmount, uint256 baseAmount, uint8 options)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @notice Take opens orders until certain conditions are met.\\n     * @param user The taker address.\\n     * @param limitPriceIndex The price index to take until.\\n     * @param rawAmount The raw amount to trade.\\n     * This value is used as the maximum input amount by bids and minimum output amount by asks.\\n     * @param baseAmount The base token amount to trade.\\n     * This value is used as the maximum input amount by asks and minimum output amount by bids.\\n     * @param options LSB: 0 - Ask, 1 - Bid. Second bit: 1 - expend input.\\n     * @param data Custom callback data.\\n     */\\n    function marketOrder(\\n        address user,\\n        uint16 limitPriceIndex,\\n        uint64 rawAmount,\\n        uint256 baseAmount,\\n        uint8 options,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Cancel orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param receiver The address to receive canceled tokens.\\n     * @param orderKeys The order keys of the orders to cancel.\\n     */\\n    function cancel(address receiver, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Claim the proceeds of orders.\\n     * @dev The length of orderKeys must be controlled by the caller to avoid block gas limit exceeds.\\n     * @param claimer The address to receive the claim bounties.\\n     * @param orderKeys The order keys of the orders to claim.\\n     */\\n    function claim(address claimer, OrderKey[] calldata orderKeys) external;\\n\\n    /**\\n     * @notice Get the claimable proceeds of an order.\\n     * @param orderKey The order key of the order.\\n     * @return claimableRawAmount The claimable raw amount.\\n     * @return claimableAmount The claimable amount after fees.\\n     * @return feeAmount The maker fee to be paid on claim.\\n     * @return rebateAmount The rebate to be received on claim.\\n     */\\n    function getClaimable(OrderKey calldata orderKey)\\n        external\\n        view\\n        returns (uint64 claimableRawAmount, uint256 claimableAmount, uint256 feeAmount, uint256 rebateAmount);\\n\\n    /**\\n     * @notice Flash loan the tokens in the OrderBook.\\n     * @param borrower The address to receive the loan.\\n     * @param quoteAmount The quote token amount to borrow.\\n     * @param baseAmount The base token amount to borrow.\\n     * @param data The user's custom callback data.\\n     */\\n    function flash(address borrower, uint256 quoteAmount, uint256 baseAmount, bytes calldata data) external;\\n\\n    /**\\n     * @notice Returns the quote unit amount.\\n     * @return The amount that one raw amount represent in quote tokens.\\n     */\\n    function quoteUnit() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the maker fee.\\n     * Paid to the maker when negative, paid by the maker when positive.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The maker fee. 100 = 1bp.\\n     */\\n    function makerFee() external view returns (int24);\\n\\n    /**\\n     * @notice Returns the take fee\\n     * Paid by the taker.\\n     * Every 10000 represents a 1% fee on trade volume.\\n     * @return The taker fee. 100 = 1bps.\\n     */\\n    function takerFee() external view returns (uint24);\\n\\n    /**\\n     * @notice Returns the address of the order NFT contract.\\n     * @return The address of the order NFT contract.\\n     */\\n    function orderToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the quote token.\\n     * @return The address of the quote token.\\n     */\\n    function quoteToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the base token.\\n     * @return The address of the base token.\\n     */\\n    function baseToken() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current total open amount at the given price.\\n     * @param isBid The flag to choose which side to check the depth for.\\n     * @param priceIndex The price book index.\\n     * @return The total open amount.\\n     */\\n    function getDepth(bool isBid, uint16 priceIndex) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the fee balance that has not been collected yet.\\n     * @return quote The current fee balance for the quote token.\\n     * @return base The current fee balance for the base token.\\n     */\\n    function getFeeBalance() external view returns (uint128 quote, uint128 base);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the host.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the host.\\n     */\\n    function uncollectedHostFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of tokens that can be collected by the dao treasury.\\n     * @param token The address of the token to be collected.\\n     * @return The amount of tokens that can be collected by the dao treasury.\\n     */\\n    function uncollectedProtocolFees(address token) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns whether the order book is empty or not.\\n     * @param isBid The flag to choose which side to check the emptiness of.\\n     * @return Whether the order book is empty or not on that side.\\n     */\\n    function isEmpty(bool isBid) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the order information.\\n     * @param orderKey The order key of the order.\\n     * @return The order struct of the given order key.\\n     */\\n    function getOrder(OrderKey calldata orderKey) external view returns (Order memory);\\n\\n    /**\\n     * @notice Returns the lowest ask price index or the highest bid price index.\\n     * @param isBid Returns the lowest ask price if false, highest bid price if true.\\n     * @return The current price index. If the order book is empty, it will revert.\\n     */\\n    function bestPriceIndex(bool isBid) external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the current block trade log index.\\n     * @return The current block trade log index.\\n     */\\n    function blockTradeLogIndex() external view returns (uint16);\\n\\n    /**\\n     * @notice Returns the block trade log for a certain index.\\n     * @param index The block trade log index used to query the block trade log.\\n     * @return The queried block trade log.\\n     */\\n    function blockTradeLogs(uint16 index) external view returns (BlockTradeLog memory);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding base amount using a given price index.\\n     * @param rawAmount The raw amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted base amount.\\n     */\\n    function rawToBase(uint64 rawAmount, uint16 priceIndex, bool roundingUp) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a raw amount to its corresponding quote amount.\\n     * @param rawAmount The raw amount to be converted.\\n     * @return The converted quote amount.\\n     */\\n    function rawToQuote(uint64 rawAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Converts a base amount to its corresponding raw amount using a given price index.\\n     * @param baseAmount The base amount to be converted.\\n     * @param priceIndex The index of the price to be used for the conversion.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function baseToRaw(uint256 baseAmount, uint16 priceIndex, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Converts a quote amount to its corresponding raw amount.\\n     * @param quoteAmount The quote amount to be converted.\\n     * @param roundingUp Specifies whether the result should be rounded up or down.\\n     * @return The converted raw amount.\\n     */\\n    function quoteToRaw(uint256 quoteAmount, bool roundingUp) external view returns (uint64);\\n\\n    /**\\n     * @notice Collects fees for either the protocol or host.\\n     * @param token The token address to collect. It should be the quote token or the base token.\\n     * @param destination The destination address to transfer fees.\\n     * It should be the dao treasury address or the host address.\\n     */\\n    function collectFees(address token, address destination) external;\\n\\n    /**\\n     * @notice Change the owner of the order.\\n     * @dev Only the OrderToken contract can call this function.\\n     * @param orderKey The order key of the order.\\n     * @param newOwner The new owner address.\\n     */\\n    function changeOrderOwner(OrderKey calldata orderKey, address newOwner) external;\\n\\n    /**\\n     * @notice Converts the price index into the actual price.\\n     * @param priceIndex The price book index.\\n     * @return price The actual price.\\n     */\\n    function indexToPrice(uint16 priceIndex) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the price book index closest to the provided price.\\n     * @param price Provided price.\\n     * @param roundingUp Determines whether to round up or down.\\n     * @return index The price book index.\\n     * @return correctedPrice The actual price for the price book index.\\n     */\\n    function priceToIndex(uint256 price, bool roundingUp)\\n        external\\n        view\\n        returns (uint16 index, uint256 correctedPrice);\\n}\\n\",\"keccak256\":\"0x9a9506e6b5f01f9251234f365f84382c114f7733ab8c08f40e58a48c61a95da9\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/clober/CloberOrderKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice A struct that represents a unique key for an order.\\n * @param isBid The flag indicating whether it's a bid order or an ask order.\\n * @param priceIndex The price book index.\\n * @param orderIndex The order index.\\n */\\nstruct OrderKey {\\n    bool isBid;\\n    uint16 priceIndex;\\n    uint256 orderIndex;\\n}\\n\",\"keccak256\":\"0x4607151f9e9e7732f5e40c9f899fb4adb35dcee23056312be90976bb979264b4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/weth/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IWETH9 is IERC20Metadata {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x2ee71d25c3fbf9b954291eb2c76b1149fc9cf6456944019adbb6b051ff1bda11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/external/wrapped1155/IWrapped1155Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\n// @author Gnosis (https://github.com/gnosis/1155-to-20)\\ninterface IWrapped1155Factory is IERC1155Receiver {\\n    function erc20Implementation() external view returns (address);\\n\\n    function unwrap(address multiToken, uint256 tokenId, uint256 amount, address recipient, bytes calldata data)\\n        external;\\n\\n    function batchUnwrap(\\n        address multiToken,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata amounts,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n\\n    function getWrapped1155DeployBytecode(address multiToken, uint256 tokenId, bytes calldata data)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function getWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external view returns (address);\\n\\n    function requireWrapped1155(address multiToken, uint256 tokenId, bytes calldata data) external returns (address);\\n}\\n\",\"keccak256\":\"0x2b36f8a611877ddea2dff0d422220b3775618fd92c2180c5456b891bc10ab94d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface IController {\\n    struct ERC20PermitParams {\\n        uint256 permitAmount;\\n        PermitSignature signature;\\n    }\\n\\n    struct PermitSignature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    event SetCouponMarket(address indexed asset, Epoch indexed epoch, address indexed cloberMarket);\\n\\n    error InvalidAccess();\\n    error InvalidMarket();\\n    error ControllerSlippage();\\n}\\n\",\"keccak256\":\"0x616bd0922fefc0fdb833ee7e5ad1c5311880a8eeb8070880da7824ffc63e4b08\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\n\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\n\\ninterface ICouponManager is IERC1155MetadataURI {\\n    error InvalidAccess();\\n\\n    // View Functions //\\n    function isMinter(address account) external view returns (bool);\\n\\n    function currentEpoch() external view returns (Epoch);\\n\\n    function epochEndTime(Epoch epoch) external pure returns (uint256);\\n\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function exists(uint256 id) external view returns (bool);\\n\\n    // User Functions\\n    function safeBatchTransferFrom(address from, address to, Coupon[] calldata coupons, bytes calldata data) external;\\n\\n    function burnExpiredCoupons(CouponKey[] calldata couponKeys) external;\\n\\n    // Admin Functions //\\n    function mintBatch(address to, Coupon[] calldata coupons, bytes memory data) external;\\n\\n    function burnBatch(address user, Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xb9336f5c24838894b1d8a8696986290556a4835052d4ea21422ac4f4c614c837\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ICouponOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICouponOracleTypes {\\n    error LengthMismatch();\\n    error AssetFeedAlreadySet();\\n    error InvalidTimeout();\\n    error InvalidGracePeriod();\\n\\n    event SetSequencerOracle(address indexed newSequencerOracle);\\n    event SetTimeout(uint256 newTimeout);\\n    event SetGracePeriod(uint256 newGracePeriod);\\n    event SetFallbackOracle(address indexed newFallbackOracle);\\n    event SetFeed(address indexed asset, address[] feeds);\\n}\\n\\ninterface ICouponOracle is ICouponOracleTypes {\\n    function decimals() external view returns (uint8);\\n\\n    function sequencerOracle() external view returns (address);\\n\\n    function timeout() external view returns (uint256);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function fallbackOracle() external view returns (address);\\n\\n    function getFeeds(address asset) external view returns (address[] memory);\\n\\n    function getAssetPrice(address asset) external view returns (uint256);\\n\\n    function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n    function isSequencerValid() external view returns (bool);\\n\\n    function setFallbackOracle(address newFallbackOracle) external;\\n\\n    function setFeeds(address[] calldata assets, address[][] calldata feeds) external;\\n\\n    function setSequencerOracle(address newSequencerOracle) external;\\n\\n    function setTimeout(uint256 newTimeout) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0x53b1ca55b90f84a25cedfeb609e597ae5c424d46f58b39ac39066431d9be596d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IERC721Permit.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Permit is IERC721 {\\n    error InvalidSignature();\\n    error PermitExpired();\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function permit(address spender, uint256 tokenId, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    function nonces(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb6970e2181dc25efdcd17b3df6ff9be05bfdc421d9cdb691976c4621e8e0aaae\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILeverageAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IController} from \\\"./IController.sol\\\";\\n\\ninterface ILeverageAdapter is IController {\\n    error CollateralSwapFailed(string reason);\\n\\n    function leverage(\\n        address collateralToken,\\n        address debtToken,\\n        uint256 collateralAmount,\\n        uint256 borrowAmount,\\n        uint256 maxPayInterest,\\n        uint16 loanEpochs,\\n        bytes memory swapData,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable;\\n\\n    function leverageMore(\\n        uint256 positionId,\\n        uint256 collateralAmount,\\n        uint256 debtAmount,\\n        uint256 maxPayInterest,\\n        bytes memory swapData,\\n        PermitSignature calldata positionPermitParams,\\n        ERC20PermitParams calldata collateralPermitParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x281b3aaa1de2e5dcb8c7b54e52204f4533ad141f3420901e3ac3f1051dec967a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ILoanPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPositionManagerTypes, IPositionManager} from \\\"./IPositionManager.sol\\\";\\nimport {CouponKey} from \\\"../libraries/CouponKey.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {LoanPosition} from \\\"../libraries/LoanPosition.sol\\\";\\n\\ninterface ILoanPositionManagerTypes is IPositionManagerTypes {\\n    // liquidationFee = liquidator fee + protocol fee\\n    // debt = collateral * (1 - liquidationFee)\\n    struct LoanConfiguration {\\n        uint32 collateralDecimal;\\n        uint32 debtDecimal;\\n        uint32 liquidationThreshold;\\n        uint32 liquidationFee;\\n        uint32 liquidationProtocolFee;\\n        uint32 liquidationTargetLtv;\\n    }\\n\\n    event SetLoanConfiguration(\\n        address indexed collateral,\\n        address indexed debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    );\\n    event UpdatePosition(uint256 indexed positionId, uint256 collateralAmount, uint256 debtAmount, Epoch unlockedAt);\\n    event LiquidatePosition(\\n        uint256 indexed positionId,\\n        address indexed liquidator,\\n        uint256 liquidationAmount,\\n        uint256 repayAmount,\\n        uint256 protocolFeeAmount\\n    );\\n    event SetTreasury(address indexed newTreasury);\\n\\n    error TooSmallDebtLeft();\\n    error InvalidAccess();\\n    error FullRepaymentRequired();\\n    error LiquidationThreshold();\\n    error InvalidPair();\\n    error InvalidConfiguration();\\n    error UnableToLiquidate();\\n}\\n\\ninterface ILoanPositionManager is ILoanPositionManagerTypes, IPositionManager {\\n    function treasury() external view returns (address);\\n\\n    function oracle() external view returns (address);\\n\\n    function minDebtValueInEth() external view returns (uint256);\\n\\n    function getPosition(uint256 positionId) external view returns (LoanPosition memory);\\n\\n    function isPairRegistered(address collateral, address debt) external view returns (bool);\\n\\n    function getLoanConfiguration(address collateral, address debt) external view returns (LoanConfiguration memory);\\n\\n    function getOwedCouponAmount(address user, uint256 couponId) external view returns (uint256);\\n\\n    function getLiquidationStatus(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        view\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function mint(address collateralToken, address debtToken) external returns (uint256 positionId);\\n\\n    function adjustPosition(uint256 positionId, uint256 collateralAmount, uint256 debtAmount, Epoch expiredWith)\\n        external\\n        returns (Coupon[] memory couponsToMint, Coupon[] memory couponsToBurn, int256 collateralDelta, int256 debtDelta);\\n\\n    function liquidate(uint256 positionId, uint256 maxRepayAmount)\\n        external\\n        returns (uint256 liquidationAmount, uint256 repayAmount, uint256 protocolFeeAmount);\\n\\n    function claimOwedCoupons(CouponKey[] memory couponKeys, bytes calldata data) external;\\n\\n    function setLoanConfiguration(\\n        address collateral,\\n        address debt,\\n        uint32 liquidationThreshold,\\n        uint32 liquidationFee,\\n        uint32 liquidationProtocolFee,\\n        uint32 liquidationTargetLtv,\\n        address hook\\n    ) external;\\n\\n    function setTreasury(address newTreasury) external;\\n}\\n\",\"keccak256\":\"0x9a7457f1c0ef0c959bc942c71bf9a2ff1699ba32a56d395e05f9d28787633317\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionLocker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPositionLocker {\\n    function positionLockAcquired(bytes calldata data) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x884c5b53d68aa13b4e81affe68958aceb335ce59cf4b46cebbba6524cdbfe728\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\\nimport {IERC721Permit} from \\\"./IERC721Permit.sol\\\";\\nimport {Coupon} from \\\"../libraries/Coupon.sol\\\";\\n\\ninterface IPositionManagerTypes {\\n    error LockedBy(address locker);\\n    error NotSettled();\\n}\\n\\ninterface IPositionManager is IERC721Metadata, IERC721Permit, IPositionManagerTypes {\\n    function baseURI() external view returns (string memory);\\n\\n    function contractURI() external view returns (string memory);\\n\\n    function nextId() external view returns (uint256);\\n\\n    function assetPool() external view returns (address);\\n\\n    function lockData() external view returns (uint128, uint128);\\n\\n    function assetDelta(address locker, uint256 assetId) external view returns (int256);\\n\\n    function lock(bytes calldata data) external returns (bytes memory);\\n\\n    function settlePosition(uint256 positionId) external;\\n\\n    function withdrawToken(address token, address to, uint256 amount) external;\\n\\n    function mintCoupons(Coupon[] calldata coupons, address to, bytes calldata data) external;\\n\\n    function depositToken(address token, uint256 amount) external;\\n\\n    function burnCoupons(Coupon[] calldata coupons) external;\\n}\\n\",\"keccak256\":\"0xf4e8029d7b7f2be9318bb10e9e0a184b0d47954d37bf9d2cdbca6560d076ac40\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/ISubstitute.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\ninterface ISubstitute {\\n    event SetTreasury(address indexed newTreasury);\\n    event Claim(address indexed treasury, uint256 adminYield);\\n\\n    error InvalidToken();\\n    error ValueTransferFailed();\\n\\n    function treasury() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function mint(uint256 amount, address to) external;\\n\\n    function burn(uint256 amount, address to) external;\\n\\n    function claim() external;\\n\\n    function mintableAmount() external view returns (uint256);\\n\\n    function burnableAmount() external view returns (uint256);\\n\\n    function setTreasury(address newTreasury) external;\\n\\n    function withdrawLostToken(address token, address recipient) external;\\n}\\n\",\"keccak256\":\"0xa6d6ff8684f2d6b02d5a1a249a48bb07d39333f68e4d93e64ed551f4bdbf93f1\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {ERC1155Holder} from \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport {CloberMarketSwapCallbackReceiver} from \\\"../external/clober/CloberMarketSwapCallbackReceiver.sol\\\";\\nimport {CloberMarketFactory} from \\\"../external/clober/CloberMarketFactory.sol\\\";\\nimport {IWETH9} from \\\"../external/weth/IWETH9.sol\\\";\\nimport {IWrapped1155Factory} from \\\"../external/wrapped1155/IWrapped1155Factory.sol\\\";\\nimport {CloberOrderBook} from \\\"../external/clober/CloberOrderBook.sol\\\";\\nimport {ICouponManager} from \\\"../interfaces/ICouponManager.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\nimport {Wrapped1155MetadataBuilder} from \\\"./Wrapped1155MetadataBuilder.sol\\\";\\nimport {IERC721Permit} from \\\"../interfaces/IERC721Permit.sol\\\";\\nimport {ISubstitute} from \\\"../interfaces/ISubstitute.sol\\\";\\nimport {IController} from \\\"../interfaces/IController.sol\\\";\\nimport {ReentrancyGuard} from \\\"./ReentrancyGuard.sol\\\";\\n\\nabstract contract Controller is\\n    IController,\\n    ERC1155Holder,\\n    CloberMarketSwapCallbackReceiver,\\n    Ownable2Step,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using CouponKeyLibrary for CouponKey;\\n    using CouponLibrary for Coupon;\\n\\n    IWrapped1155Factory internal immutable _wrapped1155Factory;\\n    CloberMarketFactory internal immutable _cloberMarketFactory;\\n    ICouponManager internal immutable _couponManager;\\n    IWETH9 internal immutable _weth;\\n\\n    mapping(uint256 couponId => address market) internal _couponMarkets;\\n\\n    constructor(address wrapped1155Factory, address cloberMarketFactory, address couponManager, address weth) {\\n        _wrapped1155Factory = IWrapped1155Factory(wrapped1155Factory);\\n        _cloberMarketFactory = CloberMarketFactory(cloberMarketFactory);\\n        _couponManager = ICouponManager(couponManager);\\n        _weth = IWETH9(weth);\\n    }\\n\\n    modifier wrapETH() {\\n        if (address(this).balance > 0) _weth.deposit{value: address(this).balance}();\\n        _;\\n    }\\n\\n    function _executeCouponTrade(\\n        address user,\\n        address token,\\n        Coupon[] memory couponsToMint,\\n        Coupon[] memory couponsToBurn,\\n        uint256 amountToPay,\\n        uint256 maxPayInterest,\\n        uint256 leftRequiredInterest\\n    ) internal {\\n        if (couponsToBurn.length > 0) {\\n            Coupon memory lastCoupon = couponsToBurn[couponsToBurn.length - 1];\\n            assembly {\\n                mstore(couponsToBurn, sub(mload(couponsToBurn), 1))\\n            }\\n            bytes memory data = abi.encode(\\n                user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\\n            );\\n            assembly {\\n                mstore(couponsToBurn, add(mload(couponsToBurn), 1))\\n            }\\n\\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\\n            uint256 dy = lastCoupon.amount - IERC20(market.baseToken()).balanceOf(address(this));\\n            market.marketOrder(address(this), type(uint16).max, type(uint64).max, dy, 1, data);\\n        } else if (couponsToMint.length > 0) {\\n            Coupon memory lastCoupon = couponsToMint[couponsToMint.length - 1];\\n            assembly {\\n                mstore(couponsToMint, sub(mload(couponsToMint), 1))\\n            }\\n            bytes memory data = abi.encode(\\n                user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\\n            );\\n            assembly {\\n                mstore(couponsToMint, add(mload(couponsToMint), 1))\\n            }\\n\\n            CloberOrderBook market = CloberOrderBook(_couponMarkets[lastCoupon.id()]);\\n            market.marketOrder(address(this), 0, 0, lastCoupon.amount, 2, data);\\n        } else {\\n            if (leftRequiredInterest > 0) revert ControllerSlippage();\\n            _ensureBalance(token, user, amountToPay);\\n        }\\n    }\\n\\n    function cloberMarketSwapCallback(\\n        address inputToken,\\n        address,\\n        uint256 inputAmount,\\n        uint256 outputAmount,\\n        bytes calldata data\\n    ) external payable {\\n        // check if caller is registered market\\n        if (_cloberMarketFactory.getMarketHost(msg.sender) == address(0)) revert InvalidAccess();\\n\\n        address asset = CloberOrderBook(msg.sender).quoteToken();\\n        address user;\\n        Coupon memory lastCoupon;\\n        unchecked {\\n            Coupon[] memory couponsToMint;\\n            Coupon[] memory couponsToBurn;\\n            uint256 amountToPay;\\n            uint256 maxPayInterest;\\n            uint256 leftRequiredInterest;\\n            (user, lastCoupon, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest) =\\n                abi.decode(data, (address, Coupon, Coupon[], Coupon[], uint256, uint256, uint256));\\n\\n            if (asset == inputToken) {\\n                if (maxPayInterest < inputAmount) revert ControllerSlippage();\\n                maxPayInterest -= inputAmount;\\n                amountToPay += inputAmount;\\n            } else {\\n                if (leftRequiredInterest > outputAmount) {\\n                    leftRequiredInterest -= outputAmount;\\n                } else {\\n                    leftRequiredInterest = 0;\\n                }\\n            }\\n\\n            _executeCouponTrade(\\n                user, asset, couponsToMint, couponsToBurn, amountToPay, maxPayInterest, leftRequiredInterest\\n            );\\n        }\\n\\n        // transfer input tokens\\n        if (inputAmount > 0) IERC20(inputToken).safeTransfer(msg.sender, inputAmount);\\n        uint256 couponBalance = IERC20(inputToken).balanceOf(address(this));\\n        if (asset != inputToken && couponBalance > 0) {\\n            bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(lastCoupon.key);\\n            _wrapped1155Factory.unwrap(address(_couponManager), lastCoupon.id(), couponBalance, user, metadata);\\n        }\\n    }\\n\\n    function _permitERC20(address token, ERC20PermitParams calldata p) internal {\\n        if (p.signature.deadline > 0) {\\n            try IERC20Permit(ISubstitute(token).underlyingToken()).permit(\\n                msg.sender,\\n                address(this),\\n                p.permitAmount,\\n                p.signature.deadline,\\n                p.signature.v,\\n                p.signature.r,\\n                p.signature.s\\n            ) {} catch {}\\n        }\\n    }\\n\\n    function _permitERC721(IERC721Permit permitNFT, uint256 positionId, PermitSignature calldata p) internal {\\n        if (p.deadline > 0) try permitNFT.permit(address(this), positionId, p.deadline, p.v, p.r, p.s) {} catch {}\\n    }\\n\\n    function _burnAllSubstitute(address substitute, address to) internal {\\n        uint256 leftAmount = IERC20(substitute).balanceOf(address(this));\\n        if (leftAmount == 0) return;\\n        ISubstitute(substitute).burn(leftAmount, to);\\n    }\\n\\n    function _ensureBalance(address token, address user, uint256 amount) internal {\\n        address underlyingToken = ISubstitute(token).underlyingToken();\\n        uint256 thisBalance = IERC20(token).balanceOf(address(this));\\n        uint256 underlyingBalance = IERC20(underlyingToken).balanceOf(address(this));\\n        if (amount > thisBalance + underlyingBalance) {\\n            unchecked {\\n                IERC20(underlyingToken).safeTransferFrom(user, address(this), amount - thisBalance - underlyingBalance);\\n                underlyingBalance = amount - thisBalance;\\n            }\\n        }\\n        if (underlyingBalance > 0) {\\n            IERC20(underlyingToken).approve(token, underlyingBalance);\\n            ISubstitute(token).mint(underlyingBalance, address(this));\\n        }\\n    }\\n\\n    function _wrapCoupons(Coupon[] memory coupons) internal {\\n        // wrap 1155 to 20\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _couponManager.safeBatchTransferFrom(address(this), address(_wrapped1155Factory), coupons, metadata);\\n    }\\n\\n    function _unwrapCoupons(Coupon[] memory coupons) internal {\\n        uint256[] memory tokenIds = new uint256[](coupons.length);\\n        uint256[] memory amounts = new uint256[](coupons.length);\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                tokenIds[i] = coupons[i].id();\\n                amounts[i] = coupons[i].amount;\\n            }\\n        }\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155BatchMetadata(coupons);\\n        _wrapped1155Factory.batchUnwrap(address(_couponManager), tokenIds, amounts, address(this), metadata);\\n    }\\n\\n    function getCouponMarket(CouponKey memory couponKey) external view returns (address) {\\n        return _couponMarkets[couponKey.toId()];\\n    }\\n\\n    function setCouponMarket(CouponKey memory couponKey, address cloberMarket) public virtual onlyOwner {\\n        bytes memory metadata = Wrapped1155MetadataBuilder.buildWrapped1155Metadata(couponKey);\\n        uint256 id = couponKey.toId();\\n        address wrappedCoupon = _wrapped1155Factory.getWrapped1155(address(_couponManager), id, metadata);\\n        CloberMarketFactory.MarketInfo memory marketInfo = _cloberMarketFactory.getMarketInfo(cloberMarket);\\n        if (\\n            (marketInfo.host == address(0)) || (CloberOrderBook(cloberMarket).baseToken() != wrappedCoupon)\\n                || (CloberOrderBook(cloberMarket).quoteToken() != couponKey.asset)\\n        ) {\\n            revert InvalidMarket();\\n        }\\n\\n        _couponMarkets[id] = cloberMarket;\\n        emit SetCouponMarket(couponKey.asset, couponKey.epoch, cloberMarket);\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x7f24fdb5876daf10ca35b37838ddc5a19e66223f1ff53155ac48a96e0e73610e\",\"license\":\"-\"},\"contracts/libraries/Coupon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"../libraries/Epoch.sol\\\";\\nimport {CouponKey, CouponKeyLibrary} from \\\"./CouponKey.sol\\\";\\n\\nstruct Coupon {\\n    CouponKey key;\\n    uint256 amount;\\n}\\n\\nlibrary CouponLibrary {\\n    using CouponKeyLibrary for CouponKey;\\n\\n    function from(address asset, Epoch epoch, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: CouponKey({asset: asset, epoch: epoch}), amount: amount});\\n    }\\n\\n    function from(CouponKey memory couponKey, uint256 amount) internal pure returns (Coupon memory) {\\n        return Coupon({key: couponKey, amount: amount});\\n    }\\n\\n    function id(Coupon memory coupon) internal pure returns (uint256) {\\n        return coupon.key.toId();\\n    }\\n}\\n\",\"keccak256\":\"0xe3bd591859541e734e6b18f7c742efff2ea320805345b8dcf9597ea3e778d076\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/CouponKey.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.0;\\n\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nstruct CouponKey {\\n    address asset;\\n    Epoch epoch;\\n}\\n\\nlibrary CouponKeyLibrary {\\n    function toId(CouponKey memory key) internal pure returns (uint256 id) {\\n        uint16 epoch = Epoch.unwrap(key.epoch);\\n        address asset = key.asset;\\n        assembly {\\n            id := add(asset, shl(160, epoch))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x90d6688cd9d666140bf81ed569d5c41174cb89e06f108568a591b1cab2a1371b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/Epoch.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\ntype Epoch is uint16;\\n\\nusing {gt as >, gte as >=, lt as <, lte as <=, eq as ==, ne as !=} for Epoch global;\\n\\nfunction gt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) > Epoch.unwrap(b);\\n}\\n\\nfunction gte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) >= Epoch.unwrap(b);\\n}\\n\\nfunction lt(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) < Epoch.unwrap(b);\\n}\\n\\nfunction lte(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) <= Epoch.unwrap(b);\\n}\\n\\nfunction eq(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) == Epoch.unwrap(b);\\n}\\n\\nfunction ne(Epoch a, Epoch b) pure returns (bool) {\\n    return Epoch.unwrap(a) != Epoch.unwrap(b);\\n}\\n\\nlibrary EpochLibrary {\\n    using EpochLibrary for Epoch;\\n\\n    error EpochOverflow();\\n\\n    uint256 internal constant MONTHS_PER_EPOCH = 1;\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function startTime(Epoch epoch) internal pure returns (uint256) {\\n        uint16 currentEpoch = Epoch.unwrap(epoch);\\n        if (currentEpoch == 0) return 0;\\n        unchecked {\\n            return _epochToTimestamp(currentEpoch - 1) + 1;\\n        }\\n    }\\n\\n    function endTime(Epoch epoch) internal pure returns (uint256) {\\n        return _epochToTimestamp(Epoch.unwrap(epoch));\\n    }\\n\\n    function lastExpiredEpoch() internal view returns (Epoch) {\\n        return current().sub(1);\\n    }\\n\\n    function current() internal view returns (Epoch) {\\n        return Epoch.wrap(_timestampToEpoch(block.timestamp));\\n    }\\n\\n    function add(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) + epochs);\\n    }\\n\\n    function sub(Epoch epoch, uint16 epochs) internal pure returns (Epoch) {\\n        return Epoch.wrap(Epoch.unwrap(epoch) - epochs);\\n    }\\n\\n    function sub(Epoch e1, Epoch e2) internal pure returns (uint16) {\\n        return Epoch.unwrap(e1) - Epoch.unwrap(e2);\\n    }\\n\\n    function max(Epoch a, Epoch b) internal pure returns (Epoch) {\\n        return a > b ? a : b;\\n    }\\n\\n    // Inspired by https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary/blob/master/contracts/BokkyPooBahsDateTimeLibrary.sol\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _timestampToEpoch(uint256 timestamp) private pure returns (uint16) {\\n        unchecked {\\n            uint256 _days = timestamp / SECONDS_PER_DAY;\\n            int256 __days = int256(_days);\\n\\n            int256 L = __days + 68569 + OFFSET19700101;\\n            int256 N = (4 * L) / 146097;\\n            L = L - (146097 * N + 3) / 4;\\n            int256 _year = (4000 * (L + 1)) / 1461001;\\n            L = L - (1461 * _year) / 4 + 31;\\n            int256 _month = (80 * L) / 2447;\\n            L = _month / 11;\\n            _month = _month + 2 - 12 * L;\\n            _year = 100 * (N - 49) + _year + L;\\n\\n            uint256 epoch = uint256((_year - 1970) * 12 + _month - 1) / MONTHS_PER_EPOCH;\\n            if (epoch > type(uint16).max) revert EpochOverflow();\\n            return uint16(epoch);\\n        }\\n    }\\n\\n    function _epochToTimestamp(uint16 epoch) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 months = MONTHS_PER_EPOCH + MONTHS_PER_EPOCH * epoch;\\n            uint256 year = months / 12 + 1970;\\n            months = (months % 12) << 4;\\n            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)) {\\n                // 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366\\n                months = 0x016E014F0131011200F400D500B600980079005B003C001F0000 >> months;\\n            } else {\\n                // 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\\n                months = 0x016D014E0130011100F300D400B500970078005A003B001F0000 >> months;\\n            }\\n            return (\\n                (months & 0xffff) + 365 * (year - 1970) + (year - 1969) / 4 - (year - 1901) / 100 + (year - 1601) / 400\\n            ) * SECONDS_PER_DAY - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0cd1bac5f8222900e18564e78b008420877383d46684e9c79b926b5cf4a7535b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/libraries/LoanPosition.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {Epoch, EpochLibrary} from \\\"./Epoch.sol\\\";\\nimport {Coupon, CouponLibrary} from \\\"./Coupon.sol\\\";\\n\\nstruct LoanPosition {\\n    uint64 nonce;\\n    Epoch expiredWith;\\n    bool isSettled;\\n    address collateralToken;\\n    address debtToken;\\n    uint256 collateralAmount;\\n    uint256 debtAmount;\\n}\\n\\nlibrary LoanPositionLibrary {\\n    error UnmatchedPosition();\\n    error InvalidPositionEpoch();\\n\\n    using EpochLibrary for Epoch;\\n\\n    function getAndIncrementNonce(LoanPosition storage positionStorage) internal returns (uint64 nonce) {\\n        nonce = positionStorage.nonce++;\\n    }\\n\\n    function calculateCouponRequirement(LoanPosition memory oldPosition, LoanPosition memory newPosition)\\n        internal\\n        view\\n        returns (Coupon[] memory mintCoupons, Coupon[] memory burnCoupons)\\n    {\\n        if (\\n            !(\\n                oldPosition.collateralToken == newPosition.collateralToken\\n                    && oldPosition.debtToken == newPosition.debtToken && oldPosition.nonce == newPosition.nonce\\n            )\\n        ) revert UnmatchedPosition();\\n\\n        Epoch latestExpiredEpoch = EpochLibrary.lastExpiredEpoch();\\n        if (latestExpiredEpoch > newPosition.expiredWith || latestExpiredEpoch > oldPosition.expiredWith) {\\n            revert InvalidPositionEpoch();\\n        }\\n\\n        uint256 mintCouponsLength = oldPosition.expiredWith.sub(latestExpiredEpoch);\\n        uint256 burnCouponsLength = newPosition.expiredWith.sub(latestExpiredEpoch);\\n        unchecked {\\n            uint256 minCount = Math.min(mintCouponsLength, burnCouponsLength);\\n            if (newPosition.debtAmount > oldPosition.debtAmount) {\\n                mintCouponsLength -= minCount;\\n            } else if (newPosition.debtAmount < oldPosition.debtAmount) {\\n                burnCouponsLength -= minCount;\\n            } else {\\n                burnCouponsLength -= minCount;\\n                mintCouponsLength -= minCount;\\n            }\\n        }\\n\\n        mintCoupons = new Coupon[](mintCouponsLength);\\n        burnCoupons = new Coupon[](burnCouponsLength);\\n        mintCouponsLength = 0;\\n        burnCouponsLength = 0;\\n        uint256 farthestExpiredEpochs = newPosition.expiredWith.max(oldPosition.expiredWith).sub(latestExpiredEpoch);\\n        unchecked {\\n            Epoch epoch = latestExpiredEpoch;\\n            for (uint256 i = 0; i < farthestExpiredEpochs; ++i) {\\n                epoch = epoch.add(1);\\n                uint256 newAmount = newPosition.expiredWith < epoch ? 0 : newPosition.debtAmount;\\n                uint256 oldAmount = oldPosition.expiredWith < epoch ? 0 : oldPosition.debtAmount;\\n                if (newAmount > oldAmount) {\\n                    burnCoupons[burnCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, newAmount - oldAmount);\\n                } else if (newAmount < oldAmount) {\\n                    mintCoupons[mintCouponsLength++] =\\n                        CouponLibrary.from(oldPosition.debtToken, epoch, oldAmount - newAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc9918038441dfb9a7b5cfd8e99317abeb37b67caa5d5df0235a3abe21571f923\",\"license\":\"-\"},\"contracts/libraries/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Clober (https://github.com/clober-dex/coupon-finance/blob/main/contracts/libraries/ReentrancyGuard.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    error Reentrancy();\\n\\n    uint256 internal _locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        if (_locked != 1) revert Reentrancy();\\n\\n        _locked = 2;\\n\\n        _;\\n\\n        _locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0x6837f00e9cb3a468d219eac35db4ea6d5273cc821181d126aa37acd56716d004\",\"license\":\"AGPL-3.0-only\"},\"contracts/libraries/Wrapped1155MetadataBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.coupon.finance/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {CouponKey} from \\\"./CouponKey.sol\\\";\\nimport {Coupon} from \\\"./Coupon.sol\\\";\\nimport {Epoch} from \\\"./Epoch.sol\\\";\\n\\nlibrary Wrapped1155MetadataBuilder {\\n    function buildWrapped1155Metadata(CouponKey memory couponKey) internal view returns (bytes memory) {\\n        string memory tokenSymbol = IERC20Metadata(couponKey.asset).symbol();\\n        string memory epochString = Strings.toString(Epoch.unwrap(couponKey.epoch));\\n        // @dev assume that tokenSymbol.length <= 12\\n        bytes32 nameData = bytes32(abi.encodePacked(tokenSymbol, \\\" Bond Coupon (\\\", epochString, \\\")\\\"));\\n        bytes32 symbolData = bytes32(abi.encodePacked(tokenSymbol, \\\"-CP\\\", epochString));\\n        assembly {\\n            let addLength := mul(2, add(mload(tokenSymbol), mload(epochString)))\\n            nameData := add(nameData, add(30, addLength))\\n            symbolData := add(symbolData, add(6, addLength))\\n        }\\n        return abi.encodePacked(nameData, symbolData, bytes1(IERC20Metadata(couponKey.asset).decimals()));\\n    }\\n\\n    function buildWrapped1155BatchMetadata(Coupon[] memory coupons) internal view returns (bytes memory data) {\\n        unchecked {\\n            for (uint256 i = 0; i < coupons.length; ++i) {\\n                data = bytes.concat(data, buildWrapped1155Metadata(coupons[i].key));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x63d0fa70de9bc8d2d450181c0c2a2902e549a8d823b0d8d2e46092ae2a2ef7ac\",\"license\":\"-\"}},\"version\":1}",
  "bytecode": "0x61014060405260016002553480156200001757600080fd5b5060405162004ac338038062004ac38339810160408190526200003a9162000109565b8585858562000049336200007e565b6001600160a01b0393841660805291831660a052821660c052811660e052918216610100521661012052506200018a92505050565b600180546001600160a01b031916905562000099816200009c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010457600080fd5b919050565b60008060008060008060c087890312156200012357600080fd5b6200012e87620000ec565b95506200013e60208801620000ec565b94506200014e60408801620000ec565b93506200015e60608801620000ec565b92506200016e60808801620000ec565b91506200017e60a08801620000ec565b90509295509295509295565b60805160a05160c05160e0516101005161012051614817620002ac60003960008181612640015281816126c2015261278f0152600081816104740152818161051f015281816105a70152818161064f01528181610a8401528181610b4e01528181610bfd01528181610d0101528181610d8501528181610e7d01528181610f1301528181611000015281816110c20152818161113f015281816111d9015281816112b40152818161134b0152818161154701526116130152600081816103c6015281816113ed0152818161257d01526125b601526000818161078b01528181611a84015281816120180152612e7001526000818161084901526117e701526000818161075c01528181611a55015281816120470152612e4301526148176000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063e30c397811610059578063e30c397814610298578063f23a6e61146102b6578063f2fde38b146102fb578063fd235fda1461031b57600080fd5b80638da5cb5b146101c1578063bc197c81146101f3578063bf4415dc1461025157600080fd5b806346a114e2116100bb57806346a114e21461015757806347dd8b1314610184578063715018a61461019757806379ba5097146101ac57600080fd5b806301ffc9a7146100ed5780632543634a1461012257806329b084c11461013757600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d6101083660046135c1565b61032e565b60405190151581526020015b60405180910390f35b61013561013036600461370e565b610397565b005b34801561014357600080fd5b50610135610152366004613809565b61072a565b34801561016357600080fd5b50610177610172366004613841565b610a77565b60405161011991906138c6565b6101356101923660046138d9565b6113be565b3480156101a357600080fd5b50610135611689565b3480156101b857600080fd5b5061013561169d565b3480156101cd57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610119565b3480156101ff57600080fd5b5061023861020e366004613a07565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610119565b34801561025d57600080fd5b506101db61026c366004613ab5565b602081810151915160a09290921b9091016000908152600390915260409020546001600160a01b031690565b3480156102a457600080fd5b506001546001600160a01b03166101db565b3480156102c257600080fd5b506102386102d1366004613ad1565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561030757600080fd5b50610135610316366004613b3a565b611730565b610135610329366004613b57565b6117ae565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061039157507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002546001146103ba5760405163558a1e0360e11b815260040160405180910390fd5b600280554715610439577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b50505050505b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101889052879033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190613c11565b6001600160a01b03161461050657604051633006171960e21b815260040160405180910390fd5b60405163eb02c30160e01b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190613c49565b90506105a2816060015184611b0f565b6105cd7f00000000000000000000000000000000000000000000000000000000000000008a86611c2c565b878160a0018181516105df9190613cf5565b90525060c0810180518891906105f6908390613cf5565b90525060a08181015160c08084015160208086015160408051928301959095528185019290925261ffff9091166060820152608081018a9052600081850152825180820390940184529081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063815483199061068a908d90339086908c9060e001613d08565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016106b591906138c6565b6000604051808303816000875af11580156106d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106fc9190810190613d92565b5061070b826060015133611cd9565b610719826080015133611cd9565b505060016002555050505050505050565b610732611dba565b600061073d83611e14565b90506000610756846020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b81526004016107ca93929190613dc7565b602060405180830381865afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190613c11565b6040517f0cf85bcc0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690630cf85bcc9060240160a060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190613e18565b80519091506001600160a01b031615806109415750816001600160a01b0316856001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613c11565b6001600160a01b031614155b806109c3575085600001516001600160a01b0316856001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190613c11565b6001600160a01b031614155b156109fa576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a8116918217909255928a01518a519251939461ffff9091169392909116917f36b618d929a94eeca73ecddec2f5e49fdb6e4bde0a20e2987baaabb9e7fc21ab9190a4505050505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ac257604051633006171960e21b815260040160405180910390fd5b600080606084806020019051810190610adb9190613eb0565b909750919450925090506000839003610be45760008086806020019051810190610b059190613f31565b6040517fee1fe2ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301528084166024830152919a509294509092507f0000000000000000000000000000000000000000000000000000000000000000169063ee1fe2ad906044016020604051808303816000875af1158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190613f95565b945084604051602001610bd091815260200190565b604051602081830303815290604052955050505b60405163eb02c30160e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190613c49565b905060008087806020019051810190610c899190613fae565b61ffff9092166020880181905260c0880184905260a088018590526040517f42e910af000000000000000000000000000000000000000000000000000000008152600481018c905260248101959095526044850193909352606484019290925290935091506000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342e910af906084016000604051808303816000875af1158015610d4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7291908101906140ba565b93509350935093506000821215610e2a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301e3366788606001513085610dc29061412e565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b505050505b6000811315610edc5760808701516040517f01e336670000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b158015610ec357600080fd5b505af1158015610ed7573d6000803e3d6000fd5b505050505b835115610f85576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610f4a90879030906004016141c5565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b50505050610f8584611fda565b610faf898860800151868660008612610f9f576000610fa8565b610fa88661412e565b8b8b6120a9565b875115610fcc57610fc9876080015188606001518a6123dd565b50505b600082131561112157610fe487606001518a84612a9d565b606087015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107d9190614201565b5060608701516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b15801561110857600080fd5b505af115801561111c573d6000803e3d6000fd5b505050505b60008112156112745760808701516001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006111678461412e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156111b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d69190614201565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663338b5dea8860800151836112159061412e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050505b82511561131c5761128483612ce5565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e2906112e990869060040161421c565b600060405180830381600087803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b15801561139757600080fd5b505af11580156113ab573d6000803e3d6000fd5b5050505050505050505050505050919050565b6002546001146113e15760405163558a1e0360e11b815260040160405180910390fd5b600280554715611460577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561144657600080fd5b505af115801561145a573d6000803e3d6000fd5b50505050505b61146a8882611b0f565b6000868661148e61147c60018861422f565b611484612ed8565b61ffff1690612ee8565b60408051602081019490945283019190915261ffff16606082015260808101869052600060a082015260c00160405160208183030381529060405290506000338a8a846040516020016114e393929190614251565b60408051601f1981840301815290829052611504939291879060200161427d565b60408051601f19818403018152908290527f8154831900000000000000000000000000000000000000000000000000000000825291506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063815483199061157c9085906004016138c6565b6000604051808303816000875af115801561159b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c39190810190613d92565b90506000818060200190518101906115db9190613f95565b90506115e78b33611cd9565b6115f18a33611cd9565b6040516323b872dd60e01b8152306004820152336024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561165f57600080fd5b505af1158015611673573d6000803e3d6000fd5b5050600160025550505050505050505050505050565b611691611dba565b61169b6000612efb565b565b60015433906001600160a01b031681146117245760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61172d81612efb565b50565b611738611dba565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556117766000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040517fafdd9edc0000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063afdd9edc90602401602060405180830381865afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190613c11565b6001600160a01b03160361187957604051633006171960e21b815260040160405180910390fd5b6000336001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dd9190613c11565b604080516080810182526000918101828152606082018390528152602081018290529192509060608060008080611916898b018b614343565b959c50939a5091985096509450925090506001600160a01b03808f1690891603611969578b82101561195b57604051630f271b5560e41b815260040160405180910390fd5b918b0191908b90039061197d565b8a811115611979578a900361197d565b5060005b61198c878987878787876120a9565b505050505060008711156119ae576119ae6001600160a01b038a163389612f21565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613f95565b9050896001600160a01b0316846001600160a01b031614158015611a3d5750600081115b15611b03576000611a518360000151611e14565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000611aac86612fb2565b8588866040518663ffffffff1660e01b8152600401611acf9594939291906143e8565b600060405180830381600087803b158015611ae957600080fd5b505af1158015611afd573d6000803e3d6000fd5b50505050505b50505050505050505050565b602081013515611c2857816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190613c11565b6001600160a01b031663d505accf333084356020860135611ba2606088016040890161442f565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606084013560a4820152608084013560c482015260e401600060405180830381600087803b158015611c1557600080fd5b505af1925050508015611c26575060015b505b5050565b803515611c26576001600160a01b038316637ac2ff7b30848435611c56604087016020880161442f565b604080516001600160e01b031960e088901b1681526001600160a01b0390951660048601526024850193909352604484019190915260ff1660648301528401356084820152606084013560a482015260c401600060405180830381600087803b158015611cc257600080fd5b505af1925050508015611cd3575060015b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d449190613f95565b905080600003611d5357505050565b604051633f34d4cf60e21b8152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b0316331461169b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161171b565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e82919081019061444c565b90506000611e97846020015161ffff16612fc7565b905060008282604051602001611eae929190614495565b604051602081830303815290604052611ec690614517565b905060008383604051602001611edd92919061453b565b604051602081830303815290604052611ef590614517565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190614593565b60f81b604051602001611fc09392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b6000611fe582613067565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e7232906120739030907f000000000000000000000000000000000000000000000000000000000000000090879087906004016145b0565b600060405180830381600087803b15801561208d57600080fd5b505af11580156120a1573d6000803e3d6000fd5b505050505050565b8351156122a857600084600186516120c191906145dc565b815181106120d1576120d16145ef565b60200260200101519050600185510385526000888288888888886040516020016121019796959493929190614605565b60405160208183030381529060405290506001865101865260006003600061212885612fb2565b815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b09190613c11565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190613f95565b846020015161222991906145dc565b60405163168da99d60e31b81529091506001600160a01b0383169063b46d4ce89061226d90309061ffff9067ffffffffffffffff9087906001908b9060040161468c565b600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b5050505050505050611db1565b8451156123b357600085600187516122c091906145dc565b815181106122d0576122d06145ef565b60200260200101519050600186510386526000888288888888886040516020016123009796959493929190614605565b60405160208183030381529060405290506001875101875260006003600061232785612fb2565b8152602080820192909252604090810160009081205492860151915163168da99d60e31b81526001600160a01b039093169350839263b46d4ce892612379923092909182916002908a9060040161468c565b600060405180830381600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b50505050505050611db1565b80156123d257604051630f271b5560e41b815260040160405180910390fd5b611db1868885612a9d565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b038716906370a0823190602401602060405180830381865afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190613f95565b90506000866001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561248e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b29190613c11565b90506000866001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190613c11565b604051633f34d4cf60e21b8152600481018590523060248201529091506001600160a01b0389169063fcd3533c90604401600060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603612629577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561260f57600080fd5b505af1158015612623573d6000803e3d6000fd5b50505050505b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905283169063095ea7b3906044016020604051808303816000875af1158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190614201565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886040516126f891906146d7565b6000604051808303816000865af19150503d8060008114612735576040519150601f19603f3d011682016040523d82523d6000602084013e61273a565b606091505b50915091508161277857806040517feff8841400000000000000000000000000000000000000000000000000000000815260040161171b91906138c6565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015285169063095ea7b3906044016020604051808303816000875af11580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190614201565b506040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015612850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128749190613f95565b6040516370a0823160e01b81523060048201529096506001600160a01b038516906370a0823190602401602060405180830381865afa1580156128bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128df9190613f95565b965086156129bc5760405163095ea7b360e01b81526001600160a01b038b811660048301526024820189905285169063095ea7b3906044016020604051808303816000875af1158015612936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295a9190614201565b506040516394bf804d60e01b8152600481018890523060248201526001600160a01b038b16906394bf804d90604401600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b505050505b60405163095ea7b360e01b81526001600160a01b038a811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af1158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f9190614201565b506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038a16906394bf804d90604401600060405180830381600087803b158015612a7857600080fd5b505af1158015612a8c573d6000803e3d6000fd5b505050505050505050935093915050565b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190613c11565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015612b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6f9190613f95565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdd9190613f95565b9050612be98183613cf5565b841115612c0f57612c0a6001600160a01b03841686308588038590036130cd565b508083035b80156120a15760405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c889190614201565b506040516394bf804d60e01b8152600481018290523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b158015612cd157600080fd5b505af1158015611b03573d6000803e3d6000fd5b6000815167ffffffffffffffff811115612d0157612d016135eb565b604051908082528060200260200182016040528015612d2a578160200160208202803683370190505b5090506000825167ffffffffffffffff811115612d4957612d496135eb565b604051908082528060200260200182016040528015612d72578160200160208202803683370190505b50905060005b8351811015612e0457612da3848281518110612d9657612d966145ef565b6020026020010151612fb2565b838281518110612db557612db56145ef565b602002602001018181525050838181518110612dd357612dd36145ef565b602002602001015160200151828281518110612df157612df16145ef565b6020908102919091010152600101612d78565b506000612e1084613067565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa18690612ea0907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401614723565b600060405180830381600087803b158015612eba57600080fd5b505af1158015612ece573d6000803e3d6000fd5b5050505050505050565b6000612ee342613105565b905090565b6000612ef48284614781565b9392505050565b6001805473ffffffffffffffffffffffffffffffffffffffff1916905561172d816131f3565b6040516001600160a01b038316602482015260448101829052611c269084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613250565b80516020810151905160009160a01b01610391565b60606000612fd483613338565b600101905060008167ffffffffffffffff811115612ff457612ff46135eb565b6040519080825280601f01601f19166020018201604052801561301e576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461302857509392505050565b606060005b82518110156130c7578161309c84838151811061308b5761308b6145ef565b602002602001015160000151611e14565b6040516020016130ad9291906147b2565b60408051601f19818403018152919052915060010161306c565b50919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611cd39085906323b872dd60e01b90608401612f66565b600080620151808304905080622649658101600062023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161316a5761316a61479c565b059050600b8105935083600c0281600201039050838260318503606402010191506000600180836107b28603600c020103816131a8576131a861479c565b04905061ffff8111156131e7576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006132a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661341a9092919063ffffffff16565b90508051600014806132c65750808060200190518101906132c69190614201565b611c265760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161171b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613381577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106133ad576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106133cb57662386f26fc10000830492506010015b6305f5e10083106133e3576305f5e100830492506008015b61271083106133f757612710830492506004015b60648310613409576064830492506002015b600a83106103915760010192915050565b60606134298484600085613431565b949350505050565b6060824710156134a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161171b565b600080866001600160a01b031685876040516134c591906146d7565b60006040518083038185875af1925050503d8060008114613502576040519150601f19603f3d011682016040523d82523d6000602084013e613507565b606091505b509150915061351887838387613523565b979650505050505050565b6060831561359257825160000361358b576001600160a01b0385163b61358b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161171b565b5081613429565b61342983838151156135a75781518083602001fd5b8060405162461bcd60e51b815260040161171b91906138c6565b6000602082840312156135d357600080fd5b81356001600160e01b031981168114612ef457600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613624576136246135eb565b60405290565b60405160e0810167ffffffffffffffff81118282101715613624576136246135eb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613676576136766135eb565b604052919050565b600067ffffffffffffffff821115613698576136986135eb565b50601f01601f191660200190565b600082601f8301126136b757600080fd5b81356136ca6136c58261367e565b61364d565b8181528460208386010111156136df57600080fd5b816020850160208301376000918101602001919091529392505050565b600060a082840312156130c757600080fd5b60008060008060008060008789036101c081121561372b57600080fd5b88359750602089013596506040890135955060608901359450608089013567ffffffffffffffff81111561375e57600080fd5b61376a8b828c016136a6565b9450506080609f198201121561377f57600080fd5b5060a088019150613794896101208a016136fc565b905092959891949750929550565b6001600160a01b038116811461172d57600080fd5b61ffff8116811461172d57600080fd5b6000604082840312156137d957600080fd5b6137e1613601565b905081356137ee816137a2565b815260208201356137fe816137b7565b602082015292915050565b6000806060838503121561381c57600080fd5b61382684846137c7565b91506040830135613836816137a2565b809150509250929050565b60006020828403121561385357600080fd5b813567ffffffffffffffff81111561386a57600080fd5b613429848285016136a6565b60005b83811015613891578181015183820152602001613879565b50506000910152565b600081518084526138b2816020860160208601613876565b601f01601f19169290920160200192915050565b602081526000612ef4602083018461389a565b600080600080600080600080610180898b0312156138f657600080fd5b8835613901816137a2565b97506020890135613911816137a2565b965060408901359550606089013594506080890135935060a0890135613936816137b7565b925060c089013567ffffffffffffffff81111561395257600080fd5b61395e8b828c016136a6565b92505061396e8a60e08b016136fc565b90509295985092959890939650565b600067ffffffffffffffff821115613997576139976135eb565b5060051b60200190565b600082601f8301126139b257600080fd5b813560206139c26136c58361397d565b82815260059290921b840181019181810190868411156139e157600080fd5b8286015b848110156139fc57803583529183019183016139e5565b509695505050505050565b600080600080600060a08688031215613a1f57600080fd5b8535613a2a816137a2565b94506020860135613a3a816137a2565b9350604086013567ffffffffffffffff80821115613a5757600080fd5b613a6389838a016139a1565b94506060880135915080821115613a7957600080fd5b613a8589838a016139a1565b93506080880135915080821115613a9b57600080fd5b50613aa8888289016136a6565b9150509295509295909350565b600060408284031215613ac757600080fd5b612ef483836137c7565b600080600080600060a08688031215613ae957600080fd5b8535613af4816137a2565b94506020860135613b04816137a2565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b2e57600080fd5b613aa8888289016136a6565b600060208284031215613b4c57600080fd5b8135612ef4816137a2565b60008060008060008060a08789031215613b7057600080fd5b8635613b7b816137a2565b95506020870135613b8b816137a2565b94506040870135935060608701359250608087013567ffffffffffffffff80821115613bb657600080fd5b818901915089601f830112613bca57600080fd5b813581811115613bd957600080fd5b8a6020828501011115613beb57600080fd5b6020830194508093505050509295509295509295565b8051613c0c816137a2565b919050565b600060208284031215613c2357600080fd5b8151612ef4816137a2565b8051613c0c816137b7565b80518015158114613c0c57600080fd5b600060e08284031215613c5b57600080fd5b613c6361362a565b825167ffffffffffffffff81168114613c7b57600080fd5b8152613c8960208401613c2e565b6020820152613c9a60408401613c39565b6040820152613cab60608401613c01565b6060820152613cbc60808401613c01565b608082015260a083015160a082015260c083015160c08201528091505092915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561039157610391613cdf565b8481526001600160a01b0384166020820152608060408201526000613d30608083018561389a565b8281036060840152613518818561389a565b6000613d506136c58461367e565b9050828152838383011115613d6457600080fd5b612ef4836020830184613876565b600082601f830112613d8357600080fd5b612ef483835160208501613d42565b600060208284031215613da457600080fd5b815167ffffffffffffffff811115613dbb57600080fd5b61342984828501613d72565b6001600160a01b0384168152826020820152606060408201526000613def606083018461389a565b95945050505050565b80516fffffffffffffffffffffffffffffffff81168114613c0c57600080fd5b600060a08284031215613e2a57600080fd5b60405160a0810181811067ffffffffffffffff82111715613e4d57613e4d6135eb565b6040528251613e5b816137a2565b8152602083015160038110613e6f57600080fd5b6020820152613e8060408401613df8565b6040820152613e9160608401613df8565b60608201526080830151613ea4816137a2565b60808201529392505050565b60008060008060808587031215613ec657600080fd5b845193506020850151613ed8816137a2565b604086015190935067ffffffffffffffff80821115613ef657600080fd5b613f0288838901613d72565b93506060870151915080821115613f1857600080fd5b50613f2587828801613d72565b91505092959194509250565b600080600060608486031215613f4657600080fd5b8351613f51816137a2565b6020850151909350613f62816137a2565b604085015190925067ffffffffffffffff811115613f7f57600080fd5b613f8b86828701613d72565b9150509250925092565b600060208284031215613fa757600080fd5b5051919050565b600080600080600060a08688031215613fc657600080fd5b85519450602086015193506040860151613fdf816137b7565b6060870151608090970151959894975095949392505050565b600082601f83011261400957600080fd5b815160206140196136c58361397d565b8281526060928302850182019282820191908785111561403857600080fd5b8387015b858110156140ad57808903828112156140555760008081fd5b61405d613601565b60408083121561406d5760008081fd5b614075613601565b92508351614082816137a2565b835283880151614091816137b7565b838901529181529082015181870152845292840192810161403c565b5090979650505050505050565b600080600080608085870312156140d057600080fd5b845167ffffffffffffffff808211156140e857600080fd5b6140f488838901613ff8565b9550602087015191508082111561410a57600080fd5b5061411787828801613ff8565b604087015160609097015195989097509350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361415f5761415f613cdf565b5060000390565b600081518084526020808501945080840160005b838110156141ba578151805180516001600160a01b0316895260209081015161ffff16818a0152015160408801526060909601959082019060010161417a565b509495945050505050565b6060815260006141d86060830185614166565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b60006020828403121561421357600080fd5b612ef482613c39565b602081526000612ef46020830184614166565b61ffff82811682821603908082111561424a5761424a613cdf565b5092915050565b60006001600160a01b03808616835280851660208401525060606040830152613def606083018461389a565b60ff851681526001600160a01b0384166020820152608060408201526000613d30608083018561389a565b6000606082840312156142ba57600080fd5b6142c2613601565b90506142ce83836137c7565b81526040820135602082015292915050565b600082601f8301126142f157600080fd5b813560206143016136c58361397d565b8281526060928302850182019282820191908785111561432057600080fd5b8387015b858110156140ad5761433689826142a8565b8452928401928101614324565b6000806000806000806000610120888a03121561435f57600080fd5b873561436a816137a2565b96506143798960208a016142a8565b9550608088013567ffffffffffffffff8082111561439657600080fd5b6143a28b838c016142e0565b965060a08a01359150808211156143b857600080fd5b506143c58a828b016142e0565b979a969950949760c08101359660e0820135965061010090910135945092505050565b60006001600160a01b03808816835286602084015285604084015280851660608401525060a0608083015261351860a083018461389a565b60ff8116811461172d57600080fd5b60006020828403121561444157600080fd5b8135612ef481614420565b60006020828403121561445e57600080fd5b815167ffffffffffffffff81111561447557600080fd5b8201601f8101841361448657600080fd5b61342984825160208401613d42565b600083516144a7818460208801613876565b7f20426f6e6420436f75706f6e202800000000000000000000000000000000000090830190815283516144e181600e840160208801613876565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156130c75760001960209190910360031b1b16919050565b6000835161454d818460208801613876565b7f2d435000000000000000000000000000000000000000000000000000000000009083019081528351614587816003840160208801613876565b01600301949350505050565b6000602082840312156145a557600080fd5b8151612ef481614420565b60006001600160a01b03808716835280861660208401525060806040830152613d306080830185614166565b8181038181111561039157610391613cdf565b634e487b7160e01b600052603260045260246000fd5b60006101206001600160a01b038a168352614645602084018a805180516001600160a01b0316835260209081015161ffff16818401520151604090910152565b80608084015261465781840189614166565b905082810360a084015261466b8188614166565b60c0840196909652505060e081019290925261010090910152949350505050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a082015260006131e760c083018461389a565b600082516146e9818460208701613876565b9190910192915050565b600081518084526020808501945080840160005b838110156141ba57815187529582019590820190600101614707565b60006001600160a01b03808816835260a0602084015261474660a08401886146f3565b838103604085015261475881886146f3565b905081861660608501528381036080850152614774818661389a565b9998505050505050505050565b61ffff81811683821601908082111561424a5761424a613cdf565b634e487b7160e01b600052601260045260246000fd5b600083516147c4818460208801613876565b8351908301906147d8818360208801613876565b0194935050505056fea2646970667358221220c79936f6a576e5e569d10dcd273e3126f5d912d13c42ab1a7effb73c8448853264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063e30c397811610059578063e30c397814610298578063f23a6e61146102b6578063f2fde38b146102fb578063fd235fda1461031b57600080fd5b80638da5cb5b146101c1578063bc197c81146101f3578063bf4415dc1461025157600080fd5b806346a114e2116100bb57806346a114e21461015757806347dd8b1314610184578063715018a61461019757806379ba5097146101ac57600080fd5b806301ffc9a7146100ed5780632543634a1461012257806329b084c11461013757600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d6101083660046135c1565b61032e565b60405190151581526020015b60405180910390f35b61013561013036600461370e565b610397565b005b34801561014357600080fd5b50610135610152366004613809565b61072a565b34801561016357600080fd5b50610177610172366004613841565b610a77565b60405161011991906138c6565b6101356101923660046138d9565b6113be565b3480156101a357600080fd5b50610135611689565b3480156101b857600080fd5b5061013561169d565b3480156101cd57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610119565b3480156101ff57600080fd5b5061023861020e366004613a07565b7fbc197c810000000000000000000000000000000000000000000000000000000095945050505050565b6040516001600160e01b03199091168152602001610119565b34801561025d57600080fd5b506101db61026c366004613ab5565b602081810151915160a09290921b9091016000908152600390915260409020546001600160a01b031690565b3480156102a457600080fd5b506001546001600160a01b03166101db565b3480156102c257600080fd5b506102386102d1366004613ad1565b7ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b34801561030757600080fd5b50610135610316366004613b3a565b611730565b610135610329366004613b57565b6117ae565b60006001600160e01b031982167f4e2312e000000000000000000000000000000000000000000000000000000000148061039157507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002546001146103ba5760405163558a1e0360e11b815260040160405180910390fd5b600280554715610439577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561041f57600080fd5b505af1158015610433573d6000803e3d6000fd5b50505050505b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101889052879033906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190613c11565b6001600160a01b03161461050657604051633006171960e21b815260040160405180910390fd5b60405163eb02c30160e01b8152600481018990526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190613c49565b90506105a2816060015184611b0f565b6105cd7f00000000000000000000000000000000000000000000000000000000000000008a86611c2c565b878160a0018181516105df9190613cf5565b90525060c0810180518891906105f6908390613cf5565b90525060a08181015160c08084015160208086015160408051928301959095528185019290925261ffff9091166060820152608081018a9052600081850152825180820390940184529081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063815483199061068a908d90339086908c9060e001613d08565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016106b591906138c6565b6000604051808303816000875af11580156106d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106fc9190810190613d92565b5061070b826060015133611cd9565b610719826080015133611cd9565b505060016002555050505050505050565b610732611dba565b600061073d83611e14565b90506000610756846020810151905160a09190911b0190565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166308b2ea5e7f000000000000000000000000000000000000000000000000000000000000000084866040518463ffffffff1660e01b81526004016107ca93929190613dc7565b602060405180830381865afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190613c11565b6040517f0cf85bcc0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529192506000917f00000000000000000000000000000000000000000000000000000000000000001690630cf85bcc9060240160a060405180830381865afa158015610890573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b49190613e18565b80519091506001600160a01b031615806109415750816001600160a01b0316856001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613c11565b6001600160a01b031614155b806109c3575085600001516001600160a01b0316856001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b79190613c11565b6001600160a01b031614155b156109fa576040517f9db8d5b100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838152600360209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a8116918217909255928a01518a519251939461ffff9091169392909116917f36b618d929a94eeca73ecddec2f5e49fdb6e4bde0a20e2987baaabb9e7fc21ab9190a4505050505050565b6060336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ac257604051633006171960e21b815260040160405180910390fd5b600080606084806020019051810190610adb9190613eb0565b909750919450925090506000839003610be45760008086806020019051810190610b059190613f31565b6040517fee1fe2ad0000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301528084166024830152919a509294509092507f0000000000000000000000000000000000000000000000000000000000000000169063ee1fe2ad906044016020604051808303816000875af1158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbb9190613f95565b945084604051602001610bd091815260200190565b604051602081830303815290604052955050505b60405163eb02c30160e01b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eb02c3019060240160e060405180830381865afa158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c709190613c49565b905060008087806020019051810190610c899190613fae565b61ffff9092166020880181905260c0880184905260a088018590526040517f42e910af000000000000000000000000000000000000000000000000000000008152600481018c905260248101959095526044850193909352606484019290925290935091506000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342e910af906084016000604051808303816000875af1158015610d4a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d7291908101906140ba565b93509350935093506000821215610e2a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166301e3366788606001513085610dc29061412e565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b505050505b6000811315610edc5760808701516040517f01e336670000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152306024820152604481018390527f0000000000000000000000000000000000000000000000000000000000000000909116906301e3366790606401600060405180830381600087803b158015610ec357600080fd5b505af1158015610ed7573d6000803e3d6000fd5b505050505b835115610f85576040517f65ae58470000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906365ae584790610f4a90879030906004016141c5565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b50505050610f8584611fda565b610faf898860800151868660008612610f9f576000610fa8565b610fa88661412e565b8b8b6120a9565b875115610fcc57610fc9876080015188606001518a6123dd565b50505b600082131561112157610fe487606001518a84612a9d565b606087015160405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b3906044016020604051808303816000875af1158015611059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107d9190614201565b5060608701516040517f338b5dea0000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063338b5dea90604401600060405180830381600087803b15801561110857600080fd5b505af115801561111c573d6000803e3d6000fd5b505050505b60008112156112745760808701516001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000006111678461412e565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156111b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d69190614201565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663338b5dea8860800151836112159061412e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561125b57600080fd5b505af115801561126f573d6000803e3d6000fd5b505050505b82511561131c5761128483612ce5565b6040517fe6ee95e20000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e6ee95e2906112e990869060040161421c565b600060405180830381600087803b15801561130357600080fd5b505af1158015611317573d6000803e3d6000fd5b505050505b6040517faba5b4b3000000000000000000000000000000000000000000000000000000008152600481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aba5b4b390602401600060405180830381600087803b15801561139757600080fd5b505af11580156113ab573d6000803e3d6000fd5b5050505050505050505050505050919050565b6002546001146113e15760405163558a1e0360e11b815260040160405180910390fd5b600280554715611460577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561144657600080fd5b505af115801561145a573d6000803e3d6000fd5b50505050505b61146a8882611b0f565b6000868661148e61147c60018861422f565b611484612ed8565b61ffff1690612ee8565b60408051602081019490945283019190915261ffff16606082015260808101869052600060a082015260c00160405160208183030381529060405290506000338a8a846040516020016114e393929190614251565b60408051601f1981840301815290829052611504939291879060200161427d565b60408051601f19818403018152908290527f8154831900000000000000000000000000000000000000000000000000000000825291506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063815483199061157c9085906004016138c6565b6000604051808303816000875af115801561159b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c39190810190613d92565b90506000818060200190518101906115db9190613f95565b90506115e78b33611cd9565b6115f18a33611cd9565b6040516323b872dd60e01b8152306004820152336024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401600060405180830381600087803b15801561165f57600080fd5b505af1158015611673573d6000803e3d6000fd5b5050600160025550505050505050505050505050565b611691611dba565b61169b6000612efb565b565b60015433906001600160a01b031681146117245760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e6572000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61172d81612efb565b50565b611738611dba565b600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff1990911681179091556117766000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6040517fafdd9edc0000000000000000000000000000000000000000000000000000000081523360048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063afdd9edc90602401602060405180830381865afa15801561182e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118529190613c11565b6001600160a01b03160361187957604051633006171960e21b815260040160405180910390fd5b6000336001600160a01b031663217a4b706040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dd9190613c11565b604080516080810182526000918101828152606082018390528152602081018290529192509060608060008080611916898b018b614343565b959c50939a5091985096509450925090506001600160a01b03808f1690891603611969578b82101561195b57604051630f271b5560e41b815260040160405180910390fd5b918b0191908b90039061197d565b8a811115611979578a900361197d565b5060005b61198c878987878787876120a9565b505050505060008711156119ae576119ae6001600160a01b038a163389612f21565b6040516370a0823160e01b81523060048201526000906001600160a01b038b16906370a0823190602401602060405180830381865afa1580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613f95565b9050896001600160a01b0316846001600160a01b031614158015611a3d5750600081115b15611b03576000611a518360000151611e14565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000611aac86612fb2565b8588866040518663ffffffff1660e01b8152600401611acf9594939291906143e8565b600060405180830381600087803b158015611ae957600080fd5b505af1158015611afd573d6000803e3d6000fd5b50505050505b50505050505050505050565b602081013515611c2857816001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190613c11565b6001600160a01b031663d505accf333084356020860135611ba2606088016040890161442f565b60405160e087901b6001600160e01b03191681526001600160a01b0395861660048201529490931660248501526044840191909152606483015260ff166084820152606084013560a4820152608084013560c482015260e401600060405180830381600087803b158015611c1557600080fd5b505af1925050508015611c26575060015b505b5050565b803515611c26576001600160a01b038316637ac2ff7b30848435611c56604087016020880161442f565b604080516001600160e01b031960e088901b1681526001600160a01b0390951660048601526024850193909352604484019190915260ff1660648301528401356084820152606084013560a482015260c401600060405180830381600087803b158015611cc257600080fd5b505af1925050508015611cd3575060015b50505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d449190613f95565b905080600003611d5357505050565b604051633f34d4cf60e21b8152600481018290526001600160a01b03838116602483015284169063fcd3533c90604401600060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b0316331461169b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161171b565b6060600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e82919081019061444c565b90506000611e97846020015161ffff16612fc7565b905060008282604051602001611eae929190614495565b604051602081830303815290604052611ec690614517565b905060008383604051602001611edd92919061453b565b604051602081830303815290604052611ef590614517565b9050825184510160020280601e0183019250806006018201915050818187600001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f789190614593565b60f81b604051602001611fc09392919092835260208301919091527fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052945050505050919050565b6000611fe582613067565b6040517fa50e72320000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a50e7232906120739030907f000000000000000000000000000000000000000000000000000000000000000090879087906004016145b0565b600060405180830381600087803b15801561208d57600080fd5b505af11580156120a1573d6000803e3d6000fd5b505050505050565b8351156122a857600084600186516120c191906145dc565b815181106120d1576120d16145ef565b60200260200101519050600185510385526000888288888888886040516020016121019796959493929190614605565b60405160208183030381529060405290506001865101865260006003600061212885612fb2565b815260200190815260200160002060009054906101000a90046001600160a01b031690506000816001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa15801561218c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b09190613c11565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156121f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221a9190613f95565b846020015161222991906145dc565b60405163168da99d60e31b81529091506001600160a01b0383169063b46d4ce89061226d90309061ffff9067ffffffffffffffff9087906001908b9060040161468c565b600060405180830381600087803b15801561228757600080fd5b505af115801561229b573d6000803e3d6000fd5b5050505050505050611db1565b8451156123b357600085600187516122c091906145dc565b815181106122d0576122d06145ef565b60200260200101519050600186510386526000888288888888886040516020016123009796959493929190614605565b60405160208183030381529060405290506001875101875260006003600061232785612fb2565b8152602080820192909252604090810160009081205492860151915163168da99d60e31b81526001600160a01b039093169350839263b46d4ce892612379923092909182916002908a9060040161468c565b600060405180830381600087803b15801561239357600080fd5b505af11580156123a7573d6000803e3d6000fd5b50505050505050611db1565b80156123d257604051630f271b5560e41b815260040160405180910390fd5b611db1868885612a9d565b6040516370a0823160e01b8152306004820152600090819081906001600160a01b038716906370a0823190602401602060405180830381865afa158015612428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244c9190613f95565b90506000866001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561248e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b29190613c11565b90506000866001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190613c11565b604051633f34d4cf60e21b8152600481018590523060248201529091506001600160a01b0389169063fcd3533c90604401600060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603612629577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561260f57600080fd5b505af1158015612623573d6000803e3d6000fd5b50505050505b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820185905283169063095ea7b3906044016020604051808303816000875af1158015612698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126bc9190614201565b506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886040516126f891906146d7565b6000604051808303816000865af19150503d8060008114612735576040519150601f19603f3d011682016040523d82523d6000602084013e61273a565b606091505b50915091508161277857806040517feff8841400000000000000000000000000000000000000000000000000000000815260040161171b91906138c6565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000602483015285169063095ea7b3906044016020604051808303816000875af11580156127e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280b9190614201565b506040516370a0823160e01b81523060048201526001600160a01b038416906370a0823190602401602060405180830381865afa158015612850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128749190613f95565b6040516370a0823160e01b81523060048201529096506001600160a01b038516906370a0823190602401602060405180830381865afa1580156128bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128df9190613f95565b965086156129bc5760405163095ea7b360e01b81526001600160a01b038b811660048301526024820189905285169063095ea7b3906044016020604051808303816000875af1158015612936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295a9190614201565b506040516394bf804d60e01b8152600481018890523060248201526001600160a01b038b16906394bf804d90604401600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b505050505b60405163095ea7b360e01b81526001600160a01b038a811660048301526024820188905284169063095ea7b3906044016020604051808303816000875af1158015612a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2f9190614201565b506040516394bf804d60e01b8152600481018790523060248201526001600160a01b038a16906394bf804d90604401600060405180830381600087803b158015612a7857600080fd5b505af1158015612a8c573d6000803e3d6000fd5b505050505050505050935093915050565b6000836001600160a01b0316632495a5996040518163ffffffff1660e01b8152600401602060405180830381865afa158015612add573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b019190613c11565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038616906370a0823190602401602060405180830381865afa158015612b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6f9190613f95565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015612bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdd9190613f95565b9050612be98183613cf5565b841115612c0f57612c0a6001600160a01b03841686308588038590036130cd565b508083035b80156120a15760405163095ea7b360e01b81526001600160a01b0387811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015612c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c889190614201565b506040516394bf804d60e01b8152600481018290523060248201526001600160a01b038716906394bf804d90604401600060405180830381600087803b158015612cd157600080fd5b505af1158015611b03573d6000803e3d6000fd5b6000815167ffffffffffffffff811115612d0157612d016135eb565b604051908082528060200260200182016040528015612d2a578160200160208202803683370190505b5090506000825167ffffffffffffffff811115612d4957612d496135eb565b604051908082528060200260200182016040528015612d72578160200160208202803683370190505b50905060005b8351811015612e0457612da3848281518110612d9657612d966145ef565b6020026020010151612fb2565b838281518110612db557612db56145ef565b602002602001018181525050838181518110612dd357612dd36145ef565b602002602001015160200151828281518110612df157612df16145ef565b6020908102919091010152600101612d78565b506000612e1084613067565b6040517fa7eaa1860000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a7eaa18690612ea0907f0000000000000000000000000000000000000000000000000000000000000000908790879030908890600401614723565b600060405180830381600087803b158015612eba57600080fd5b505af1158015612ece573d6000803e3d6000fd5b5050505050505050565b6000612ee342613105565b905090565b6000612ef48284614781565b9392505050565b6001805473ffffffffffffffffffffffffffffffffffffffff1916905561172d816131f3565b6040516001600160a01b038316602482015260448101829052611c269084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613250565b80516020810151905160009160a01b01610391565b60606000612fd483613338565b600101905060008167ffffffffffffffff811115612ff457612ff46135eb565b6040519080825280601f01601f19166020018201604052801561301e576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461302857509392505050565b606060005b82518110156130c7578161309c84838151811061308b5761308b6145ef565b602002602001015160000151611e14565b6040516020016130ad9291906147b2565b60408051601f19818403018152919052915060010161306c565b50919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611cd39085906323b872dd60e01b90608401612f66565b600080620151808304905080622649658101600062023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161316a5761316a61479c565b059050600b8105935083600c0281600201039050838260318503606402010191506000600180836107b28603600c020103816131a8576131a861479c565b04905061ffff8111156131e7576040517f73cde75100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b98975050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006132a5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661341a9092919063ffffffff16565b90508051600014806132c65750808060200190518101906132c69190614201565b611c265760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161171b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613381577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106133ad576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106133cb57662386f26fc10000830492506010015b6305f5e10083106133e3576305f5e100830492506008015b61271083106133f757612710830492506004015b60648310613409576064830492506002015b600a83106103915760010192915050565b60606134298484600085613431565b949350505050565b6060824710156134a95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161171b565b600080866001600160a01b031685876040516134c591906146d7565b60006040518083038185875af1925050503d8060008114613502576040519150601f19603f3d011682016040523d82523d6000602084013e613507565b606091505b509150915061351887838387613523565b979650505050505050565b6060831561359257825160000361358b576001600160a01b0385163b61358b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161171b565b5081613429565b61342983838151156135a75781518083602001fd5b8060405162461bcd60e51b815260040161171b91906138c6565b6000602082840312156135d357600080fd5b81356001600160e01b031981168114612ef457600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715613624576136246135eb565b60405290565b60405160e0810167ffffffffffffffff81118282101715613624576136246135eb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613676576136766135eb565b604052919050565b600067ffffffffffffffff821115613698576136986135eb565b50601f01601f191660200190565b600082601f8301126136b757600080fd5b81356136ca6136c58261367e565b61364d565b8181528460208386010111156136df57600080fd5b816020850160208301376000918101602001919091529392505050565b600060a082840312156130c757600080fd5b60008060008060008060008789036101c081121561372b57600080fd5b88359750602089013596506040890135955060608901359450608089013567ffffffffffffffff81111561375e57600080fd5b61376a8b828c016136a6565b9450506080609f198201121561377f57600080fd5b5060a088019150613794896101208a016136fc565b905092959891949750929550565b6001600160a01b038116811461172d57600080fd5b61ffff8116811461172d57600080fd5b6000604082840312156137d957600080fd5b6137e1613601565b905081356137ee816137a2565b815260208201356137fe816137b7565b602082015292915050565b6000806060838503121561381c57600080fd5b61382684846137c7565b91506040830135613836816137a2565b809150509250929050565b60006020828403121561385357600080fd5b813567ffffffffffffffff81111561386a57600080fd5b613429848285016136a6565b60005b83811015613891578181015183820152602001613879565b50506000910152565b600081518084526138b2816020860160208601613876565b601f01601f19169290920160200192915050565b602081526000612ef4602083018461389a565b600080600080600080600080610180898b0312156138f657600080fd5b8835613901816137a2565b97506020890135613911816137a2565b965060408901359550606089013594506080890135935060a0890135613936816137b7565b925060c089013567ffffffffffffffff81111561395257600080fd5b61395e8b828c016136a6565b92505061396e8a60e08b016136fc565b90509295985092959890939650565b600067ffffffffffffffff821115613997576139976135eb565b5060051b60200190565b600082601f8301126139b257600080fd5b813560206139c26136c58361397d565b82815260059290921b840181019181810190868411156139e157600080fd5b8286015b848110156139fc57803583529183019183016139e5565b509695505050505050565b600080600080600060a08688031215613a1f57600080fd5b8535613a2a816137a2565b94506020860135613a3a816137a2565b9350604086013567ffffffffffffffff80821115613a5757600080fd5b613a6389838a016139a1565b94506060880135915080821115613a7957600080fd5b613a8589838a016139a1565b93506080880135915080821115613a9b57600080fd5b50613aa8888289016136a6565b9150509295509295909350565b600060408284031215613ac757600080fd5b612ef483836137c7565b600080600080600060a08688031215613ae957600080fd5b8535613af4816137a2565b94506020860135613b04816137a2565b93506040860135925060608601359150608086013567ffffffffffffffff811115613b2e57600080fd5b613aa8888289016136a6565b600060208284031215613b4c57600080fd5b8135612ef4816137a2565b60008060008060008060a08789031215613b7057600080fd5b8635613b7b816137a2565b95506020870135613b8b816137a2565b94506040870135935060608701359250608087013567ffffffffffffffff80821115613bb657600080fd5b818901915089601f830112613bca57600080fd5b813581811115613bd957600080fd5b8a6020828501011115613beb57600080fd5b6020830194508093505050509295509295509295565b8051613c0c816137a2565b919050565b600060208284031215613c2357600080fd5b8151612ef4816137a2565b8051613c0c816137b7565b80518015158114613c0c57600080fd5b600060e08284031215613c5b57600080fd5b613c6361362a565b825167ffffffffffffffff81168114613c7b57600080fd5b8152613c8960208401613c2e565b6020820152613c9a60408401613c39565b6040820152613cab60608401613c01565b6060820152613cbc60808401613c01565b608082015260a083015160a082015260c083015160c08201528091505092915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561039157610391613cdf565b8481526001600160a01b0384166020820152608060408201526000613d30608083018561389a565b8281036060840152613518818561389a565b6000613d506136c58461367e565b9050828152838383011115613d6457600080fd5b612ef4836020830184613876565b600082601f830112613d8357600080fd5b612ef483835160208501613d42565b600060208284031215613da457600080fd5b815167ffffffffffffffff811115613dbb57600080fd5b61342984828501613d72565b6001600160a01b0384168152826020820152606060408201526000613def606083018461389a565b95945050505050565b80516fffffffffffffffffffffffffffffffff81168114613c0c57600080fd5b600060a08284031215613e2a57600080fd5b60405160a0810181811067ffffffffffffffff82111715613e4d57613e4d6135eb565b6040528251613e5b816137a2565b8152602083015160038110613e6f57600080fd5b6020820152613e8060408401613df8565b6040820152613e9160608401613df8565b60608201526080830151613ea4816137a2565b60808201529392505050565b60008060008060808587031215613ec657600080fd5b845193506020850151613ed8816137a2565b604086015190935067ffffffffffffffff80821115613ef657600080fd5b613f0288838901613d72565b93506060870151915080821115613f1857600080fd5b50613f2587828801613d72565b91505092959194509250565b600080600060608486031215613f4657600080fd5b8351613f51816137a2565b6020850151909350613f62816137a2565b604085015190925067ffffffffffffffff811115613f7f57600080fd5b613f8b86828701613d72565b9150509250925092565b600060208284031215613fa757600080fd5b5051919050565b600080600080600060a08688031215613fc657600080fd5b85519450602086015193506040860151613fdf816137b7565b6060870151608090970151959894975095949392505050565b600082601f83011261400957600080fd5b815160206140196136c58361397d565b8281526060928302850182019282820191908785111561403857600080fd5b8387015b858110156140ad57808903828112156140555760008081fd5b61405d613601565b60408083121561406d5760008081fd5b614075613601565b92508351614082816137a2565b835283880151614091816137b7565b838901529181529082015181870152845292840192810161403c565b5090979650505050505050565b600080600080608085870312156140d057600080fd5b845167ffffffffffffffff808211156140e857600080fd5b6140f488838901613ff8565b9550602087015191508082111561410a57600080fd5b5061411787828801613ff8565b604087015160609097015195989097509350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000820361415f5761415f613cdf565b5060000390565b600081518084526020808501945080840160005b838110156141ba578151805180516001600160a01b0316895260209081015161ffff16818a0152015160408801526060909601959082019060010161417a565b509495945050505050565b6060815260006141d86060830185614166565b6001600160a01b0384166020840152828103604084015260008152602081019150509392505050565b60006020828403121561421357600080fd5b612ef482613c39565b602081526000612ef46020830184614166565b61ffff82811682821603908082111561424a5761424a613cdf565b5092915050565b60006001600160a01b03808616835280851660208401525060606040830152613def606083018461389a565b60ff851681526001600160a01b0384166020820152608060408201526000613d30608083018561389a565b6000606082840312156142ba57600080fd5b6142c2613601565b90506142ce83836137c7565b81526040820135602082015292915050565b600082601f8301126142f157600080fd5b813560206143016136c58361397d565b8281526060928302850182019282820191908785111561432057600080fd5b8387015b858110156140ad5761433689826142a8565b8452928401928101614324565b6000806000806000806000610120888a03121561435f57600080fd5b873561436a816137a2565b96506143798960208a016142a8565b9550608088013567ffffffffffffffff8082111561439657600080fd5b6143a28b838c016142e0565b965060a08a01359150808211156143b857600080fd5b506143c58a828b016142e0565b979a969950949760c08101359660e0820135965061010090910135945092505050565b60006001600160a01b03808816835286602084015285604084015280851660608401525060a0608083015261351860a083018461389a565b60ff8116811461172d57600080fd5b60006020828403121561444157600080fd5b8135612ef481614420565b60006020828403121561445e57600080fd5b815167ffffffffffffffff81111561447557600080fd5b8201601f8101841361448657600080fd5b61342984825160208401613d42565b600083516144a7818460208801613876565b7f20426f6e6420436f75706f6e202800000000000000000000000000000000000090830190815283516144e181600e840160208801613876565b7f2900000000000000000000000000000000000000000000000000000000000000600e9290910191820152600f01949350505050565b805160208083015191908110156130c75760001960209190910360031b1b16919050565b6000835161454d818460208801613876565b7f2d435000000000000000000000000000000000000000000000000000000000009083019081528351614587816003840160208801613876565b01600301949350505050565b6000602082840312156145a557600080fd5b8151612ef481614420565b60006001600160a01b03808716835280861660208401525060806040830152613d306080830185614166565b8181038181111561039157610391613cdf565b634e487b7160e01b600052603260045260246000fd5b60006101206001600160a01b038a168352614645602084018a805180516001600160a01b0316835260209081015161ffff16818401520151604090910152565b80608084015261465781840189614166565b905082810360a084015261466b8188614166565b60c0840196909652505060e081019290925261010090910152949350505050565b6001600160a01b038716815261ffff8616602082015267ffffffffffffffff8516604082015283606082015260ff8316608082015260c060a082015260006131e760c083018461389a565b600082516146e9818460208701613876565b9190910192915050565b600081518084526020808501945080840160005b838110156141ba57815187529582019590820190600101614707565b60006001600160a01b03808816835260a0602084015261474660a08401886146f3565b838103604085015261475881886146f3565b905081861660608501528381036080850152614774818661389a565b9998505050505050505050565b61ffff81811683821601908082111561424a5761424a613cdf565b634e487b7160e01b600052601260045260246000fd5b600083516147c4818460208801613876565b8351908301906147d8818360208801613876565b0194935050505056fea2646970667358221220c79936f6a576e5e569d10dcd273e3126f5d912d13c42ab1a7effb73c8448853264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LeverageAdapter.sol:LeverageAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 120,
        "contract": "contracts/LeverageAdapter.sol:LeverageAdapter",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18385,
        "contract": "contracts/LeverageAdapter.sol:LeverageAdapter",
        "label": "_locked",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15482,
        "contract": "contracts/LeverageAdapter.sol:LeverageAdapter",
        "label": "_couponMarkets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}